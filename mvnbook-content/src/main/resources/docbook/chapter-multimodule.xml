<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE chapter PUBLIC "-//OASIS//DTD DocBook XML V4.5//EN"
"http://www.oasis-open.org/docbook/xml/4.5/docbookx.dtd">
<chapter id="multimodule" lang="fr">
  <title>Un projet multimodule</title>

  <section id="multimodule-sect-intro">
    <title>Introduction</title>

    <para>Dans ce chapitre, nous allons créer un projet multimodule qui combine
      les<indexterm class="startofrange" id="multimod1a">
        <primary>projet multimodule (exemple)</primary>
      </indexterm><indexterm class="startofrange" id="multimod1b">
        <primary>Applications Web</primary>
        <secondary>Exemple de projet multimodule</secondary>
      </indexterm><indexterm>
        <primary>project méteo (exemple)</primary>
        <seealso>projet multimodule</seealso>
      </indexterm> exemples des deux chapitres précédents.
      Le code du projet <literal>simple-weather</literal> développé dans le <xref
    linkend="customizing" /> sera combiné avec le projet 
    <literal>simple-webapp</literal> défini dans le <xref linkend="web" />
    pour créer une application web qui récupère et affiche des données
    météorologiques sur une page web. À la fin de ce chapitre, vous serez
    capable d'utiliser Maven pour développer des projets multimodules complexes.
    </para>

    <section id="multimodule-sect-downloading">
      <title>Télécharger l'exemple de ce chapitre</title>

      <para>Le projet multimodule de cet exemple consiste à développer une
      version modifiée des projets des chapitres
      <xref linkend="customizing" xrefstyle="select: labelnumber" /> et <xref
      linkend="web" xrefstyle="select: labelnumber" /> sans utiliser le plugin 
      Maven Archetype. Nous vous recommandons fortement de télécharger une copie
      du code exemple pour l'utiliser comme référence supplémentaire lors de 
      la lecture de ce chapitre. Le projet exemple de ce chapitre est téléchargeable
      avec le reste des exemples du livre à l'adresse suivante :</para>
      
      <screen>${examples.download.url}</screen>
      
      <para>
      Décompressez cette archive dans n'importe quel répertoire et ouvrez le répertoire <filename>ch-multi/</filename>. 
      Celui-ci inclut un répertoire <filename>simple-parent/</filename> qui contient le projet Maven multimodule
      développé dans ce chapitre. Dans ce dernier, vous trouverez un fichier 
      <filename>pom.xml</filename> et deux sous-modules, <filename>simple-weather/</filename> 
      et <filename>simple-webapp/</filename>.</para> 

    </section>
  </section>

  <section id="multimodule-sect-simple-parent">
    <title>Le projet parent</title>

    <para>Un projet multimodule est défini par un
    <acronym>POM</acronym><indexterm class="startofrange" id="parent1a">
        <primary>projet parent simple (exemple)</primary>
        <secondary>multimodule</secondary>
      </indexterm><indexterm class="startofrange" id="parent1b">
        <primary>projet multimodule project (exemple)</primary>
        <secondary>projet parent simple</secondary>
      </indexterm><indexterm class="startofrange" id="parent1c">
        <primary>Applications Web</primary>
        <secondary>exemple de projet multimodule</secondary>
        <tertiary>projet parent simple</tertiary>
      </indexterm> parent référençant un ou plusieurs sous-modules. Dans le répertoire
    <filename>simple-parent/</filename>, vous trouverez le 
    <acronym>POM</acronym> parent (également appelé <acronym>POM</acronym> de plus haut niveau)
    dans le fichier <filename>simple-parent/pom.xml</filename>. Consultez l'<xref
    linkend="ex-multimodule-parent-pom" />.</para>

    <example id="ex-multimodule-parent-pom">
      <title>POM du projet simple-parent</title>

      <programlisting language="xml">&lt;project xmlns="http://maven.apache.org/POM/4.0.0" 
  xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
  xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 
                      http://maven.apache.org/maven-v4_0_0.xsd"&gt;
  &lt;modelVersion&gt;4.0.0&lt;/modelVersion&gt;

  &lt;groupId&gt;org.sonatype.mavenbook.multi&lt;/groupId&gt;
  &lt;artifactId&gt;simple-parent&lt;/artifactId&gt;
  &lt;packaging&gt;pom&lt;/packaging&gt;
  &lt;version&gt;1.0&lt;/version&gt;
  &lt;name&gt;Multi Chapter Simple Parent Project&lt;/name&gt;
 
  &lt;modules&gt;
    &lt;module&gt;simple-weather&lt;/module&gt;
    &lt;module&gt;simple-webapp&lt;/module&gt;
  &lt;/modules&gt;

  &lt;build&gt;
    &lt;pluginManagement&gt;
      &lt;plugins&gt;
        &lt;plugin&gt;
          &lt;groupId&gt;org.apache.maven.plugins&lt;/groupId&gt;
          &lt;artifactId&gt;maven-compiler-plugin&lt;/artifactId&gt;
          &lt;configuration&gt;
            &lt;source&gt;1.5&lt;/source&gt;
            &lt;target&gt;1.5&lt;/target&gt;
          &lt;/configuration&gt;
        &lt;/plugin&gt;
      &lt;/plugins&gt;
   &lt;/pluginManagement&gt; 
  &lt;/build&gt;

  &lt;dependencies&gt;
    &lt;dependency&gt;
      &lt;groupId&gt;junit&lt;/groupId&gt;
      &lt;artifactId&gt;junit&lt;/artifactId&gt;
      &lt;version&gt;3.8.1&lt;/version&gt;
      &lt;scope&gt;test&lt;/scope&gt;
    &lt;/dependency&gt;
  &lt;/dependencies&gt;
&lt;/project&gt;

</programlisting>
    </example>

    <para>Remarquez que le parent définit un ensemble de coordonnées Maven : le
    <varname>groupId</varname> avec pour valeur
    <varname>org.</varname><varname>sonatype.</varname><varname>mavenbook.multi</varname>,     
    l'<varname>artifactId</varname> ayant pour valeur <varname>simple-parent</varname>
    et la <varname>version</varname> <varname>1.0</varname>. Le projet parent ne crée pas
    de <acronym>JAR</acronym> ni de <acronym>WAR</acronym> comme c'était le cas
    de nos projets précédents. À la place, il s'agit simplement d'un <acronym>POM</acronym> qui fait
    référence à d'autres projets Maven. Le packaging approprié pour un projet
    du type <varname>simple-parent</varname> qui fournit un simple Modèle Objet de Projet 
    (Project Object Model) est <varname>pom</varname>. 
    La section suivante du fichier <filename>pom.xml</filename> liste les sous-modules du projet.
    Ces modules sont déclarés via une balise XML <sgmltag>modules</sgmltag>
    et chacune des <indexterm>
        <primary sortas="balise modules (pom.xml)">balise &lt;modules&gt; 
        (pom.xml)</primary>
      </indexterm><indexterm>
        <primary sortas="balise module(pom.xml)">balise &lt;module&gt; 
        (pom.xml)</primary>
      </indexterm><indexterm>
        <primary>les sous-modules, définis dans le pom.xml</primary>
      </indexterm><indexterm>
        <primary>fichier pom.xml</primary>
        <secondary>définition des sous-modules</secondary>
      </indexterm> balises <sgmltag>module</sgmltag> qu'elle contient correspond à un
      des sous-répertoires du dossier <filename>simple-parent/</filename>. Maven sait qu'il faut
      chercher pour chacun de ces répertoires un fichier <filename>pom.xml</filename>. 
      Ainsi, il ajoutera ces sous-modules à la liste des projets Maven inclus dans le build.</para>         

    <para>
    Enfin, nous définissons quelques préférences qui seront héritées dans tous les sous-modules. 
    La configuration du build du projet <varname>simple-parent</varname> définit
    la <acronym>JVM</acronym> Java 5 comme cible de compilation. Comme le 
    plugin Maven Compiler est attaché au cycle de vie par défaut, il est possible
    d'utiliser la section <sgmltag>pluginManagement</sgmltag> du fichier 
    <filename>pom.xml</filename> pour effectuer cela. Nous discuterons de la balise 
    <sgmltag>pluginManagement</sgmltag> plus en détail dans les chapitres suivants, 
    mais la configuration des plugins par défaut et l'ajout de nouveaux plugins sont
    ainsi beaucoup plus faciles à voir lorsqu'ils sont dissociés de cette manière.
    La balise <sgmltag>dependencies</sgmltag> ajoute JUnit 3.8.1 comme une dépendance globale.
    La configuration du build comme les dépendances sont héritées dans tous les sous-modules.
    L'utilisation de l'héritage de POM vous permet d'ajouter des dépendances communes 
    pour les dépendances universelles comme JUnit ou Log4J.
    </para>
  </section>

  <section id="multimodule-sect-simple-weather">
    <title>Le module simple-weather</title>

    <para>Commençons par regarder le sous-module <varname>simple-weather</varname>.
    Ce module contient toutes<indexterm class="startofrange" id="multimod2a">
        <primary>projet multimodule (exemple)</primary>
        <secondary>sous-module météorologiques simple</secondary>
      </indexterm><indexterm class="startofrange" id="multimod2b">
        <primary>Applications Web</primary>
        <secondary>exemple de projet multimodule</secondary>
        <tertiary>sous-module météorologiques simple</tertiary>
      </indexterm> les classes qui s'occupent des interactions et du parsing
      du flux RSS de Yahoo! Météo.</para>

    <example>
      <title>POM du module simple-weather</title>

      <programlisting language="xml">&lt;project xmlns="http://maven.apache.org/POM/4.0.0" 
  xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
  xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 
                      http://maven.apache.org/maven-v4_0_0.xsd"&gt;
  &lt;modelVersion&gt;4.0.0&lt;/modelVersion&gt;
  &lt;parent&gt;
    &lt;groupId&gt;org.sonatype.mavenbook.multi&lt;/groupId&gt;
    &lt;artifactId&gt;simple-parent&lt;/artifactId&gt;
    &lt;version&gt;1.0&lt;/version&gt;
  &lt;/parent&gt;
  &lt;artifactId&gt;simple-weather&lt;/artifactId&gt;
  &lt;packaging&gt;jar&lt;/packaging&gt;

  &lt;name&gt;Multi Chapter Simple Weather API&lt;/name&gt;

  &lt;build&gt;
    &lt;pluginManagement&gt;
      &lt;plugins&gt;
        &lt;plugin&gt;
          &lt;groupId&gt;org.apache.maven.plugins&lt;/groupId&gt;
          &lt;artifactId&gt;maven-surefire-plugin&lt;/artifactId&gt;
          &lt;configuration&gt;
            &lt;testFailureIgnore&gt;true&lt;/testFailureIgnore&gt;
          &lt;/configuration&gt;
        &lt;/plugin&gt;
      &lt;/plugins&gt;
    &lt;/pluginManagement&gt; 
  &lt;/build&gt;

  &lt;dependencies&gt;
    &lt;dependency&gt;
      &lt;groupId&gt;log4j&lt;/groupId&gt;
      &lt;artifactId&gt;log4j&lt;/artifactId&gt;
      &lt;version&gt;1.2.14&lt;/version&gt;
    &lt;/dependency&gt;
    &lt;dependency&gt;
      &lt;groupId&gt;dom4j&lt;/groupId&gt;
      &lt;artifactId&gt;dom4j&lt;/artifactId&gt;
      &lt;version&gt;1.6.1&lt;/version&gt;
    &lt;/dependency&gt;
    &lt;dependency&gt;
      &lt;groupId&gt;jaxen&lt;/groupId&gt;
      &lt;artifactId&gt;jaxen&lt;/artifactId&gt;
      &lt;version&gt;1.1.1&lt;/version&gt;
    &lt;/dependency&gt;
    &lt;dependency&gt;
      &lt;groupId&gt;velocity&lt;/groupId&gt;
      &lt;artifactId&gt;velocity&lt;/artifactId&gt;
      &lt;version&gt;1.5&lt;/version&gt;
    &lt;/dependency&gt;
    &lt;dependency&gt;
      &lt;groupId&gt;org.apache.commons&lt;/groupId&gt;
      &lt;artifactId&gt;commons-io&lt;/artifactId&gt;
      &lt;version&gt;1.3.2&lt;/version&gt;
      &lt;scope&gt;test&lt;/scope&gt;
    &lt;/dependency&gt;
  &lt;/dependencies&gt;
&lt;/project&gt;
</programlisting>
    </example>
    
    <para>Le fichier <filename>pom.xml</filename> du module <varname>simple-weather</varname> 
    fait référence à un POM parent via un triplet de coordonnées Maven.<indexterm>
        <primary>POM (Project Object Model)</primary>
        <secondary>parent (top-level)</secondary>
      </indexterm><indexterm>
        <primary>POM top-level</primary>
      </indexterm><indexterm>
        <primary>POM parent</primary>
      </indexterm><indexterm>
        <primary>fichier pom.xml</primary>
        <secondary>parent (top-level)</secondary>
      </indexterm> Le POM parent du module
    <varname>simple-weather</varname> est identifié par son
    <varname>groupId</varname> avec pour valeur
    <varname>org.sonatype.mavenbook.multi</varname>, par l'<varname>artifactId</varname>
    <varname>simple-parent</varname> et par la
    <varname>version</varname> <varname>1.0</varname>. Consultez l'<xref
    linkend="multimodule-weather-service" />.</para>

    <example id="multimodule-weather-service">
      <title>La classe WeatherService</title>

      <programlisting language="java">package org.sonatype.mavenbook.weather;

import java.io.InputStream;

public class WeatherService {

    public WeatherService() {}

    public String retrieveForecast( String zip ) throws Exception {
        // Retrieve Data
        InputStream dataIn = new YahooRetriever().retrieve( zip );

        // Parse Data
        Weather weather = new YahooParser().parse( dataIn );

        // Format (Print) Data
        return new WeatherFormatter().format( weather );
    }
}
</programlisting>
    </example>

    <para>Dans le dossier <filename>src/main/java/org/sonatype/mavenbook/weather</filename>
    se trouve la classe <classname>WeatherService</classname>. Celle-ci fait 
    référence à trois objets définis dans le <xref linkend="customizing" />. Dans l'exemple de ce chapitre, nous créons un
    projet séparé qui contient les services utilisés par le projet de l'application web.  
    C'est un modèle commun dans le développement d'entreprise Java, une application complexe
    se compose souvent de plusieurs applications web. Vous pourriez donc avoir une 
    application d'entreprise composée de plusieurs applications web et de plusieurs 
    applications en ligne de commande. Souvent, vous voudrez extraire 
    certains éléments communs dans un service externalisé pour pouvoir les réutiliser
    sur plusieurs projets. C'est donc dans cette optique que nous créons la classe
    <classname>WeatherService</classname>. Ainsi, nous verrons comment le projet
    <varname>simple-webapp</varname> fait référence à un service défini dans module séparé : 
    <varname>simple-weather</varname>.</para>

    <para>La méthode <methodname>retrieveForecast()</methodname> prend en paramètre
    une chaîne de caractères contenant un code postal. Celle-ci est
    passé à la méthode <methodname>retrieve()</methodname> de la classe 
    <classname>YahooRetriever</classname> qui retournera un flux <acronym>XML</acronym>
    provenant de Yahoo! Météo. Ce même <acronym>XML</acronym> est ensuite passé 
    à la méthode <methodname>parse()</methodname> de la classe <classname>YahooParser</classname> 
    qui analyse ce flux et le retourne sous la forme d'un objet <classname>Weather</classname>.
    Ce dernier est ensuite formaté par la classe <classname>WeatherFormatter</classname> en une
    chaîne de caractères présentable.</para>
   
  </section>

  <section id="multimodule-sect-simple-web">
    <title>Le module simple-web</title>

    <para>Le module <varname>simple-webapp</varname> est le second sous-module<indexterm class="startofrange" id="multimod3a">
        <primary>projet multimodule (exemple)</primary>
    <secondary>simple sous-module d'une application web</secondary>
      </indexterm><indexterm class="startofrange" id="multimod3b">
        <primary>Applications Web</primary>
        <secondary>Exemple d'un projet multimodule</secondary>
        <tertiary>simple sous-module d'une application web</tertiary>
      </indexterm> référençant le projet <varname>simple-parent</varname>.
      Cette application web dépend du sous-module <varname>simple-weather</varname> car
      elle contient des servlets mettant en forme les résultats de la recherche sur Yahoo!
      Météo.</para>

    <example>
      <title>POM du module simple-webapp</title>

      <programlisting language="xml">&lt;project xmlns="http://maven.apache.org/POM/4.0.0" 
         xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
  xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 
                      http://maven.apache.org/maven-v4_0_0.xsd"&gt;
  &lt;modelVersion&gt;4.0.0&lt;/modelVersion&gt;
  &lt;parent&gt;
    &lt;groupId&gt;org.sonatype.mavenbook.multi&lt;/groupId&gt;
    &lt;artifactId&gt;simple-parent&lt;/artifactId&gt;
    &lt;version&gt;1.0&lt;/version&gt;
  &lt;/parent&gt;

  &lt;artifactId&gt;simple-webapp&lt;/artifactId&gt;
  &lt;packaging&gt;war&lt;/packaging&gt;
  &lt;name&gt;simple-webapp Maven Webapp&lt;/name&gt;
  &lt;dependencies&gt;
    &lt;dependency&gt;
      &lt;groupId&gt;javax.servlet&lt;/groupId&gt;
      &lt;artifactId&gt;servlet-api&lt;/artifactId&gt;
      &lt;version&gt;2.4&lt;/version&gt;
      &lt;scope&gt;provided&lt;/scope&gt;
    &lt;/dependency&gt;
    &lt;dependency&gt;
      &lt;groupId&gt;org.sonatype.mavenbook.multi&lt;/groupId&gt;
      &lt;artifactId&gt;simple-weather&lt;/artifactId&gt;
      &lt;version&gt;1.0&lt;/version&gt;
    &lt;/dependency&gt;
  &lt;/dependencies&gt;
  &lt;build&gt;
    &lt;finalName&gt;simple-webapp&lt;/finalName&gt;
    &lt;plugins&gt;
      &lt;plugin&gt;
        &lt;groupId&gt;org.mortbay.jetty&lt;/groupId&gt;
        &lt;artifactId&gt;maven-jetty-plugin&lt;/artifactId&gt;
      &lt;/plugin&gt;
    &lt;/plugins&gt;
  &lt;/build&gt;
&lt;/project&gt;</programlisting>
    </example>

    <para>Ce module <varname>simple-webapp</varname> contient une servlet très 
    simple qui se contente de récupérer un code postal à partir d'une requête HTTP, d'appeler
    la classe <classname>WeatherService</classname> que nous venons de voir précédemment dans     
    l'<xref linkend="multimodule-weather-service" /> et d'écrire le résultat
    dans le <classname>Writer</classname> de la réponse.</para>

    <example>
      <title>Servlet WeatherServlet du projet simple-webapp</title>

      <programlisting language="java">package org.sonatype.mavenbook.web;

import org.sonatype.mavenbook.weather.WeatherService;
import java.io.*;
import javax.servlet.*;
import javax.servlet.http.*;

public class WeatherServlet extends HttpServlet {
    public void doGet(HttpServletRequest request,
                      HttpServletResponse response)
        throws ServletException, IOException {
        String zip = request.getParameter("zip" );
        WeatherService weatherService = new WeatherService();
        PrintWriter out = response.getWriter();
        try {
            out.println( weatherService.retrieveForecast( zip ) );
        } catch( Exception e ) {
            out.println( "Error Retrieving Forecast: " + e.getMessage() );
        }
        out.flush();
        out.close();
    }
}</programlisting>
    </example>

    <para>
    La <classname>WeatherServlet</classname> instancie la classe <classname>WeatherService</classname>
    définie dans le projet <varname>simple-weather</varname>. Le code postal
    fourni en paramètre de la requête est passé à la méthode <methodname>retrieveForecast()</methodname>
    et le résultat est écrit dans le <classname>Writer</classname> de la réponse.</para>

    <para>Enfin, pour que tout cela fonctionne, il faut déclarer la servlet dans<indexterm>
        <primary>fichier web.xml</primary>
      </indexterm> le fichier <filename>web.xml</filename> du module <varname>simple-webapp</varname>.
    Ce fichier se trouve dans le répertoire <filename>src/main/webapp/WEB-INF</filename>.
    Les balises <sgmltag>servlet</sgmltag> et <sgmltag>servlet-mapping</sgmltag>
    du fichier <filename>web.xml</filename> associent l'URI <filename>/weather</filename>
    à la<indexterm class="endofrange" startref="multimod3a"></indexterm><indexterm class="endofrange"
    startref="multimod3b"></indexterm> servlet <classname>WeatherServlet</classname>, comme le montre
    l'<xref linkend="ex-simple-webapp-web.xml" />.</para>

    <example id="ex-simple-webapp-web.xml">
      <title>Fichier web.xml du module simple-webapp</title>

      <programlisting language="xml">&lt;!DOCTYPE web-app PUBLIC
 "-//Sun Microsystems, Inc.//DTD Web Application 2.3//EN"
 "http://java.sun.com/dtd/web-app_2_3.dtd" &gt;

&lt;web-app&gt;
  &lt;display-name&gt;Archetype Created Web Application&lt;/display-name&gt;
  &lt;servlet&gt;
    &lt;servlet-name&gt;simple&lt;/servlet-name&gt;
    &lt;servlet-class&gt;org.sonatype.mavenbook.web.SimpleServlet&lt;/servlet-class&gt;
  &lt;/servlet&gt;
  &lt;servlet&gt;
    &lt;servlet-name&gt;weather&lt;/servlet-name&gt;
    &lt;servlet-class&gt;org.sonatype.mavenbook.web.WeatherServlet&lt;/servlet-class&gt;
  &lt;/servlet&gt;
  &lt;servlet-mapping&gt;
    &lt;servlet-name&gt;simple&lt;/servlet-name&gt;
    &lt;url-pattern&gt;/simple&lt;/url-pattern&gt;
  &lt;/servlet-mapping&gt;
  &lt;servlet-mapping&gt;
    &lt;servlet-name&gt;weather&lt;/servlet-name&gt;
    &lt;url-pattern&gt;/weather&lt;/url-pattern&gt;
  &lt;/servlet-mapping&gt;
&lt;/web-app&gt;
</programlisting>
    </example>
  </section>

  <section id="multimodule-sect-building-multimodule">
    <title>Construction du projet multimodule</title>

    <para>Nous venons de créer le projet <varname>simple-weather</varname> qui contient<indexterm class="startofrange" id="multimod4a">
        <primary>projet multimodule (exemple)</primary>
        <secondary>build</secondary>
      </indexterm><indexterm class="startofrange" id="multimod4b">
        <primary>Applications Web</primary>
        <secondary>exemple de projet multimodule</secondary>
        <tertiary>build</tertiary>
      </indexterm> le code interagissant avec le service Yahoo! Météo
    et le projet <varname>simple-webapp</varname> qui contient une simple servlet 
    de présentation. C'est le moment de compiler et de packager notre application 
    sous la forme d'un fichier<indexterm>
        <primary>fichiers WAR</primary>
        <secondary>compiler des projets multimodule en</secondary>
      </indexterm><indexterm>
        <primary>compiler des projects</primary>
        <seealso>fichier WAR files</seealso>
      </indexterm> <acronym>WAR</acronym>. Pour cela, vous devez compiler et installer
      les deux projets précédemment créés dans un ordre précis. Comme le projet
      <varname>simple-webapp</varname> dépend du projet
    <varname>simple-weather</varname>, nous devons transformer ce dernier (<varname>simple-weather</varname>)
    en <acronym>JAR</acronym> avant de pouvoir compiler la webapp. Pour ce faire,
    utilisons la commande <command>mvn clean install</command> à partir du projet de plus haut niveau
    <varname>simple-parent</varname> :</para>
    
    <screen>~/examples/ch-multi/simple-parent$ <command>mvn clean install</command>
[INFO] Scanning for projects...
[INFO] Reactor build order: 
[INFO]   Simple Parent Project
[INFO]   simple-weather
[INFO]   simple-webapp Maven Webapp
[INFO] ----------------------------------------------------------------------
[INFO] Building simple-weather
[INFO]    task-segment: [clean, install]
[INFO] ----------------------------------------------------------------------
[...]
[INFO] [install:install]
[INFO] Installing simple-weather-1.0.jar to simple-weather-1.0.jar
[INFO] ----------------------------------------------------------------------
[INFO] Building simple-webapp Maven Webapp
[INFO]    task-segment: [clean, install]
[INFO] ----------------------------------------------------------------------
[...]
[INFO] [install:install]
[INFO] Installing simple-webapp.war to simple-webapp-1.0.war
[INFO] 
[INFO] ----------------------------------------------------------------------
[INFO] Reactor Summary:
[INFO] ----------------------------------------------------------------------
[INFO] Simple Parent Project ............................... SUCCESS [3.041s]
[INFO] simple-weather ...................................... SUCCESS [4.802s]
[INFO] simple-webapp Maven Webapp .......................... SUCCESS [3.065s]
[INFO] ----------------------------------------------------------------------
</screen>

    <para>Lorsque Maven est exécuté dans un projet avec des sous-modules,
    il commence par charger le <acronym>POM</acronym> parent et localiser tous les
    <acronym>POM</acronym>s des sous-modules. Maven regroupe alors tous ces <acronym>POM</acronym>s
    dans le plugin Maven Reactor. Il s'agit d'un plugin chargé d'analyser les dépendances entre les modules.
    Le plugin Reactor s'occupe de l'ordonnancement des composants pour garantir que les
    modules interdépendants soient compilés et installés dans le bon ordre.</para>

    <note>
      <para>Le plugin Reactor préserve l'ordre des modules défini dans le <acronym>POM</acronym>
      à moins que des changements ne soient nécessaires. Une bonne technique pour comprendre
      ce mécanisme consiste à imaginer que les modules avec les dépendances inter projets soient
      descendus dans une liste jusqu'à ce que l'ordre des dépendances soit satisfaisant. 
      Dans quelques rares occasions, il peut être bon de réarranger manuellement l'ordre de vos modules 
      &mdash; par exemple si vous voulez qu'un module fréquemment instable soit remonté en début de build.
      </para>
    </note>
    <para>Dès que le plugin Reactor a trouvé l'ordre dans lequel les projets doivent être construits,
    Maven exécute les goals indiqués pour chaque module afin d'effectuer le build du projet multimodule.
    Dans cet exemple, vous pouvez effectivement remarquer que Maven commence par construire 
    le module <varname>simple-weather</varname> avant l'application web <varname>simple-webapp</varname>
    en exécutant la commande <command>mvn clean install</command>.</para>

    <note>
      <para>Quand vous exécutez Maven à partir de la ligne de commande vous serez amenés à utiliser
      fréquemment la phase <varname>clean</varname> avant l'exécution d'autres phases du cycle de vie.
      Lorsque vous précisez <varname>clean</varname> sur la ligne de commande, vous vous assurez
      que Maven enlève les fichiers générés lors des builds précédents avant qu'il ne 
      compile et package votre application. Exécuter la commande <varname>clean</varname> n'est
      pas nécessaire, mais c'est une précaution utile pour s'assurer que vous
      effectuez un "build propre".</para>
    </note>
  </section>

  <section id="multimodule-sect-running-web">
    <title>Exécution de l'application web</title>

    <para>Une fois que le projet multimodule a été installé via la commande
    <command>mvn<indexterm class="startofrange" id="multimod5a">
        <primary>projet multimodule (exemple)</primary>
        <secondary>exécution</secondary>
      </indexterm><indexterm class="startofrange" id="multimod5b">
        <primary>Applications Web</primary>
        <secondary>exemple de projet multimodule</secondary>
        <tertiary>exécution</tertiary>
      </indexterm> clean install</command> depuis le projet parent,
    <varname>simple-project</varname>, vous pouvez vous rendre dans le répertoire
    de la <varname>simple-webapp</varname> et lancer le goal <varname>run</varname> du
    plugin Jetty :</para>

    <screen>~/examples/ch06/simple-parent/simple-webapp $ <command>mvn jetty:run</command>
[INFO] ----------------------------------------------------------------------
[INFO] Building simple-webapp Maven Webapp
[INFO]    task-segment: [jetty:run]
[INFO] ----------------------------------------------------------------------
[...]
[INFO] [jetty:run]
[INFO] Configuring Jetty for project: simple-webapp Maven Webapp
[...]
[INFO] Webapp directory = ~/examples/ch06/simple-parent/\
                          simple-webapp/src/main/webapp
[INFO] Starting jetty 6.1.6rc1 ...
2007-11-18 1:58:26.980::INFO:  jetty-6.1.6rc1
2007-11-18 1:58:26.125::INFO:  No Transaction manager found
2007-11-18 1:58:27.633::INFO:  Started SelectChannelConnector@0.0.0.0:8080
[INFO] Started Jetty Server
</screen>

    <para>Une fois que Jetty est démarré, chargez la page <ulink
    url="http://localhost:8080/simple-webapp/weather?zip=01201">http://localhost:8080/simple-webapp/weather?zip=01201</ulink>
    dans votre navigateur pour consulter le service météo que nous venons de développer.</para>
  </section>
</chapter>