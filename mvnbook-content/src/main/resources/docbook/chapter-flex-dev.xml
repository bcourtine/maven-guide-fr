<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE chapter PUBLIC "-//OASIS//DTD DocBook XML V4.5//EN"
"http://www.oasis-open.org/docbook/xml/4.5/docbookx.dtd">
<chapter>
  <title>Developing with Flexmojos</title>

  <section id="flex-dev-sect-intro">
    <title>Introduction</title>

    <para>This chapter provides an overview of the Flexmojos project for
    people interested in using FlexMojos to develop Flex applications and
    libraries.</para>
  </section>

  <section id="flex-dev-sect-config-build">
    <title>Configuring Build Environment for Flexmojos</title>

    <para>Before you attempt to compile Flex libraries and applications with
    Maven, you will need to complete two configuration tasks:</para>

    <itemizedlist>
      <listitem>
        <para>Configure your Maven settings to reference a repository which
        contains the Flex framework</para>
      </listitem>

      <listitem>
        <para>Add the Flash Player to your PATH to support Flex unit
        testing</para>
      </listitem>

      <listitem>
        <para>(Optional) Configure your Maven Settings to include the Sonatype
        plugin group</para>
      </listitem>
    </itemizedlist>

    <section id="flex-dev-sect-referencing-repo-with-flex">
      <title>Referencing a Repository with the Flex Framework</title>

      <para>To setup your Maven environment, you can install a simple
      <filename>~/.m2/setting.xml</filename> file which references the
      Sonatype public repository directly, or you can install Nexus and add
      the Sonatype public repository as a proxy repository in your own
      repository manager. While the most straightforward option is to use the
      Maven Settings shown in section <xref
      linkend="flex-dev-sect-direct-repo" />, downloading and installing Nexus
      will give you the control and flexibility you need to cache and manage
      artifacts generated by your own build. If you are just interested in
      getting up and running with Flexmojos, read <xref
      linkend="flex-dev-sect-direct-repo" /> next. If you are interested in a
      long-term solution which can be deployed to support a development team,
      continue to <xref linkend="flex-dev-sect-proxy-nexus" />.</para>

      <para>If your organization is already using Sonatype Nexus to proxy
      remote repositories, you probably already have a customized
      <filename>~/.m2/settings.xml</filename> file which points to a single
      Nexus group. If this is your situation, you should add a Proxy
      repository for the Sonatype public repository group at <ulink
      url="http://repository.sonatype.com/content/groups/public">http://repository.sonatype.com/content/groups/public</ulink>.
      Adding a proxy repository for this remote group and then adding this
      group to your Nexus installation's public repository group will give
      clients of your Nexus instance access to the artifacts from the Sonatype
      repository.sonatype.com Nexus instance.</para>

      <section id="flex-dev-sect-direct-repo">
        <title>Using Sonatype's Repository Directly</title>

        <para>Before you run Maven against Flexmojos, you need to configure
        you <filename>~/.m2/settings.xml</filename> to contain the following
        XML:</para>

        <example id="ex-flex-dev-settings">
          <title>Settings XML for Sonatype Repository</title>

          <programlisting>&lt;settings&gt;
  &lt;mirrors&gt;
    &lt;mirror&gt;
      &lt;!--This sends everything else to /public --&gt;
      &lt;id&gt;nexus&lt;/id&gt;
      &lt;mirrorOf&gt;*&lt;/mirrorOf&gt;
      &lt;url&gt;http://repository.sonatype.org/content/groups/public&lt;/url&gt;
    &lt;/mirror&gt;
  &lt;/mirrors&gt;
  &lt;profiles&gt;
    &lt;profile&gt;
      &lt;id&gt;nexus&lt;/id&gt;
      &lt;!—-Enable snapshots for the built in central repo to direct --&gt;
      &lt;!--all requests to nexus via the mirror --&gt;
      &lt;repositories&gt;
        &lt;repository&gt;
          &lt;id&gt;central&lt;/id&gt;
          &lt;url&gt;http://central&lt;/url&gt;
          &lt;releases&gt;&lt;enabled&gt;true&lt;/enabled&gt;&lt;/releases&gt;
          &lt;snapshots&gt;&lt;enabled&gt;true&lt;/enabled&gt;&lt;/snapshots&gt;
        &lt;/repository&gt;
      &lt;/repositories&gt;
     &lt;pluginRepositories&gt;
        &lt;pluginRepository&gt;
          &lt;id&gt;central&lt;/id&gt;
          &lt;url&gt;http://central&lt;/url&gt;
          &lt;releases&gt;&lt;enabled&gt;true&lt;/enabled&gt;&lt;/releases&gt;
          &lt;snapshots&gt;&lt;enabled&gt;true&lt;/enabled&gt;&lt;/snapshots&gt;
        &lt;/pluginRepository&gt;
      &lt;/pluginRepositories&gt;
    &lt;/profile&gt;
  &lt;/profiles&gt;
  &lt;activeProfiles&gt;
    &lt;!—-make the profile active all the time --&gt;
    &lt;activeProfile&gt;nexus&lt;/activeProfile&gt;
  &lt;/activeProfiles&gt;
&lt;/settings&gt;
</programlisting>
        </example>

        <note>
          <para>We suggest that you place the contents of <xref
          linkend="ex-flex-dev-settings" /> in you
          <filename>~/.m2/settings.xml</filename> because it is the default
          location for Maven Settings. But, if you have already customized
          your <filename>~/.m2/settings.xml</filename> you can also put the
          the contents of this file in another settings file such as
          <filename>~/.m2/sonatype-settings.xml</filename>. If you do this,
          you just have to remember to specify the location of the settings
          file on every Maven command line. For example, <command>mvn
          install</command> would become <command>mvn -s
          ~/.m2/sonatype-settings.xml install</command>.</para>
        </note>

        <para>The XML shown in <xref linkend="ex-flex-dev-settings" />, will
        configure Maven to retrieve all artifacts from the Sonatype Nexus
        installation which is available at <ulink
        url="http://repository.sonatype.org">http://repository.sonatype.org</ulink>.
        This Nexus installation provides a public group which combines a
        number of different repositories into a single repository group.
        Instead of configuring your clients to retrieve artifacts from several
        different repositories, the Sonatype Nexus repository manager allows
        you centralizing clients to one point of contact: a single Nexus
        repository group. Builds with use the Flexmojos plugin rely on Flex
        artifacts which are not yet available from standard repositories like
        the Central Maven Repository. Pointing your build at the Sonatype
        repository allows you to retrieve the necessary libraries, SWFs, and
        SWCs which are required when building Flex applications.</para>
      </section>

      <section id="flex-dev-sect-proxy-nexus">
        <title>Proxying Sonatype's Repository with Nexus</title>

        <para>Instead of pointing directly at the Sonatype public repository,
        Sonatype recommends that you install a repository manager and proxy
        the Sonatype public repository. When you proxy a remote repository
        with a repository manager such as Nexus, you gain a level of control
        and stability not possible when your build relies directly on external
        resources. In addition to this control and stability, a repository
        manager also provides you with an deployment target for binary
        artifacts generated by your own builds. For instructions on
        downloading, installing, and configuring Nexus, refer to the <ulink
        url="http://www.sonatype.com/books/nexus-book/reference/install.html">Installation
        chapter in Repository Management with Nexus</ulink>. Once Nexus is
        installed and started, complete the following steps to add a proxy
        repository for the Sonatype public repository.</para>

        <para>To add a new proxy repository, click on the
        <guimenuitem>Repositories</guimenuitem> link under
        <guisubmenu>Views/Repositories</guisubmenu> in the
        <guimenu>Nexus</guimenu> menu on the left-hand side of the Nexus user
        interface. Clicking on <guimenuitem>Repositories</guimenuitem> will
        load the <guilabel>Repositories</guilabel> panel. In the
        <guilabel>Repositories</guilabel> panel, click on the
        <guibutton>Add..</guibutton> button and select Proxy Repository as
        shown in <xref linkend="fig-flex-dev-add-proxy-repos" />.</para>

        <figure id="fig-flex-dev-add-proxy-repos">
          <title>Adding a Proxy Repository to Sonatype Nexus</title>

          <mediaobject>
            <imageobject>
              <imagedata fileref="figs/web/flex-dev-nexus-add-proxy.png" />
            </imageobject>
          </mediaobject>
        </figure>

        <para>Once you've created a new Proxy repository, you will need to
        configure it to point to the Sonatype public repository. Select the
        new repository, and then select the Configuration tab in the lower
        half of the window. Populate the following field with the values shown
        in <xref linkend="fig-flex-dev-sonatype-public-proxy" />.</para>

        <itemizedlist>
          <listitem>
            <para>Repository ID is "sonatype-public"</para>
          </listitem>

          <listitem>
            <para>Repository Name is "Sonatype Public Proxy"</para>
          </listitem>

          <listitem>
            <para>The Remote Storage Location is <ulink
            url="http://repository.sonatype.org/content/groups/public">http://repository.sonatype.org/content/groups/public</ulink></para>
          </listitem>
        </itemizedlist>

        <figure id="fig-flex-dev-sonatype-public-proxy">
          <title>Configuring the Sonatype Public Proxy Repository</title>

          <mediaobject>
            <imageobject>
              <imagedata fileref="figs/web/flex-dev-nexus-sonatype-proxy.png" />
            </imageobject>
          </mediaobject>
        </figure>

        <para>Once you have populated the fields shown in <xref
        linkend="fig-flex-dev-sonatype-public-proxy" /> click the Save button
        to save the proxy repository and start proxying the Sonatype public
        repository. Nexus ships with a public repository group, which combines
        several repositories into a single point of contact for Maven clients.
        To complete our setup of the new proxy repository, you should add this
        new proxy repository to the Nexus public group. To do this, return to
        the list of repositories which should now be visible in the upper half
        of the Repositories panel as shown in <xref
        linkend="fig-flex-dev-sonatype-public-proxy" />. Click on the Public
        Repositories group and then click on the Configuration tab in the
        lower half of the Repository panel. Clicking the Configuration tab
        will expose the Group configuration form shown in <xref
        linkend="fig-flex-dev-adding-sonatype-to-group" />.</para>

        <figure id="fig-flex-dev-adding-sonatype-to-group">
          <title>Adding the Sonatype Public Proxy to the Public Repositories
          Group</title>

          <mediaobject>
            <imageobject>
              <imagedata fileref="figs/web/flex-dev-nexus-sonatype-to-group.png" />
            </imageobject>
          </mediaobject>
        </figure>

        <para>To add the <guilabel>Sonatype Public Proxy</guilabel> to the
        <guilabel>Public Repositories</guilabel> group simply drag and drop
        the <guilabel>Sonatype Public Proxy</guilabel> repository from the
        <guilabel>Available Repositories</guilabel> list to the
        <guilabel>Ordered Group Repositories</guilabel> list. Click
        <guibutton>Save</guibutton>, and you have successfully added a proxy
        of the Sonatype public repository to your Nexus installation. Whenever
        a client requests an artifact from this repository group, if Nexus has
        not already cached a matching artifact, it will query the Sonatype
        public repository at <ulink
        url="http://repository.sonatype.org/content/groups/public">http://repository.sonatype.org/content/groups/public</ulink>.
        Your Nexus installation will maintain a local cache of all artifacts
        retrieved from the Sonatype repository. This local cache gives you
        more control and contributes to a more stable build environment. If
        you are setting up a group of developers to rely upon artifacts from
        the Sonatype public repository, you'll have a completely
        self-contained build environment that won't be subject to the
        availability of the Sonatype repository.</para>

        <para>The final step to connecting your Maven installation to the
        Nexus instance you just configured is to update your Maven Settings to
        use your Nexus repository group as a mirror for all repositories. To
        do this, you need to put the following XML in your
        <filename>~/.m2/settings.xml</filename> file.</para>

        <example id="ex-flex-dev-settings-local-nexus">
          <title>Settings XML for Local Nexus Instance</title>

          <programlisting>&lt;settings&gt;
  &lt;mirrors&gt;
    &lt;mirror&gt;
      &lt;!--This sends everything else to /public --&gt;
      &lt;id&gt;nexus&lt;/id&gt;
      &lt;mirrorOf&gt;*&lt;/mirrorOf&gt;
      &lt;url&gt;http://localhost:8081/nexus/content/groups/public&lt;/url&gt;
    &lt;/mirror&gt;
  &lt;/mirrors&gt;
  &lt;profiles&gt;
    &lt;profile&gt;
      &lt;id&gt;nexus&lt;/id&gt;
      &lt;!—-Enable snapshots for the built in central repo to direct --&gt;
      &lt;!--all requests to nexus via the mirror --&gt;
      &lt;repositories&gt;
        &lt;repository&gt;
          &lt;id&gt;central&lt;/id&gt;
          &lt;url&gt;http://central&lt;/url&gt;
          &lt;releases&gt;&lt;enabled&gt;true&lt;/enabled&gt;&lt;/releases&gt;
          &lt;snapshots&gt;&lt;enabled&gt;true&lt;/enabled&gt;&lt;/snapshots&gt;
        &lt;/repository&gt;
      &lt;/repositories&gt;
     &lt;pluginRepositories&gt;
        &lt;pluginRepository&gt;
          &lt;id&gt;central&lt;/id&gt;
          &lt;url&gt;http://central&lt;/url&gt;
          &lt;releases&gt;&lt;enabled&gt;true&lt;/enabled&gt;&lt;/releases&gt;
          &lt;snapshots&gt;&lt;enabled&gt;true&lt;/enabled&gt;&lt;/snapshots&gt;
        &lt;/pluginRepository&gt;
      &lt;/pluginRepositories&gt;
    &lt;/profile&gt;
  &lt;/profiles&gt;
  &lt;activeProfiles&gt;
    &lt;!—-make the profile active all the time --&gt;
    &lt;activeProfile&gt;nexus&lt;/activeProfile&gt;
  &lt;/activeProfiles&gt;
&lt;/settings&gt;
</programlisting>
        </example>

        <para>This XML file configures Maven to consult a single public
        repository group for all configured repositories and plugin
        repositories. It is a simple way to guarantee that every request for
        an artifact is made through your Nexus installation.</para>

        <note>
          <para>The only difference between <xref
          linkend="ex-flex-dev-settings-local-nexus" /> and <xref
          linkend="ex-flex-dev-settings" /> is the settings/mirrors/mirror/url
          element. The first example addresses the Sonatype public repository
          directly which the second example references a public group on a
          Nexus instance you maintain. You use Nexus because it allows you to
          control the repositories and artifacts that are used in your build
          system. You can think of Nexus as something of a firewall or a
          centralized point of contact between your builds and the external
          environment.</para>
        </note>
      </section>
    </section>

    <section id="flex-dev-sect-configuring-unit-tests">
      <title>Configuring Environment to Support Flex Unit Tests</title>

      <para>Flexmojos expects to be able to launch the stand-alone Flash Play
      to execute unit tests. In order for this to work, you will need to add
      the stand-alone Flash Player to your PATH, or you will need to pass the
      location of the Flash Player executable to your build using the
      <varname>-DflashPlayer.command</varname> options. When executing a unit
      test, Flex Mojos expects to launch the following platform-specific
      executables for the stand-alone Flash Player:</para>

      <variablelist>
        <varlistentry>
          <term>Microsoft Windows</term>

          <listitem>
            <para>FlexMojos will attempt to launch the
            <filename>FlashPlayer.exe</filename> binary. To support execution
            of unit tests, add the directory containing
            <filename>FlashPlayer.exe</filename> to your PATH or pass in the
            location of the <filename>FlashPlayer.exe</filename> binary to
            Maven using the
            <varname>-DflashPlayer.command=${filepath}</varname> command-line
            option.</para>
          </listitem>
        </varlistentry>

        <varlistentry>
          <term>Macintosh OSX</term>

          <listitem>
            <para>FlexMojos will attempt to launch the "Flash Player"
            application. To support the execution of unit tests, add the
            directory containing "Flash Player" to your PATH or pass the path
            to the executable to Maven using the
            <varname>-DflashPlayer.command=${filepath}</varname> command-line
            option.</para>
          </listitem>
        </varlistentry>

        <varlistentry>
          <term>Unix (Linux, Solaris, etc.)</term>

          <listitem>
            <para>FlexMojos will attempt to launch the
            <filename>flashplayer</filename> executable. To support the
            execution of unit tests, add the directory containing
            <filename>flashplayer</filename> to your PATH or pass the path to
            the executable to Maven using the
            <varname>-DflashPlayer.command=${filepath}</varname> command-line
            option.</para>
          </listitem>
        </varlistentry>
      </variablelist>

      <note>
        <para>On a Linux machine, you will need to have X virtual framebuffer
        (Xvfb) installed to run unit tests in a headless build. For more
        information about Xvfb, <ulink
        url="http://en.wikipedia.org/wiki/Xvfb">click here</ulink>.</para>
      </note>

      <para>If you have been developing Flash Applications with Adobe Flash
      CS4 or Adobe Flex Builder or if you have been viewing flash content in a
      browser, you probably have the Flash Player installed somewhere on your
      workstation. While it is possible to configure Maven to use one of these
      players for Flex unit tests, you'll want to make sure that you are
      running the debug version of the Flash Player. To minimize the potential
      for incompatibility, you should download one of the Flash Player's
      listed below and install it on your local workstation. To download the
      standalone Flash Player for you environment:</para>

      <itemizedlist>
        <listitem>
          <para>Windows: <ulink
          url="http://download.macromedia.com/pub/flashplayer/updaters/10/flashplayer_10_sa_debug.exe">http://download.macromedia.com/pub/flashplayer/updaters/10/flashplayer_10_sa_debug.exe</ulink></para>
        </listitem>

        <listitem>
          <para>Mac OSX: <ulink
          url="http://download.macromedia.com/pub/flashplayer/updaters/10/flashplayer_10_sa_debug.app.zip">http://download.macromedia.com/pub/flashplayer/updaters/10/flashplayer_10_sa_debug.app.zip</ulink></para>
        </listitem>

        <listitem>
          <para>Linux: <ulink
          url="http://download.macromedia.com/pub/flashplayer/updaters/10/flash_player_10_linux_dev.tar.gz">http://download.macromedia.com/pub/flashplayer/updaters/10/flash_player_10_linux_dev.tar.gz</ulink></para>
        </listitem>
      </itemizedlist>

      <para>To install this player and add it to your PATH on an OSX machine,
      run the following commands:</para>

      <screen>$ <command>wget http://download.macromedia.com/pub/flashplayer/updaters/10/flashplayer_10_sa_debug.app.zip</command>
$ <command>unzip flashplayer_10_sa_debug.app.zip</command>
$ <command>sudo cp -r Flash\ Player.app /Applications/</command>
$ <command>export PATH=/Applications/Flash\ Player.app/Contents/MacOS:${PATH}</command></screen>

      <para>Instead of adding the path for the Flash Player to your PATH on
      the command-line, you should configure your environment's profile. On
      OSX, tyou would add the last export command to you
      <filename>~/.bash_profile</filename>.</para>
    </section>

    <section id="flex-dev-sect-plugin-group">
      <title>Adding FlexMojos to Your Maven Settings' Plugin Groups</title>

      <para>If you need to run FlexMojos goals from the command-line, it will
      be more convenient if you add the Sonatype Plugin groups to your Maven
      Settings. To do this, open up <filename>~/.m2/settings.xml</filename>
      and add the following plugin groups:</para>

      <example>
        <title>Adding Sonatype Plugins to Maven Settings</title>

        <programlisting>&lt;pluginGroups&gt;
  &lt;pluginGroup&gt;com.sonatype.maven.plugins&lt;/pluginGroup&gt;
  &lt;pluginGroup&gt;org.sonatype.plugins&lt;/pluginGroup&gt;
&lt;/pluginGroups&gt;
</programlisting>
      </example>

      <para>Once you've added these plugin groups to your Maven Settings you
      can invoke a FlexMojos goal using the plugin prefix
      <varname>flexmojos</varname>. Without this configuration, calling the
      <varname>flexbuilder</varname> goal would involve the following
      command-line:</para>

      <screen>$ <command>mvn org.sonatype.flexmojos:flexmojos-maven-plugin:3.2.0:flexbuilder</command></screen>

      <para>With the org.sonatype.plugins group in your Maven settings, the
      same goal can be invoked with:</para>

      <screen>$ <command>mvn flexmojos:flexbuilder</command></screen>
    </section>
  </section>

  <section id="flex-dev-sect-creating-with-archetype">
    <title>Creating a Flex Mojos Project from an Archetype</title>

    <para>Flexmojos has a set of archetypes which can be used to quickly
    create a new Flex project. The following archetypes are all in the
    <package>org.sonatype.flexmojos</package> group with a version of
    <varname>${flexmojos.version}</varname>:</para>

    <variablelist>
      <varlistentry>
        <term>flexmojos-archetypes-library</term>

        <listitem>
          <para>Creates a simple Flex Library project which produces a
          SWC</para>
        </listitem>
      </varlistentry>

      <varlistentry>
        <term>flexmojos-archetypes-application</term>

        <listitem>
          <para>Creates a simple Flex Application with produces a SWF</para>
        </listitem>
      </varlistentry>

      <varlistentry>
        <term>flexmojos-archetypes-modular-webapp</term>

        <listitem>
          <para>Creates a Multimodule project which consists of a project that
          produces a SWC which is consumed by a project which produces a SWF
          that is ultimately presented in a project that generates a
          WAR</para>
        </listitem>
      </varlistentry>
    </variablelist>

    <section id="flex-dev-sect-library-archetype">
      <title>Creating a Flex Library</title>

      <para>To create a Flex Library Project, execute the following command at
      the command-line:</para>

      <screen>$ <command>mvn archetype:generate \
      -DarchetypeRepository=http://repository.sonatype.org/content/groups/public \
      -DarchetypeGroupId=org.sonatype.flexmojos \
      -DarchetypeArtifactId=flexmojos-archetypes-library \
      -DarchetypeVersion=${flexmojos.version}</command>
[INFO] Scanning for projects...
[INFO] Searching repository for plugin with prefix: 'archetype'.
[INFO] com.sonatype.maven.plugins: checking for updates from central
...
[INFO] [archetype:generate]
[INFO] Generating project in Interactive mode
[INFO] Archetype defined by properties
...
Define value for groupId: : <command>org.sonatype.test</command>
Define value for artifactId: : <command>sample-library</command>
Define value for version:  1.0-SNAPSHOT: : <command>1.0-SNAPSHOT</command>
Define value for package:  org.sonatype.test: : <command>org.sonatype.test</command> 
Confirm properties configuration:
groupId: org.sonatype.test
artifactId: sample-library
version: 1.0-SNAPSHOT
package: org.sonatype.test
 Y: : <command>Y</command>
[INFO] ----------------------------------------------------------------------------
[INFO] Using following parameters for creating OldArchetype: flexmojos-archetypes-library:${flexmojos.version}
[INFO] ----------------------------------------------------------------------------
[INFO] Parameter: groupId, Value: org.sonatype.test
[INFO] Parameter: packageName, Value: org.sonatype.test
[INFO] Parameter: basedir, Value: /Users/Tim
[INFO] Parameter: package, Value: org.sonatype.test
[INFO] Parameter: version, Value: 1.0-SNAPSHOT
[INFO] Parameter: artifactId, Value: sample-library
[INFO] ------------------------------------------------------------------------
[INFO] BUILD SUCCESSFUL
</screen>

      <para>If you look in the directory sample-library/ you will see that the
      project consists of the directory structure shown in <xref
      linkend="fig-flex-dev-library-archetype-fs" />.</para>

      <figure id="fig-flex-dev-library-archetype-fs">
        <title>Flexmojo Library Archetype File Structure</title>

        <mediaobject>
          <imageobject>
            <imagedata fileref="figs/web/flex-dev-arche-simple-lib-fs.png" />
          </imageobject>
        </mediaobject>
      </figure>

      <para>The product of the simple Flex library archetype only contains
      three files: a POM, one source, and a unit test. Let's examine each of
      these files. First, the Project Object Model (POM).</para>

      <example id="fig-flex-dev-simple-lib-pom">
        <title>Project Object Model for Flex Library Archetype</title>

        <programlisting>&lt;project xmlns="http://maven.apache.org/POM/4.0.0" 
         xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
         xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 
                             http://maven.apache.org/maven-v4_0_0.xsd"&gt;

  &lt;modelVersion&gt;4.0.0&lt;/modelVersion&gt;

  &lt;groupId&gt;org.sonatype.test&lt;/groupId&gt;
  &lt;artifactId&gt;sample-library&lt;/artifactId&gt;
  &lt;version&gt;1.0-SNAPSHOT&lt;/version&gt;
  &lt;packaging&gt;swc&lt;/packaging&gt;

  &lt;name&gt;test Flex&lt;/name&gt;

  &lt;build&gt;
    &lt;sourceDirectory&gt;src/main/flex&lt;/sourceDirectory&gt;
    &lt;testSourceDirectory&gt;src/test/flex&lt;/testSourceDirectory&gt;
    &lt;plugins&gt;
      &lt;plugin&gt;
        &lt;groupId&gt;org.sonatype.flexmojos&lt;/groupId&gt;
        &lt;artifactId&gt;flexmojos-maven-plugin&lt;/artifactId&gt;
        &lt;version&gt;${flexmojos.version}&lt;/version&gt;
        &lt;extensions&gt;true&lt;/extensions&gt;
      &lt;/plugin&gt;
    &lt;/plugins&gt;
  &lt;/build&gt;

  &lt;dependencies&gt;
    &lt;dependency&gt;
      &lt;groupId&gt;com.adobe.flex.framework&lt;/groupId&gt;
      &lt;artifactId&gt;flex-framework&lt;/artifactId&gt;
      &lt;version&gt;3.2.0.3958&lt;/version&gt;
      &lt;type&gt;pom&lt;/type&gt;
    &lt;/dependency&gt;

    &lt;!-- flexmojos Unit testing support --&gt;
    &lt;dependency&gt;
      &lt;groupId&gt;org.sonatype.flexmojos&lt;/groupId&gt;
      &lt;artifactId&gt;flexmojos-unittest-support&lt;/artifactId&gt;
      &lt;version&gt;${flexmojos.version}&lt;/version&gt;
      &lt;type&gt;swc&lt;/type&gt;
      &lt;scope&gt;test&lt;/scope&gt;
    &lt;/dependency&gt;
  &lt;/dependencies&gt;

&lt;/project&gt;</programlisting>
      </example>

      <para><xref linkend="fig-flex-dev-simple-lib-pom" /> is very simple, the
      key to this POM is the <varname>flexmojos-maven-plugin</varname>
      configuration which sets <varname>extensions</varname> to
      <varname>true</varname>. This configuration customizes the lifecycle for
      the <varname>swc</varname> packaging which is defined in the
      <varname>flexmojos-maven-plugin</varname>. The archetype then includes
      the <varname>flex-framework</varname> dependency and the
      <varname>flexmojos-unittest-support</varname> test-scoped dependency.
      The <varname>flex-framework</varname> dependency is a POM which contains
      references to the SWC libraries and resources required to compile Flex
      applications.</para>

      <para>In <xref linkend="fig-flex-dev-simple-lib-pom" />, the packaging
      is very critical. A POMs packaging type controls the lifecycle it uses
      to produce build output. The value <varname>swc</varname> in the
      packaging element is Maven's cue to look for the Flex-specific lifecycle
      customizations which are provided by the
      <varname>flexmojos-maven-plugin</varname>. The other important part of
      this POM is the build element which specifies the location of the Flex
      source code and the Flex unit tests. Next, let's take a quick look at
      <xref linkend="ex-flex-dev-lib-as" /> which contains the sample
      Actionscript which was created by this archetype.</para>

      <example id="ex-flex-dev-lib-as">
        <title>Flex Library Archetype's Sample App Class</title>

        <programlisting>package org.sonatype.test {
  public class App {
    public static function greeting(name:String):String {
      return "Hello, " + name;
    }
  }
}
</programlisting>
      </example>

      <para>While this code is underwhelming, it does provide you with a quick
      model and a quick pointer: "Place More Code Here". While it might seem
      silly to test code this simple, a sample test named
      <filename>TestApp.as</filename> is provides in the
      <filename>src/test/flex</filename> directory. This test is shown in
      <xref linkend="ex-flex-dev-test-app" />.</para>

      <example id="ex-flex-dev-test-app">
        <title>Unit Test for Library Archetype's App Class</title>

        <programlisting>package org.sonatype.test {

  import flexunit.framework.TestCase;

  public class TestApp extends TestCase {

    /**
     * Tests our greeting() method
     */
    public function testGreeting():void {
      var name:String = "Buck Rogers";
      var expectedGreeting:String = "Hello, Buck Rogers";

      var result:String = App.greeting(name);
      assertEquals("Greeting is incorrect", expectedGreeting, result);
    }
  }
}
</programlisting>
      </example>

      <para>To run this build, go to the sample-library project directory and
      run mvn install.</para>

      <screen>$ <command>mvn install</command> 
[INFO] Scanning for projects...
[INFO] ------------------------------------------------------------------------
[INFO] Building sample-library Flex
[INFO]    task-segment: [install]
[INFO] ------------------------------------------------------------------------
[INFO] [resources:resources]
[INFO] [flexmojos:compile-swc]
[INFO] flexmojos ${flexmojos.version} - GNU GPL License (NO WARRANTY) - See COPYRIGHT file
[WARNING] Nothing expecified to include.  Assuming source and resources folders.
[INFO] Flex compiler configurations:
-compiler.headless-server=false 
-compiler.keep-all-type-selectors=false 
-compiler.keep-generated-actionscript=false 
-compiler.library-path ~/.m2/repository/com/adobe/flex/framework/flex/3.2.0.3958...
-compiler.namespaces.namespace http://www.adobe.com/2006/mxml target/classes/configs/mxml-manifest.xml 
-compiler.optimize=true 
-compiler.source-path src/main/flex 
...
[INFO] [resources:testResources]
[WARNING] Using platform encoding (MacRoman actually) to copy filtered resources, i.e. build is platform dependent!
[INFO] skip non existing resourceDirectory src/test/resources
[INFO] [flexmojos:test-compile]
[INFO] flexmojos ${flexmojos.version} - GNU GPL License (NO WARRANTY) - See COPYRIGHT file
[INFO] Flex compiler configurations:
-compiler.include-libraries ~/.m2/repository/org/sonatype/flexmojos/flexmojos-unittest-support...
-compiler.keep-generated-actionscript=false 
-compiler.library-path ~/.m2/repository/com/adobe/flex/framework/flex/3.2.0.3958/flex-3.2.0.... 
-compiler.optimize=true 
-compiler.source-path src/main/flex target/test-classes src/test/flex 
-compiler.strict=true 
-target-player 9.0.0 
-use-network=true 
-verify-digests=true -load-config= 
[INFO] Already trust on target/test-classes/TestRunner.swf
[INFO] [flexmojos:test-run]
[INFO] flexmojos ${flexmojos.version} - GNU GPL License (NO WARRANTY) - See COPYRIGHT file
[INFO] flexunit setup args: null
[INFO] ------------------------------------------------------------------------
[INFO] Tests run: 1, Failures: 0, Errors: 0, Time Elpased: 0 sec
[INFO] [install:install]
</screen>

      <note>
        <para>To execute Flex unit tests you will need to configure your PATH
        environment variable to include the Flash Player. For more information
        about configuring FlexMojos for unit tests, see <xref
        linkend="flex-dev-sect-configuring-unit-tests" />.</para>
      </note>

      <para>When you ran <command>mvn install</command> on this project, you
      should notice in the output that Maven and Flexmojos plugin is take care
      of managing all of the libraries and the dependencies for the Flex
      compiler. Much like Maven excels at helping Java developers manage the
      contents of a Java classpath, Maven can help Flex developers manage the
      complex of compile paths. You also might have been shocked when the
      Flexmojos project started a web browser or the Flash Player and used it
      to execute the TestApp.as class against the project's source
      code.</para>
    </section>

    <section id="flex-dev-sect-application-archetype">
      <title>Creating a Flex Application</title>

      <para>To create a Flex application from a Maven archetype, execute the
      following command:</para>

      <screen>$ <command>mvn archetype:generate \
      -DarchetypeRepository=http://repository.sonatype.com/content/groups/public \
      -DarchetypeGroupId=org.sonatype.flexmojos \
      -DarchetypeArtifactId=flexmojos-archetypes-application \
      -DarchetypeVersion=${flexmojos.version}</command>
[INFO] Scanning for projects...
[INFO] Searching repository for plugin with prefix: 'archetype'.
[INFO] com.sonatype.maven.plugins: checking for updates from central
...
[INFO] [archetype:generate]
[INFO] Generating project in Interactive mode
[INFO] Archetype defined by properties
...
Define value for groupId: : <command>org.sonatype.test</command>
Define value for artifactId: : <command>sample-application</command>
Define value for version:  1.0-SNAPSHOT: : <command>1.0-SNAPSHOT</command>
Define value for package:  org.sonatype.test: : <command>org.sonatype.test</command> 
Confirm properties configuration:
groupId: org.sonatype.test
artifactId: sample-library
version: 1.0-SNAPSHOT
package: org.sonatype.test
 Y: : <command>Y</command>
[INFO] ----------------------------------------------------------------------------
[INFO] Using following parameters for creating OldArchetype: flexmojos-archetypes-application:${flexmojos.version}
[INFO] ----------------------------------------------------------------------------
[INFO] Parameter: groupId, Value: org.sonatype.test
[INFO] Parameter: packageName, Value: org.sonatype.test
[INFO] Parameter: basedir, Value: /Users/Tim/flex-sample
[INFO] Parameter: package, Value: org.sonatype.test
[INFO] Parameter: version, Value: 1.0-SNAPSHOT
[INFO] Parameter: artifactId, Value: sample-application
[INFO] BUILD SUCCESSFUL

</screen>

      <para>If you look in the directory sample-application/ you will see the
      filesystem shown in <xref linkend="fig-flex-dev-dir-app-fs" />.</para>

      <figure id="fig-flex-dev-dir-app-fs">
        <title>Directory Structure for Flex Application Archetype</title>

        <mediaobject>
          <imageobject>
            <imagedata fileref="figs/web/flex-dev-arche-simple-app-fs.png" />
          </imageobject>
        </mediaobject>
      </figure>

      <para>Building an application from the Application archetype produces
      the following POM.</para>

      <example id="ex-flex-dev-app-pom">
        <title>POM for Flex Application Archetype</title>

        <programlisting>&lt;project xmlns="http://maven.apache.org/POM/4.0.0" 
         xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" 
         xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 
                             http://maven.apache.org/maven-v4_0_0.xsd"&gt;

  &lt;modelVersion&gt;4.0.0&lt;/modelVersion&gt;

  &lt;groupId&gt;org.sonatype.test&lt;/groupId&gt;
  &lt;artifactId&gt;sample-application&lt;/artifactId&gt;
  &lt;version&gt;1.0-SNAPSHOT&lt;/version&gt;
  &lt;packaging&gt;swf&lt;/packaging&gt;

  &lt;name&gt;sample-application Flex&lt;/name&gt;

  &lt;build&gt;
    &lt;sourceDirectory&gt;src/main/flex&lt;/sourceDirectory&gt;
    &lt;testSourceDirectory&gt;src/test/flex&lt;/testSourceDirectory&gt;
    &lt;plugins&gt;
      &lt;plugin&gt;
        &lt;groupId&gt;org.sonatype.flexmojos&lt;/groupId&gt;
        &lt;artifactId&gt;flexmojos-maven-plugin&lt;/artifactId&gt;
        &lt;version&gt;${flexmojos.version}&lt;/version&gt;
        &lt;extensions&gt;true&lt;/extensions&gt;
      &lt;/plugin&gt;
    &lt;/plugins&gt;
  &lt;/build&gt;

  &lt;dependencies&gt;
    &lt;dependency&gt;
      &lt;groupId&gt;com.adobe.flex.framework&lt;/groupId&gt;
      &lt;artifactId&gt;flex-framework&lt;/artifactId&gt;
      &lt;version&gt;3.2.0.3958&lt;/version&gt;
      &lt;type&gt;pom&lt;/type&gt;
    &lt;/dependency&gt;

    &lt;!-- flexmojos Unit testing support --&gt;
    &lt;dependency&gt;
      &lt;groupId&gt;org.sonatype.flexmojos&lt;/groupId&gt;
      &lt;artifactId&gt;flexmojos-unittest-support&lt;/artifactId&gt;
      &lt;version&gt;${flexmojos.version}&lt;/version&gt;
      &lt;type&gt;swc&lt;/type&gt;
      &lt;scope&gt;test&lt;/scope&gt;
    &lt;/dependency&gt;
  &lt;/dependencies&gt;

&lt;/project&gt;
</programlisting>
      </example>

      <para>The difference between <xref linkend="ex-flex-dev-app-pom" /> and
      <xref linkend="fig-flex-dev-simple-lib-pom" /> is that the
      <varname>packaging</varname> element is <varname>swf</varname> instead
      of <varname>swc</varname>. By setting the packaging to
      <varname>swf</varname>, the project will produce a Flex application in
      <filename>target/sample-application-1.0-SNAPSHOT.swf</filename>. The
      sample application created by this archetype displays the Text "Hello
      World". <filename>Main.mxml</filename> can be found in
      <filename>src/main/flex</filename>.</para>

      <example>
        <title>Sample Application Main.mxml</title>

        <programlisting>&lt;mx:Application xmlns:mx="http://www.adobe.com/2006/mxml" layout="absolute"&gt;
        &lt;mx:Text text="Hello World!"/&gt;
&lt;/mx:Application&gt;
</programlisting>
      </example>

      <para>This application also creates a simple FlexUnit test that does
      nothing more than print out a trace message. The sample unit test is in
      <filename>src/test/flex/org/sonatype/test</filename>.</para>

      <example>
        <title>Unit Test for Main.mxml</title>

        <programlisting>package org.sonatype.test 
{

        import flexunit.framework.TestCase;
        import Main;

        public class TestApp extends TestCase 
        {

                public function testNothing():void 
                {
                        //TODO un implemented
                        trace("Hello test"); 
                }
        }
}
</programlisting>
      </example>
    </section>

    <section id="flex-dev-sect-multimodule-archetype">
      <title>Creating a Multi-module Project: Web Application with a Flex
      Dependency</title>

      <para>To create a multi-module project consisting of a Flex Library
      project referenced by a Flex Application, referenced by a Web
      Application.</para>

      <screen>$ <command>mvn archetype:generate \
      -DarchetypeRepository=http://repository.sonatype.org/content/groups/public \
      -DarchetypeGroupId=org.sonatype.flexmojos \
      -DarchetypeArtifactId=flexmojos-archetypes-modular-webapp \
      -DarchetypeVersion=${flexmojos.version}</command>
[INFO] Scanning for projects...
[INFO] Searching repository for plugin with prefix: 'archetype'.
[INFO] com.sonatype.maven.plugins: checking for updates from central
...
[INFO] [archetype:generate]
[INFO] Generating project in Interactive mode
[INFO] Archetype defined by properties
...
Define value for groupId: : <command>org.sonatype.test</command>
Define value for artifactId: : <command>sample-multimodule</command>
Define value for version:  1.0-SNAPSHOT: : <command>1.0-SNAPSHOT</command>
Define value for package:  org.sonatype.test: : <command>org.sonatype.test</command> 
Confirm properties configuration:
groupId: org.sonatype.test
artifactId: sample-library
version: 1.0-SNAPSHOT
package: org.sonatype.test
 Y: : <command>Y</command>
[INFO] ----------------------------------------------------------------------------
[INFO] Using following parameters for creating OldArchetype: flexmojos-archetypes-modular-webapp:${flexmojos.version}
[INFO] ----------------------------------------------------------------------------
[INFO] Parameter: groupId, Value: org.sonatype.test
[INFO] Parameter: packageName, Value: org.sonatype.test
[INFO] Parameter: basedir, Value: /Users/Tim
[INFO] Parameter: package, Value: org.sonatype.test
[INFO] Parameter: version, Value: 1.0-SNAPSHOT
[INFO] Parameter: artifactId, Value: sample-multimodule
[INFO] ------------------------------------------------------------------------
[INFO] BUILD SUCCESSFUL
</screen>

      <para>If you look in the <filename>sample-multimodule/</filename>
      directory, you will see a directory structure which contains three
      projects swc, swf, and war.</para>

      <figure>
        <title>Directory Structure for Flex Multimodule Archetype</title>

        <mediaobject>
          <imageobject>
            <imagedata fileref="figs/web/flex-dev-arche-multimodule-fs.png" />
          </imageobject>
        </mediaobject>
      </figure>

      <para>The simple top-level POM in this multimodule project is shown in .
      It consists of module references to the swc, swf, and war
      modules.</para>

      <example>
        <title>Top-level POM Created by Modular Web Application
        Archetype</title>

        <programlisting>&lt;project xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
 xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/maven-v4_0_0.xsd"&gt;
  &lt;modelVersion&gt;4.0.0&lt;/modelVersion&gt;
  &lt;groupId&gt;org.sonatype.test&lt;/groupId&gt;
  &lt;artifactId&gt;sample-multimodule&lt;/artifactId&gt;
  &lt;version&gt;1.0-SNAPSHOT&lt;/version&gt;
  &lt;packaging&gt;pom&lt;/packaging&gt;
  
  &lt;modules&gt;
    &lt;module&gt;swc&lt;/module&gt;
    &lt;module&gt;swf&lt;/module&gt;
    &lt;module&gt;war&lt;/module&gt;
  &lt;/modules&gt;
&lt;/project&gt;
</programlisting>
      </example>

      <para>The swc project has a simple POM that resembles the POM shown in
      <xref linkend="fig-flex-dev-simple-lib-pom" />. Note that the
      <varname>artifactId</varname> in this POM differs from the name of the
      module directory and is <varname>swc-swc</varname>.</para>

      <example>
        <title>swc Module POM</title>

        <programlisting>&lt;project&gt;

  &lt;modelVersion&gt;4.0.0&lt;/modelVersion&gt;

  &lt;parent&gt;
    &lt;groupId&gt;org.sonatype.test&lt;/groupId&gt;
    &lt;artifactId&gt;sample-multimodule&lt;/artifactId&gt;
    &lt;version&gt;1.0-SNAPSHOT&lt;/version&gt;
  &lt;/parent&gt;

  &lt;groupId&gt;org.sonatype.test&lt;/groupId&gt;
  &lt;artifactId&gt;swc-swc&lt;/artifactId&gt;
  &lt;version&gt;1.0-SNAPSHOT&lt;/version&gt;
  &lt;packaging&gt;swc&lt;/packaging&gt;
  &lt;name&gt;swc Library&lt;/name&gt;
  &lt;build&gt;
    &lt;sourceDirectory&gt;src/main/flex&lt;/sourceDirectory&gt;
    &lt;testSourceDirectory&gt;src/test/flex&lt;/testSourceDirectory&gt;
    &lt;plugins&gt;
      &lt;plugin&gt;
        &lt;groupId&gt;org.sonatype.flexmojos&lt;/groupId&gt;
        &lt;artifactId&gt;flexmojos-maven-plugin&lt;/artifactId&gt;
        &lt;version&gt;${flexmojos.version}&lt;/version&gt;
        &lt;extensions&gt;true&lt;/extensions&gt;
        &lt;configuration&gt;
          &lt;locales&gt;
            &lt;locale&gt;en_US&lt;/locale&gt;
          &lt;/locales&gt;
        &lt;/configuration&gt;
      &lt;/plugin&gt;
    &lt;/plugins&gt;
  &lt;/build&gt;

  &lt;dependencies&gt;
    &lt;dependency&gt;
      &lt;groupId&gt;com.adobe.flex.framework&lt;/groupId&gt;
      &lt;artifactId&gt;flex-framework&lt;/artifactId&gt;
      &lt;version&gt;3.2.0.3958&lt;/version&gt;
      &lt;type&gt;pom&lt;/type&gt;
    &lt;/dependency&gt;

    &lt;!-- flexmojos Unit testing support --&gt;
    &lt;dependency&gt;
      &lt;groupId&gt;org.sonatype.flexmojos&lt;/groupId&gt;
      &lt;artifactId&gt;flexmojos-unittest-support&lt;/artifactId&gt;
      &lt;version&gt;${flexmojos.version}&lt;/version&gt;
      &lt;type&gt;swc&lt;/type&gt;
      &lt;scope&gt;test&lt;/scope&gt;
    &lt;/dependency&gt;
  &lt;/dependencies&gt;

&lt;/project&gt;
</programlisting>
      </example>

      <para>The swf module's POM resembles the POM in <xref
      linkend="ex-flex-dev-app-pom" /> adding a dependency on the
      <varname>swc-swc</varname> artifact. Note that the following POM defines
      an <varname>artifactId</varname> that differs from the directory that
      stores the module; the artifactId in the following POM is
      <varname>swf-swf</varname>.</para>

      <example>
        <title>swf module POM</title>

        <programlisting id="ex-flex-swf-module-pom">&lt;project&gt;

  &lt;modelVersion&gt;4.0.0&lt;/modelVersion&gt;

  &lt;parent&gt;
    &lt;groupId&gt;org.sonatype.test&lt;/groupId&gt;
    &lt;artifactId&gt;sample-multimodule&lt;/artifactId&gt;
    &lt;version&gt;1.0-SNAPSHOT&lt;/version&gt;
  &lt;/parent&gt;

  &lt;groupId&gt;org.sonatype.test&lt;/groupId&gt;

  &lt;artifactId&gt;swf-swf&lt;/artifactId&gt;
  &lt;version&gt;1.0-SNAPSHOT&lt;/version&gt;
  &lt;packaging&gt;swf&lt;/packaging&gt;
  &lt;name&gt;swf Application&lt;/name&gt;

  &lt;build&gt;
    &lt;sourceDirectory&gt;src/main/flex&lt;/sourceDirectory&gt;
    &lt;testSourceDirectory&gt;src/test/flex&lt;/testSourceDirectory&gt;
    &lt;plugins&gt;
      &lt;plugin&gt;
        &lt;groupId&gt;org.sonatype.flexmojos&lt;/groupId&gt;
        &lt;artifactId&gt;flexmojos-maven-plugin&lt;/artifactId&gt;
        &lt;version&gt;${flexmojos.version}&lt;/version&gt;
        &lt;extensions&gt;true&lt;/extensions&gt;
        &lt;configuration&gt;
          &lt;locales&gt;
            &lt;locale&gt;en_US&lt;/locale&gt;
          &lt;/locales&gt;
        &lt;/configuration&gt;
      &lt;/plugin&gt;
    &lt;/plugins&gt;
  &lt;/build&gt;

  &lt;dependencies&gt;
    &lt;dependency&gt;
      &lt;groupId&gt;com.adobe.flex.framework&lt;/groupId&gt;
      &lt;artifactId&gt;flex-framework&lt;/artifactId&gt;
      &lt;version&gt;3.2.0.3958&lt;/version&gt;
      &lt;type&gt;pom&lt;/type&gt;
    &lt;/dependency&gt;

    &lt;!-- flexmojos Unit testing support --&gt;
    &lt;dependency&gt;
      &lt;groupId&gt;org.sonatype.flexmojos&lt;/groupId&gt;
      &lt;artifactId&gt;flexmojos-unittest-support&lt;/artifactId&gt;
      &lt;version&gt;${flexmojos.version}&lt;/version&gt;
      &lt;type&gt;swc&lt;/type&gt;
      &lt;scope&gt;test&lt;/scope&gt;
    &lt;/dependency&gt;

    &lt;dependency&gt;
      &lt;groupId&gt;org.sonatype.test&lt;/groupId&gt;
      &lt;artifactId&gt;swf-swc&lt;/artifactId&gt;
      &lt;version&gt;1.0-SNAPSHOT&lt;/version&gt;
      &lt;type&gt;swc&lt;/type&gt;
    &lt;/dependency&gt;
  &lt;/dependencies&gt;
&lt;/project&gt;
</programlisting>
      </example>

      <warning>
        <para>In <xref linkend="ex-flex-swf-module-pom" />, the dependency on
        "swf-swc" needs to be changed to "swc-swc". This is a bug in the
        modular webapp archetype that is present in the FlexMojos
        ${flexmojos.version} release. It will be fixed in the FlexMojos 3.2.0
        release.</para>
      </warning>

      <para>When you declare a dependency on a SWC, you'll need to specify the
      type of the dependency so that Maven can locate the appropriate artifact
      in the remote or local repository. In this case, the
      <varname>swf-swf</varname> project depends upon the SWC that is
      generated by the <varname>swc-swc</varname> project. When you add the
      dependency to the <varname>swf-swf</varname> project, the FlexMojos
      plugin will add the appropriate SWC file to the Flex Compiler's library
      path.</para>

      <para>Next, take a look at the simple POM in the war module.</para>

      <example id="ex-flex-war-module-pom">
        <title>war module POM</title>

        <programlisting>&lt;project&gt;
  &lt;modelVersion&gt;4.0.0&lt;/modelVersion&gt;
  &lt;parent&gt;
    &lt;artifactId&gt;sample-multimodule&lt;/artifactId&gt;
    &lt;groupId&gt;org.sonatype.test&lt;/groupId&gt;
    &lt;version&gt;1.0-SNAPSHOT&lt;/version&gt;
  &lt;/parent&gt;
  &lt;groupId&gt;org.sonatype.test&lt;/groupId&gt;
  &lt;artifactId&gt;war-war&lt;/artifactId&gt;
  &lt;version&gt;1.0-SNAPSHOT&lt;/version&gt;
  &lt;packaging&gt;war&lt;/packaging&gt;
  &lt;build&gt;
    &lt;plugins&gt;
      &lt;plugin&gt;
        &lt;groupId&gt;org.sonatype.flexmojos&lt;/groupId&gt;
        &lt;artifactId&gt;flexmojos-maven-plugin&lt;/artifactId&gt;
        &lt;version&gt;${flexmojos.version}&lt;/version&gt;
        &lt;executions&gt;
          &lt;execution&gt;
            &lt;goals&gt;
              &lt;goal&gt;copy-flex-resources&lt;/goal&gt;
            &lt;/goals&gt;
          &lt;/execution&gt;
        &lt;/executions&gt;
      &lt;/plugin&gt;
      &lt;plugin&gt;
        &lt;groupId&gt;org.mortbay.jetty&lt;/groupId&gt;
        &lt;artifactId&gt;maven-jetty-plugin&lt;/artifactId&gt;
      &lt;/plugin&gt;
    &lt;/plugins&gt;
  &lt;/build&gt;
  &lt;dependencies&gt;
    &lt;dependency&gt;
      &lt;groupId&gt;org.sonatype.test&lt;/groupId&gt;
      &lt;artifactId&gt;war-swf&lt;/artifactId&gt;
      &lt;version&gt;1.0-SNAPSHOT&lt;/version&gt;
      &lt;type&gt;swf&lt;/type&gt;
    &lt;/dependency&gt;
  &lt;/dependencies&gt;
&lt;/project&gt;
</programlisting>
      </example>

      <warning>
        <para>In <xref linkend="ex-flex-war-module-pom" />, the dependency on
        "war-swf" needs to be changed to "swf-swf". This is a bug in the
        modular webapp archetype that is present in the FlexMojos
        ${flexmojos.version} release. It will be fixed in the FlexMojos 3.2.0
        release.</para>
      </warning>

      <para>The POM shown in <xref linkend="ex-flex-war-module-pom" />
      configures the FlexMojos plugin to execute the
      <varname>copy-flex-resources</varname> goal for this project. The
      <varname>copy-flex-resources</varname> goal will copy SWF application
      into the web application's document root. In this project, running a
      build and creating a WAR will copy the
      <filename>swf-swf-1.0-SNAPSHOT.swf</filename> file to the web
      application's root directory in
      <filename>target/war-war-1.0-SNAPSHOT</filename>.</para>

      <para>To build the multimodule web application project, run <command>mvn
      install</command> from the top-level directory. This should build the
      <varname>swc-swc</varname>, <varname>swf-swf</varname>, and
      <varname>war-war</varname> artifacts and product a WAR file in
      war<filename>/target/war-war-1.0-SNAPSHOT.war</filename> which contains
      the <filename>swf-swf-1.0-SNAPSHOT.swf</filename> in the document root
      of the web application.</para>

      <note>
        <para>To execute Flex unit tests you will need to configure your PATH
        environment variable to include the Flash Player. For more information
        about configuring FlexMojos for unit tests, see <xref
        linkend="flex-dev-sect-configuring-unit-tests" />.</para>
      </note>
    </section>
  </section>

  <section id="flex-dev-sect-custom-lifecycle">
    <title>The FlexMojos Lifecycle</title>

    <para>The FlexMojos Maven plugin customizes the lifecycle based on the
    packaging. If your project has a <varname>packaging</varname> of type
    <varname>swc</varname> or <varname>swf,</varname> the FlexMojos plugin
    with execute a customized lifecycle if your plugin configuration sets the
    extensions to true. <xref linkend="ex-flex-dev-extensions-true" /> shows
    the plugin configuration for the flexmojos-maven-plugin with the
    <varname>extensions</varname> set to <varname>true</varname>.</para>

    <example id="ex-flex-dev-extensions-true">
      <title>Setting Plugin Extensions to True for Custom Flex
      Lifecycle</title>

      <programlisting>  &lt;build&gt;
    &lt;sourceDirectory&gt;src/main/flex&lt;/sourceDirectory&gt;
    &lt;testSourceDirectory&gt;src/test/flex&lt;/testSourceDirectory&gt;
    &lt;plugins&gt;
      &lt;plugin&gt;
        &lt;groupId&gt;org.sonatype.flexmojos&lt;/groupId&gt;
        &lt;artifactId&gt;flexmojos-maven-plugin&lt;/artifactId&gt;
        &lt;version&gt;${flexmojos.version}&lt;/version&gt;
        <emphasis>&lt;extensions&gt;true&lt;/extensions&gt;</emphasis>
        &lt;configuration&gt;
          &lt;locales&gt;
            &lt;locale&gt;en_US&lt;/locale&gt;
          &lt;/locales&gt;
        &lt;/configuration&gt;
      &lt;/plugin&gt;
    &lt;/plugins&gt;
  &lt;/build&gt;</programlisting>
    </example>

    <section id="flex-dev-sect-lifecycle-swc">
      <title>The SWC Lifecycle</title>

      <para>When the packaging is swc, FlexMojos will execute the lifecycle
      shown in <xref linkend="fig-flex-dev-swc-lifecycle" />. The highlighted
      goals are goals from the FlexMojos plugin, the goals which are not
      highlights are standard goals from the Core Maven plugins.</para>

      <figure id="fig-flex-dev-swc-lifecycle">
        <title>The FlexMojos SWC Lifecycle</title>

        <mediaobject>
          <imageobject>
            <imagedata fileref="figs/web/flex-dev_swc-lifecycle.png" />
          </imageobject>
        </mediaobject>
      </figure>

      <para>The FlexMojos contributed goals are:</para>

      <variablelist>
        <varlistentry>
          <term>flexmojos:compile-swc</term>

          <listitem>
            <para>This goal compiles all of the Actionscript and MXML files in
            the <varname>sourceDirectory</varname> into a SWC. A SWC is an
            Adobe library or class file which contains components and
            resources used in Flex applications.</para>
          </listitem>
        </varlistentry>

        <varlistentry>
          <term>flexmojos:test-compile</term>

          <listitem>
            <para>This goal compiles all of the Actionscript and MXML files in
            the <varname>testSourceDirectory</varname>.</para>
          </listitem>
        </varlistentry>

        <varlistentry>
          <term>flexmojos:test-run</term>

          <listitem>
            <para>This goal executes unit tests using the Flash Player. This
            goal can only run if the Flash Player has been configured as
            described in <xref
            linkend="flex-dev-sect-configuring-unit-tests" />.</para>
          </listitem>
        </varlistentry>
      </variablelist>
    </section>

    <section id="flex-dev-sect-lifecycle-swf">
      <title>The SWF Lifecycle</title>

      <para>When the packaging is swf, FlexMojos will execute the lifecycle
      shown in <xref linkend="fig-flex-dev-swf-lifecycle" />. The highlighted
      goals are goals from the FlexMojos plugin, the goals which are not
      highlights are standard goals from the Core Maven plugins.</para>

      <figure id="fig-flex-dev-swf-lifecycle">
        <title>The FlexMojos SWF Lifecycle</title>

        <mediaobject>
          <imageobject>
            <imagedata fileref="figs/web/flex-dev_swf-lifecycle.png" />
          </imageobject>
        </mediaobject>
      </figure>

      <para>The FlexMojos contributed goals are:</para>

      <variablelist>
        <varlistentry>
          <term>flexmojos:compile-swf</term>

          <listitem>
            <para>This goal compiles all of the Actionscript and MXML files in
            the <varname>sourceDirectory</varname> into a SWF. A SWF is a file
            which contains an application that can be render by the Adobe
            Flash Player or Adobe AIR software.</para>
          </listitem>
        </varlistentry>

        <varlistentry>
          <term>flexmojos:test-compile</term>

          <listitem>
            <para>This goal compiles all of the Actionscript and MXML files in
            the <varname>testSourceDirectory</varname>.</para>
          </listitem>
        </varlistentry>

        <varlistentry>
          <term>flexmojos:test-run</term>

          <listitem>
            <para>This goal executes unit tests using the Flash Player. This
            goal can only run if the Flash Player has been configured as
            described in <xref
            linkend="flex-dev-sect-configuring-unit-tests" />.</para>
          </listitem>
        </varlistentry>
      </variablelist>
    </section>
  </section>

  <section id="flex-dev-sect-goals">
    <title>FlexMojos Plugin Goals</title>

    <para>The FlexMojos Maven Plugin contains the following goals:</para>

    <variablelist>
      <varlistentry>
        <term>flexmojos:asdoc</term>

        <listitem>
          <para>Generates documentation for Actionscript source files</para>
        </listitem>
      </varlistentry>

      <varlistentry>
        <term>flexmojos:asdoc-report</term>

        <listitem>
          <para>Generates documentation for Actionscript sources as a report
          that can be included in a Maven site</para>
        </listitem>
      </varlistentry>

      <varlistentry>
        <term>flexmojos:compile-swc</term>

        <listitem>
          <para>Compiles Flex source (Actionscript and MXML) into a SWC
          library for use in a Flex or AIR application</para>
        </listitem>
      </varlistentry>

      <varlistentry>
        <term>flexmojos:compile-swf</term>

        <listitem>
          <para>Compiles Flex source (Actionscript and MXML) into a SWF for
          use in the Adob Flash Player or Adobe AIR Runtime</para>
        </listitem>
      </varlistentry>

      <varlistentry>
        <term>flexmojos:copy-flex-resources</term>

        <listitem>
          <para>Copies Flex resources into a web application project</para>
        </listitem>
      </varlistentry>

      <varlistentry>
        <term>flexmojos:flexbuilder</term>

        <listitem>
          <para>Generates project files for use in Adobe Flex Builder</para>
        </listitem>
      </varlistentry>

      <varlistentry>
        <term>flexmojos:generate</term>

        <listitem>
          <para>Generates Actionscript 3 based on Java classes using Granite
          GAS3</para>
        </listitem>
      </varlistentry>

      <varlistentry>
        <term>flexmojos:optimize</term>

        <listitem>
          <para>Goal which run post-link SWF optimization on swc files. This
          goal is used to produce RSL files.</para>
        </listitem>
      </varlistentry>

      <varlistentry>
        <term>flexmojos:sources</term>

        <listitem>
          <para>Create a JAR which contains all the sources for a Flex
          project</para>
        </listitem>
      </varlistentry>

      <varlistentry>
        <term>flexmojos:test-compile</term>

        <listitem>
          <para>Compile all test classes in a Flex project</para>
        </listitem>
      </varlistentry>

      <varlistentry>
        <term>flexmojos:test-run</term>

        <listitem>
          <para>Run the tests using the Adobe Flash Player</para>
        </listitem>
      </varlistentry>

      <varlistentry>
        <term>flexmojos:test-swc</term>

        <listitem>
          <para>Build a SWC containing the test classes for a specific
          project</para>
        </listitem>
      </varlistentry>

      <varlistentry>
        <term>flexmojos:wrapper</term>

        <listitem>
          <para>Generate an HTML wrapper for a SWF application</para>
        </listitem>
      </varlistentry>
    </variablelist>

    <section id="flex-dev-sect-gen-asdoc">
      <title>Generating Actionscript Documentation</title>

      <para>You can run the asdoc or asdoc-report goals to generate
      documentation for Actionscript. Once the goals has completed, the
      documentation will be saved to
      <filename>${basedir}/target/asdoc</filename> as HTML. <xref
      linkend="fig-flex-dev-actionscript" /> shows the result of running the
      <varname>asdoc</varname> goal against the Flexmojos application
      archetype project.</para>

      <figure id="fig-flex-dev-actionscript">
        <title>Actionscript Documentation Generated by the FlexMojos
        Plugin</title>

        <mediaobject>
          <imageobject>
            <imagedata fileref="figs/web/flex-dev_asdoc-browser.png" />
          </imageobject>
        </mediaobject>
      </figure>

      <section id="flex-dev-sect-config-asdoc">
        <title>Configuring the asdoc Goal</title>

        <para>The following configuration parameters allow you to customize
        the documentation generated by the <varname>asdoc</varname>
        goal.</para>

        <para><table>
            <title>Configuration Parameters for the asdoc goal.</title>

            <tgroup cols="4">
              <colspec colname="name" colnum="1" colsep="0" colwidth="3.75in"
                       rowsep="0" />

              <colspec colname="type" colnum="2" colsep="0" colwidth="1.25in"
                       rowsep="0" />

              <colspec colname="required" colnum="3" colsep="0"
                       colwidth="1.25in" rowsep="0" />

              <colspec colname="default" colnum="4" colsep="0"
                       colwidth="1.25in" rowsep="0" />

              <spanspec charoff="1in" nameend="default" namest="name"
                        rowsep="1" spanname="description" />

              <thead>
                <colspec colname="name" colnum="1" colsep="1"
                         colwidth="3.75in" rowsep="1" />

                <colspec colname="type" colnum="2" colwidth="1.25in"
                         rowsep="1" />

                <colspec colname="required" colnum="3" colsep="1"
                         colwidth="1.25in" rowsep="1" />

                <colspec colname="default" colnum="4" colsep="1"
                         colwidth="1.25in" rowsep="1" />

                <row>
                  <entry>Name</entry>

                  <entry>Type</entry>

                  <entry>Required</entry>

                  <entry>Default</entry>
                </row>
              </thead>

              <tbody>
                <row>
                  <entry><emphasis><varname>compatibilityVersion</varname></emphasis></entry>

                  <entry><varname>String</varname></entry>

                  <entry>N</entry>

                  <entry></entry>
                </row>

                <row>
                  <entry spanname="description"><para>specifies a
                  compatibility version. e.g. compatibility
                  2.0.1</para></entry>
                </row>

                <row>
                  <entry><varname>configFile</varname></entry>

                  <entry><varname>File</varname></entry>

                  <entry>N</entry>

                  <entry></entry>
                </row>

                <row>
                  <entry spanname="description"><para>Load a file containing
                  configuration options</para></entry>
                </row>

                <row>
                  <entry><varname>docClasses</varname></entry>

                  <entry><varname>String[]</varname></entry>

                  <entry>N</entry>

                  <entry></entry>
                </row>

                <row>
                  <entry spanname="description"><para>A list of classes to
                  document. These classes must be in the source path. This is
                  the default option. This option works the same way as does
                  the -include-classes option for the compc component
                  compiler. For more information, see Using compc, the
                  component compiler.</para></entry>
                </row>

                <row>
                  <entry><varname>docNamespaces</varname></entry>

                  <entry><varname>Namespace[]</varname></entry>

                  <entry>N</entry>

                  <entry></entry>
                </row>

                <row>
                  <entry spanname="description"><para>A list of URIs whose
                  classes should be documented. The classes must be in the
                  source path. You must include a URI and the location of the
                  manifest file that defines the contents of this namespace.
                  This option works the same way as does the
                  -include-namespaces option for the compc component compiler.
                  For more information, see Using compc, the component
                  compiler.</para></entry>
                </row>

                <row>
                  <entry><varname>docSources</varname></entry>

                  <entry><varname>File[]</varname></entry>

                  <entry>N</entry>

                  <entry></entry>
                </row>

                <row>
                  <entry spanname="description"><para>A list of files that
                  should be documented. If a directory name is in the list, it
                  is recursively searched. This option works the same way as
                  does the -include-sources option for the compc component
                  compiler. For more information, see Using compc, the
                  component compiler.</para></entry>
                </row>

                <row>
                  <entry><varname>excludeClasses</varname></entry>

                  <entry><varname>String[]</varname></entry>

                  <entry>N</entry>

                  <entry><varname></varname></entry>
                </row>

                <row>
                  <entry spanname="description"><para>A list of classes that
                  should not be documented. You must specify individual class
                  names. Alternatively, if the ASDoc comment for the class
                  contains the</para></entry>
                </row>

                <row>
                  <entry><varname>excludeDependencies</varname></entry>

                  <entry><varname>boolean</varname></entry>

                  <entry>N</entry>

                  <entry>false</entry>
                </row>

                <row>
                  <entry spanname="description"><para>Whether all dependencies
                  found by the compiler are documented. If
                  <varname>true</varname>, the dependencies of the input
                  classes are not documented. The default value is
                  false.</para></entry>
                </row>

                <row>
                  <entry><varname>footer</varname></entry>

                  <entry><varname>String</varname></entry>

                  <entry>N</entry>

                  <entry></entry>
                </row>

                <row>
                  <entry spanname="description"><para>The text that appears at
                  the bottom of the HTML pages in the output
                  documentation.</para></entry>
                </row>

                <row>
                  <entry><varname>headlessServer</varname></entry>

                  <entry><varname>boolean</varname></entry>

                  <entry>N</entry>

                  <entry>false</entry>
                </row>

                <row>
                  <entry spanname="description"><para>Sets the compiler when
                  it runs on a server without a display. This is equivalent to
                  using the compiler.headless-server option of the mxmlc or
                  compc compilers. that value determines if the compiler is
                  running on a server without a display.</para></entry>
                </row>

                <row>
                  <entry><varname>leftFramesetWidth</varname></entry>

                  <entry><varname>int</varname></entry>

                  <entry>N</entry>

                  <entry>210</entry>
                </row>

                <row>
                  <entry spanname="description"><para>An integer that changes
                  the width of the left frameset of the documentation. You can
                  change this size to accommodate the length of your package
                  names. The default value is 210 pixels.</para></entry>
                </row>

                <row>
                  <entry><varname>localRepository</varname></entry>

                  <entry><varname>ArtifactRepository</varname></entry>

                  <entry>N</entry>

                  <entry></entry>
                </row>

                <row>
                  <entry spanname="description"><para></para></entry>
                </row>

                <row>
                  <entry><varname>mainTitle</varname></entry>

                  <entry><varname>String</varname></entry>

                  <entry>N</entry>

                  <entry>API Documentation</entry>
                </row>

                <row>
                  <entry spanname="description"><para>The text that appears at
                  the top of the HTML pages in the output documentation. The
                  default value is "API Documentation".</para></entry>
                </row>

                <row>
                  <entry><varname>namespaces</varname></entry>

                  <entry><varname>Namespace[]</varname></entry>

                  <entry>N</entry>

                  <entry></entry>
                </row>

                <row>
                  <entry spanname="description"><para>Specify a URI to
                  associate with a manifest of components for use as MXML
                  elements. </para><para>Usage: </para><programlisting>&lt;namespaces&gt;
  &lt;namespace&gt;
    &lt;uri&gt;http://www.adobe.com/2006/mxml&lt;/uri&gt;
    &lt;manifest&gt;${basedir}/manifest.xml&lt;/manifest&gt;
  &lt;/namespace&gt;
&lt;/namespaces&gt;</programlisting></entry>
                </row>

                <row>
                  <entry><varname>output</varname></entry>

                  <entry><varname>File</varname></entry>

                  <entry>N</entry>

                  <entry>asdoc-output</entry>
                </row>

                <row>
                  <entry spanname="description"><para>The output directory for
                  the generated documentation.</para></entry>
                </row>

                <row>
                  <entry><varname>packageDescriptions</varname></entry>

                  <entry><varname>Map</varname></entry>

                  <entry>N</entry>

                  <entry></entry>
                </row>

                <row>
                  <entry spanname="description"><para>The descriptions to use
                  when describing a package in the documentation. You can
                  specify more than one package option.</para></entry>
                </row>

                <row>
                  <entry><varname>pluginArtifacts</varname></entry>

                  <entry><varname>List</varname></entry>

                  <entry>N</entry>

                  <entry></entry>
                </row>

                <row>
                  <entry spanname="description"><para></para></entry>
                </row>

                <row>
                  <entry><varname>remoteRepositories</varname></entry>

                  <entry><varname>List</varname></entry>

                  <entry>N</entry>

                  <entry></entry>
                </row>

                <row>
                  <entry spanname="description"><para></para></entry>
                </row>

                <row>
                  <entry><varname>sourcePaths</varname></entry>

                  <entry><varname>File[]</varname></entry>

                  <entry>N</entry>

                  <entry></entry>
                </row>

                <row>
                  <entry spanname="description"><para>List of path elements
                  that form the roots of ActionScript class
                  hierarchies.</para></entry>
                </row>

                <row>
                  <entry><varname>templatesPath</varname></entry>

                  <entry><varname>File</varname></entry>

                  <entry>N</entry>

                  <entry></entry>
                </row>

                <row>
                  <entry spanname="description"><para>The path to the ASDoc
                  template directory. The default is the
                  <varname>asdoc/templates</varname> directory in the ASDoc
                  installation directory. This directory contains all the
                  HTML, CSS, XSL, and image files used for generating the
                  output.</para></entry>
                </row>

                <row>
                  <entry><varname>windowTitle</varname></entry>

                  <entry><varname>String</varname></entry>

                  <entry>N</entry>

                  <entry>API Documentation</entry>
                </row>

                <row>
                  <entry spanname="description"><para>The text that appears in
                  the browser window in the output documentation. The default
                  value is "API Documentation".</para></entry>
                </row>
              </tbody>
            </tgroup>
          </table></para>
      </section>
    </section>

    <section id="flex-dev-sect-compiling">
      <title>Compiling Flex Source</title>

      <para>FlexMojos contains a number of goals which compile Actionscript
      and MXML into SWCs and SWFs. The compile-swc and compile-swf goals are
      used to generate output from a project's source, and test-compile is
      used to compile unit tests. In the simple projects created by the
      FlexMojos archetypes, the compile-swc and compile-swf goals are called
      because the project customizes the lifecycle and binds either
      compile-swc or compile-swf to the compile phase and test-compile to the
      test-compile phase. If you need to configure the options for the
      FlexMojos compiler, you would configure the FlexMojos plugin
      configuration. For example, if you wanted the application whose's POM is
      shown in <xref linkend="ex-flex-dev-app-pom" /> to ignore certain
      code-level warnings on compile and use some customized font settings,
      you might use the plugin configuration shown in <xref
      linkend="ex-flex-dev-customizing-compiler" />. </para>

      <example id="ex-flex-dev-customizing-compiler">
        <title>Customizing the Compiler Plugin</title>

        <programlisting>  &lt;build&gt;
    &lt;sourceDirectory&gt;src/main/flex&lt;/sourceDirectory&gt;
    &lt;testSourceDirectory&gt;src/test/flex&lt;/testSourceDirectory&gt;
    &lt;plugins&gt;
      &lt;plugin&gt;
        &lt;groupId&gt;org.sonatype.flexmojos&lt;/groupId&gt;
        &lt;artifactId&gt;flexmojos-maven-plugin&lt;/artifactId&gt;
        &lt;version&gt;${flexmojos.version}&lt;/version&gt;
        &lt;extensions&gt;true&lt;/extensions&gt;
        &lt;configuration&gt;
          &lt;configurationReport&gt;true&lt;/configurationReport&gt;
          &lt;warnings&gt;
            &lt;arrayTostringChanges&gt;true&lt;/arrayTostringChanges&gt;
            &lt;duplicateArgumentNames&gt;false&lt;/duplicateArgumentNames&gt;
          &lt;/warnings&gt;
          &lt;fonts&gt;
            &lt;advancedAntiAliasing&gt;true&lt;/advancedAntiAliasing&gt;
            &lt;flashType&gt;true&lt;/flashType&gt;
            &lt;languages&gt;
              &lt;englishRange&gt;U+0020-U+007E&lt;/englishRange&gt;
            &lt;/languages&gt;
            &lt;localFontsSnapshot&gt;
              ${basedir}/src/main/resources/fonts.ser
            &lt;/localFontsSnapshot&gt;
            &lt;managers&gt;
              &lt;manager&gt;flash.fonts.BatikFontManager&lt;/manager&gt;
            &lt;/managers&gt;
            &lt;maxCachedFonts&gt;20&lt;/maxCachedFonts&gt;
            &lt;maxGlyphsPerFace&gt;1000&lt;/maxGlyphsPerFace&gt;
          &lt;/fonts&gt;
        &lt;/configuration&gt;
      &lt;/plugin&gt;
    &lt;/plugins&gt;
  &lt;/build&gt;</programlisting>
      </example>

      <para>Because are so many tasks within the FlexMojos plugin that share
      similar Flex compiler configuration options, this section outlines the
      common options first in <xref
      linkend="flex-dev-sect-common-configuration" />.</para>

      <section id="flex-dev-sect-common-configuration">
        <title>Common Compilation Parameters for Compilation Goals</title>

        <para>The follow parameters are common to all of the compilation
        goals, including:</para>

        <itemizedlist>
          <listitem>
            <para>compile-swf</para>
          </listitem>

          <listitem>
            <para>compile-swc</para>
          </listitem>

          <listitem>
            <para>test-compile</para>
          </listitem>
        </itemizedlist>

        <para><table>
            <title>Configuration Parameters common to the compile-swc,
            compile-swf, instrument, instrument-swc, and test-compile
            goal</title>

            <tgroup cols="4">
              <colspec colname="name" colnum="1" colsep="0" colwidth="3.75in"
                       rowsep="0" />

              <colspec colname="type" colnum="2" colsep="0" colwidth="1.25in"
                       rowsep="0" />

              <colspec colname="required" colnum="3" colsep="0"
                       colwidth="1.25in" rowsep="0" />

              <colspec colname="default" colnum="4" colsep="0"
                       colwidth="1.25in" rowsep="0" />

              <spanspec charoff="1in" nameend="default" namest="name"
                        rowsep="1" spanname="description" />

              <thead>
                <colspec colname="name" colnum="1" colsep="1"
                         colwidth="3.75in" rowsep="1" />

                <colspec colname="type" colnum="2" colwidth="1.25in"
                         rowsep="1" />

                <colspec colname="required" colnum="3" colsep="1"
                         colwidth="1.25in" rowsep="1" />

                <colspec colname="default" colnum="4" colsep="1"
                         colwidth="1.25in" rowsep="1" />

                <row>
                  <entry>Name</entry>

                  <entry>Type</entry>

                  <entry>Required</entry>

                  <entry>Default</entry>
                </row>
              </thead>

              <tbody>
                <row>
                  <entry><emphasis><varname>accessible</varname></emphasis></entry>

                  <entry><varname>boolean</varname></entry>

                  <entry>N</entry>

                  <entry><varname>false</varname></entry>
                </row>

                <row>
                  <entry spanname="description"><para>Turn on the generation
                  of accessible SWFs. When you set this setting to true, the
                  Flex compiler will include support for the Flex
                  accessibility components. For more information about Flex
                  accessibility, go to the <ulink
                  url="http://www.adobe.com/accessibility/products/flex/components.html">Adobe
                  Flex Accessibility Page</ulink> </para></entry>
                </row>

                <row>
                  <entry><emphasis><varname>allowSourcePathOverlap</varname></emphasis></entry>

                  <entry><varname>boolean</varname></entry>

                  <entry>N</entry>

                  <entry><varname>false</varname></entry>
                </row>

                <row>
                  <entry spanname="description"><para>Allow the source-path to
                  have path-elements which contain other
                  path-elements</para></entry>
                </row>

                <row>
                  <entry><emphasis><varname>as3</varname></emphasis></entry>

                  <entry><varname>boolean</varname></entry>

                  <entry>N</entry>

                  <entry><varname>true</varname></entry>
                </row>

                <row>
                  <entry spanname="description"><para>Use the ActionScript 3
                  class based object model for greater performance and better
                  error reporting. In the class based object model most
                  built-in functions are implemented as fixed methods of
                  classes (-strict is recommended, but not required, for
                  earlier errors)</para></entry>
                </row>

                <row>
                  <entry><emphasis><varname>compatibilityVersion</varname></emphasis></entry>

                  <entry><varname>String</varname></entry>

                  <entry>N</entry>

                  <entry></entry>
                </row>

                <row>
                  <entry spanname="description"><para></para></entry>
                </row>

                <row>
                  <entry><emphasis><varname>compiledLocales</varname></emphasis></entry>

                  <entry><varname>String[]</varname></entry>

                  <entry>N</entry>

                  <entry></entry>
                </row>

                <row>
                  <entry spanname="description"><para>Sets the locales that
                  the compiler uses to replace {locale} tokens that appear in
                  some configuration values. This is equivalent to using the
                  compiler.locale option of the mxmlc or compc
                  compilers.</para><para>Usage:<programlisting>&lt;compiledLocales&gt; 
  &lt;locale&gt;en_US&lt;/locale&gt;
  &lt;locale&gt;pt_BR&lt;/locale&gt; 
  &lt;locale&gt;es_ES&lt;/locale&gt; 
&lt;/compiledLocales&gt;</programlisting></para></entry>
                </row>

                <row>
                  <entry><emphasis><varname>configFile</varname></emphasis></entry>

                  <entry><varname>File</varname></entry>

                  <entry>N</entry>

                  <entry></entry>
                </row>

                <row>
                  <entry spanname="description"><para>Load a file containing
                  configuration options If not defined, by default will search
                  for one on resources folder.</para></entry>
                </row>

                <row>
                  <entry><emphasis><varname>configurationReport</varname></emphasis></entry>

                  <entry><varname>boolean</varname></entry>

                  <entry>N</entry>

                  <entry><varname>false</varname></entry>
                </row>

                <row>
                  <entry spanname="description"><para>Writes the configuration
                  report to a file after the build.</para></entry>
                </row>

                <row>
                  <entry><emphasis><varname>contextRoot</varname></emphasis></entry>

                  <entry><varname>String</varname></entry>

                  <entry>N</entry>

                  <entry></entry>
                </row>

                <row>
                  <entry spanname="description"><para>Sets the context root
                  path so that the compiler can replace {context.root} tokens
                  for service channel endpoints.</para></entry>
                </row>

                <row>
                  <entry><varname>debug</varname></entry>

                  <entry><varname>boolean</varname></entry>

                  <entry>N</entry>

                  <entry><varname>false</varname></entry>
                </row>

                <row>
                  <entry spanname="description"><para>Turn on generation of
                  debuggable SWFs. False by default for mxmlc, but true by
                  default for compc.</para></entry>
                </row>

                <row>
                  <entry><emphasis><varname>debugPassword</varname></emphasis></entry>

                  <entry><varname>String</varname></entry>

                  <entry>N</entry>

                  <entry></entry>
                </row>

                <row>
                  <entry spanname="description"><para>A password that is
                  embedded in the application</para></entry>
                </row>

                <row>
                  <entry><emphasis><varname>defaultBackgroundColor</varname></emphasis></entry>

                  <entry><varname>String</varname></entry>

                  <entry>N</entry>

                  <entry>869CA7</entry>
                </row>

                <row>
                  <entry spanname="description"><para>Sets the default
                  background color. You can override this by using the
                  application code. This is the equivalent of the
                  default-background-color option of the mxmlc or compc
                  compilers.</para></entry>
                </row>

                <row>
                  <entry><emphasis><varname>defaultFrameRate</varname></emphasis></entry>

                  <entry><varname>int</varname></entry>

                  <entry>N</entry>

                  <entry>24</entry>
                </row>

                <row>
                  <entry spanname="description"><para>Sets the default frame
                  rate to be used in the application. This is the equivalent
                  of the default-frame-rate option of the mxmlc or compc
                  compilers.</para></entry>
                </row>

                <row>
                  <entry><emphasis><varname>defaultSizeHeight</varname></emphasis></entry>

                  <entry><varname>int</varname></entry>

                  <entry>N</entry>

                  <entry>375</entry>
                </row>

                <row>
                  <entry spanname="description"><para>Sets the default
                  application height in pixels. This is equivalent to using
                  the default-size option of the mxmlc or compc
                  compilers.</para></entry>
                </row>

                <row>
                  <entry><emphasis><varname>defaultSizeWidth</varname></emphasis></entry>

                  <entry><varname>int</varname></entry>

                  <entry>N</entry>

                  <entry>500</entry>
                </row>

                <row>
                  <entry spanname="description"><para>Sets the default
                  application width in pixels. This is equivalent to using the
                  default-size option of the mxmlc or compc
                  compilers.</para></entry>
                </row>

                <row>
                  <entry><emphasis><varname>defaultsCss</varname></emphasis></entry>

                  <entry><varname>File</varname></entry>

                  <entry>N</entry>

                  <entry></entry>
                </row>

                <row>
                  <entry spanname="description"><para>Sets the location of the
                  default CSS file. This is equivalent to using the
                  compiler.defaults-css-url option of the mxmlc or compc
                  compilers.</para></entry>
                </row>

                <row>
                  <entry><emphasis><varname>definesDeclaration</varname></emphasis></entry>

                  <entry><varname>Properties</varname></entry>

                  <entry>N</entry>

                  <entry></entry>
                </row>

                <row>
                  <entry spanname="description"><para>defines: specifies a
                  list of define directive key and value pairs. For example,
                  CONFIG::debugging</para><para>Usage:<programlisting>&lt;definesDeclaration&gt;
  &lt;property&gt;
    &lt;name&gt;SOMETHING::aNumber&lt;/name&gt;
    &lt;value&gt;2.2&lt;/value&gt;
  &lt;/property&gt;
  &lt;property&gt;
    &lt;name&gt;SOMETHING::aString&lt;/name&gt;
    &lt;value&gt;"text"&lt;/value&gt;
  &lt;/property&gt;
&lt;/definesDeclaration&gt;</programlisting></para></entry>
                </row>

                <row>
                  <entry><varname>enableMavenResourcesResolver</varname></entry>

                  <entry><varname>boolean</varname></entry>

                  <entry>N</entry>

                  <entry><varname>true</varname></entry>
                </row>

                <row>
                  <entry spanname="description"><para>When enabled flexmojos
                  will add a custom path resolver to flex compiler. This allow
                  flexmojos to resolve Embed assets located at
                  src/main/resources. This is a workaround and it is described
                  at
                  http://bugs.adobe.com/jira/browse/SDK-15466</para></entry>
                </row>

                <row>
                  <entry><emphasis><varname>encoding</varname></emphasis></entry>

                  <entry><varname>String</varname></entry>

                  <entry>N</entry>

                  <entry>UTF-8</entry>
                </row>

                <row>
                  <entry spanname="description"><para>Sets the ActionScript
                  file encoding. The compiler uses this encoding to read the
                  ActionScript source files. This is equivalent to using the
                  actionscript-file-encoding option of the mxmlc or compc
                  compilers. The character encoding; for example UTF-8 or
                  Big5.</para></entry>
                </row>

                <row>
                  <entry><emphasis><varname>es</varname></emphasis></entry>

                  <entry><varname>boolean</varname></entry>

                  <entry>N</entry>

                  <entry><varname>false</varname></entry>
                </row>

                <row>
                  <entry spanname="description"><para>Use the ECMAScript
                  edition 3 prototype based object model to allow dynamic
                  overriding of prototype properties. In the prototype based
                  object model built-in functions are implemented as dynamic
                  properties of prototype objects (-strict is allowed, but may
                  result in compiler errors for references to dynamic
                  properties)</para></entry>
                </row>

                <row>
                  <entry><emphasis><varname>externs</varname></emphasis></entry>

                  <entry><varname>String[]</varname></entry>

                  <entry>N</entry>

                  <entry></entry>
                </row>

                <row>
                  <entry spanname="description"><para>Sets a list of
                  definitions to omit from linking when building an
                  application. This is equivalent to using the externs option
                  of the mxmlc and compc compilers. An array of definitions
                  (for example, classes, functions, variables, or
                  namespaces).</para><para>Usage:<programlisting>&lt;externs&gt; 
  &lt;extern&gt;com.acme.AClass&lt;/extern&gt;
&lt;/externs&gt;</programlisting></para></entry>
                </row>

                <row>
                  <entry><varname>fonts</varname></entry>

                  <entry><varname>Font</varname></entry>

                  <entry>N</entry>

                  <entry></entry>
                </row>

                <row>
                  <entry spanname="description"><para>Local Fonts Snapshot
                  File containing cached system font licensing information
                  produced via java -cp mxmlc.jar flex2.tools.FontSnapshot
                  (fontpath). Will default to winFonts.ser on Windows XP and
                  macFonts.ser on Mac OS X.</para><para>Usage:<programlisting>&lt;fonts&gt; 
  &lt;advancedAntiAliasing&gt;true&lt;/advancedAntiAliasing&gt;
  &lt;flashType&gt;true&lt;/flashType&gt;
  &lt;languages&gt;
    &lt;englishRange&gt;U+0020-U+007E&lt;/englishRange&gt;
  &lt;/languages&gt;
  &lt;localFontsSnapshot&gt;${baseDir}/src/main/resources/fonts.ser&lt;/localFontsSnapshot&gt;
  &lt;managers&gt;
    &lt;manager&gt;flash.fonts.BatikFontManager&lt;/manager&gt;
  &lt;/managers&gt;
  &lt;maxCachedFonts&gt;20&lt;/maxCachedFonts&gt;
  &lt;maxGlyphsPerFace&gt;1000&lt;/maxGlyphsPerFace&gt;
&lt;/fonts&gt;</programlisting></para></entry>
                </row>

                <row>
                  <entry><varname>frames</varname></entry>

                  <entry><varname>FrameLabel[]</varname></entry>

                  <entry>N</entry>

                  <entry></entry>
                </row>

                <row>
                  <entry spanname="description"><para>Sets a SWF frame label
                  with a sequence of class names that are linked onto the
                  frame. This is equivalent to using the frames.frame option
                  of the mxmlc or compc
                  compilers.</para><para>Usage:<programlisting>&lt;frames&gt;
  &lt;frame&gt;
    &lt;label&gt;frame1&lt;/label&gt;
    &lt;classNames&gt;
      &lt;className&gt;com.acme.AClass&lt;/className&gt;
    &lt;/classNames&gt;
  &lt;/frame&gt;
&lt;/frames&gt;</programlisting></para></entry>
                </row>

                <row>
                  <entry><varname>headlessServer</varname></entry>

                  <entry><varname>boolean</varname></entry>

                  <entry>N</entry>

                  <entry><varname>false</varname></entry>
                </row>

                <row>
                  <entry spanname="description"><para>Sets the compiler when
                  it runs on a server without a display. This is equivalent to
                  using the compiler.headless-server option of the mxmlc or
                  compc compilers. that value determines if the compiler is
                  running on a server without a display.</para></entry>
                </row>

                <row>
                  <entry><varname>includeLookupOnly</varname></entry>

                  <entry><varname>boolean</varname></entry>

                  <entry>N</entry>

                  <entry><varname>false</varname></entry>
                </row>

                <row>
                  <entry spanname="description"><para>if true, manifest
                  entries with lookupOnly=true are included in SWC catalog.
                  default is false. This exists only so that manifests can
                  mention classes that come in from filespec rather than
                  classpath, e.g. in playerglobal.swc.</para></entry>
                </row>

                <row>
                  <entry><varname>includeResourceBundles</varname></entry>

                  <entry><varname>String[]</varname></entry>

                  <entry>N</entry>

                  <entry></entry>
                </row>

                <row>
                  <entry spanname="description"><para>This is equilvalent to
                  the include-resource-bundles option of the compc compiler.
                  </para><para>Usage:</para><programlisting>&lt;includeResourceBundles&gt;
  &lt;bundle&gt;SharedResources&lt;/bundle&gt;
  &lt;bundle&gt;collections&lt;/bundle&gt;
  &lt;bundle&gt;containers&lt;/bundle&gt;
&lt;/includeResourceBundles&gt;</programlisting></entry>
                </row>

                <row>
                  <entry><varname>includeResourceBundlesArtifact</varname></entry>

                  <entry><varname>MavenArtifact[]</varname></entry>

                  <entry>N</entry>

                  <entry></entry>
                </row>

                <row>
                  <entry spanname="description"><para></para></entry>
                </row>

                <row>
                  <entry><varname>includes</varname></entry>

                  <entry><varname>String[]</varname></entry>

                  <entry>N</entry>

                  <entry></entry>
                </row>

                <row>
                  <entry spanname="description"><para>Sets a list of
                  definitions to always link in when building an application.
                  This is equivalent to using the includes option of the mxmlc
                  or compc compilers. An array of definitions (for example,
                  classes, functions, variables, or namespaces).
                  </para><para>Usage:</para><programlisting>&lt;includes&gt;
  &lt;include&gt;com.acme.AClass&lt;/include&gt;
&lt;/includes&gt;</programlisting></entry>
                </row>

                <row>
                  <entry><varname>incremental</varname></entry>

                  <entry><varname>boolean</varname></entry>

                  <entry>N</entry>

                  <entry><varname>false</varname></entry>
                </row>

                <row>
                  <entry spanname="description"><para> the incremental input
                  argument is false, this method recompiles all parts of the
                  object. If the incremental input argument is true, this
                  method compiles only the parts of the object that have
                  changed since the last compilation.</para></entry>
                </row>

                <row>
                  <entry><varname>keepAllTypeSelectors</varname></entry>

                  <entry><varname>boolean</varname></entry>

                  <entry>N</entry>

                  <entry><varname>false</varname></entry>
                </row>

                <row>
                  <entry spanname="description"><para>Instructs the compiler
                  to keep a style sheet's type selector in a SWF file, even if
                  that type (the class) is not used in the application. This
                  is equivalent to using the compiler.keep-all-type-selectors
                  option of the mxmlc or compc compilers.</para></entry>
                </row>

                <row>
                  <entry><varname>keepAs3Metadatas</varname></entry>

                  <entry><varname>String[]</varname></entry>

                  <entry>N</entry>

                  <entry></entry>
                </row>

                <row>
                  <entry spanname="description"><para>Keep the following AS3
                  metadata in the bytecodes. </para><para>Usage:
                  </para><programlisting>&lt;keepAs3Metadatas&gt; 
  &lt;keepAs3Metadata&gt;Bindable&lt;/keepAs3Metadata&gt;
  &lt;keepAs3Metadata&gt;Events&lt;/keepAs3Metadata&gt;
&lt;/keepAs3Metadatas&gt;</programlisting></entry>
                </row>

                <row>
                  <entry><varname>keepGeneratedActionscript</varname></entry>

                  <entry><varname>boolean</varname></entry>

                  <entry>N</entry>

                  <entry><varname>false</varname></entry>
                </row>

                <row>
                  <entry spanname="description"><para>Turn on writing of
                  generated/*.as files to disk. These files are generated by
                  the compiler during mxml translation and are helpful with
                  understanding and debugging Flex
                  applications.</para></entry>
                </row>

                <row>
                  <entry><varname>licenses</varname></entry>

                  <entry><varname>Map</varname></entry>

                  <entry>N</entry>

                  <entry></entry>
                </row>

                <row>
                  <entry spanname="description"><para>licenses: specifies a
                  list of product and serial number pairs.
                  </para><para>Usage:</para><programlisting>&lt;licenses&gt;
  &lt;flexbuilder3&gt;xxxx-xxxx-xxxx-xxxx&lt;/flexbuilder3&gt;
&lt;/licenses&gt;</programlisting></entry>
                </row>

                <row>
                  <entry><varname>linkReport</varname></entry>

                  <entry><varname>boolean</varname></entry>

                  <entry>N</entry>

                  <entry><varname>false</varname></entry>
                </row>

                <row>
                  <entry spanname="description"><para>Uses the default
                  compiler options as base</para></entry>
                </row>

                <row>
                  <entry><varname>loadExterns</varname></entry>

                  <entry><varname>MavenArtifact[]</varname></entry>

                  <entry>N</entry>

                  <entry></entry>
                </row>

                <row>
                  <entry spanname="description"><para>Sets a list of artifacts
                  to omit from linking when building an application. This is
                  equivalent to using the load-externs option of the mxmlc or
                  compc compilers. </para><para>Usage:</para><programlisting>&lt;loadExterns&gt; 
  &lt;loadExtern&gt; 
    &lt;groupId&gt;com.acme&lt;/groupId&gt;
    &lt;artifactId&gt;flexmodule&lt;/artifactId&gt;
    &lt;version&gt;1.0.0&lt;/version&gt;
  &lt;/loadExtern&gt;
  &lt;loadExtern&gt;
    &lt;groupId&gt;org.tabajara&lt;/groupId&gt;
    &lt;artifactId&gt;flexmodule&lt;/artifactId&gt;
    &lt;version&gt;1.0.0&lt;/version&gt;
  &lt;/loadExtern&gt;
&lt;/loadExterns&gt;</programlisting></entry>
                </row>

                <row>
                  <entry><varname>localRepository</varname></entry>

                  <entry><varname>ArtifactRepository</varname></entry>

                  <entry>N</entry>

                  <entry></entry>
                </row>

                <row>
                  <entry spanname="description"><para>Local repository to be
                  used by the plugin to resolve dependencies.</para></entry>
                </row>

                <row>
                  <entry><varname>locales</varname></entry>

                  <entry><varname>String[]</varname></entry>

                  <entry>N</entry>

                  <entry></entry>
                </row>

                <row>
                  <entry spanname="description"><para>Sets the locales that
                  the compiler uses to replace {locale} tokens that appear in
                  some configuration values. This is equivalent to using the
                  compiler.locale option of the mxmlc or compc compilers.
                  </para><para>Usage:</para><programlisting>&lt;locales&gt;
  &lt;locale&gt;en_US&lt;/locale&gt;
  &lt;locale&gt;pt_BR&lt;/locale&gt;
  &lt;locale&gt;es_ES&lt;/locale&gt;
&lt;/locales&gt;</programlisting></entry>
                </row>

                <row>
                  <entry><varname>mergeResourceBundle</varname></entry>

                  <entry><varname>boolean</varname></entry>

                  <entry>N</entry>

                  <entry></entry>
                </row>

                <row>
                  <entry spanname="description"><para>When true resources are
                  compiled into Application or Library. When false resources
                  are compiled into separated Application or Library files. If
                  not defined no resourceBundle generation is
                  done</para></entry>
                </row>

                <row>
                  <entry><varname>metadata</varname></entry>

                  <entry><varname>Metadata</varname></entry>

                  <entry>N</entry>

                  <entry></entry>
                </row>

                <row>
                  <entry spanname="description"><para>SWF metadata useless
                  there is no API to read it. </para><para>Usage:
                  </para><programlisting>&lt;metadata&gt;
  &lt;contributor&gt;buddy&lt;/contributor&gt;
  &lt;creator&gt;me&lt;/creator&gt;
  &lt;date&gt;01/01/01&lt;/date&gt;
  &lt;descriptions&gt;
    &lt;en_US&gt;Simple description&lt;/en_US&gt;
  &lt;/descriptions&gt;
  &lt;language&gt;en_US&lt;/language&gt;
  &lt;publishers&gt;
    &lt;publisher&gt;publisher1&lt;/publisher&gt;
    &lt;publisher&gt;publisher2&lt;/publisher&gt;
  &lt;/publishers&gt;
  &lt;titles&gt;
    &lt;en_US&gt;Project title&lt;/en_US&gt;
  &lt;/titles&gt;
&lt;/metadata&gt;</programlisting></entry>
                </row>

                <row>
                  <entry><varname>namespaces</varname></entry>

                  <entry><varname>Namespace[]</varname></entry>

                  <entry>N</entry>

                  <entry></entry>
                </row>

                <row>
                  <entry spanname="description"><para>Specify a URI to
                  associate with a manifest of components for use as MXML
                  elements. </para><para>Usage: </para><programlisting>&lt;namespaces&gt;
  &lt;namespace&gt;
    &lt;uri&gt;http://www.adobe.com/2006/mxml&lt;/uri&gt;
    &lt;manifest&gt;${basedir}/manifest.xml&lt;/manifest&gt;
  &lt;/namespace&gt;
&lt;/namespaces&gt;</programlisting></entry>
                </row>

                <row>
                  <entry><varname>pluginArtifacts</varname></entry>

                  <entry><varname>List</varname></entry>

                  <entry>N</entry>

                  <entry></entry>
                </row>

                <row>
                  <entry spanname="description"><para></para></entry>
                </row>

                <row>
                  <entry><varname>policyFileUrls</varname></entry>

                  <entry><varname>String[]</varname></entry>

                  <entry>N</entry>

                  <entry></entry>
                </row>

                <row>
                  <entry spanname="description"><para>policyFileUrls array of
                  policy file URLs. Each entry in the rslUrls array must have
                  a corresponding entry in this array. A policy file may be
                  needed in order to allow the player to read an RSL from
                  another domain. If a policy file is not required, then set
                  it to an empty string. Accept some special tokens:
                  {contextRoot} - replace by defined context root {groupId} -
                  replace by library groupId {artifactId} - replace by library
                  artifactId {version} - replace by library version
                  {extension} - replace by library extension swf or swz
                  </para><para>Usage: </para><programlisting>&lt;policyFileUrls&gt;
  &lt;url&gt;/{contextRoot}/rsl/policy-{artifactId}-{version}.xml&lt;/url&gt;
&lt;/policyFileUrls&gt;</programlisting></entry>
                </row>

                <row>
                  <entry><varname>quick</varname></entry>

                  <entry><varname>boolean</varname></entry>

                  <entry>N</entry>

                  <entry><varname>false</varname></entry>
                </row>

                <row>
                  <entry spanname="description"><para>Quick compile mode. When
                  true, flexmojos will check if the last artifact available at
                  maven repository is newer then sources. If so, will not
                  recompile.</para></entry>
                </row>

                <row>
                  <entry><varname>rawMetadata</varname></entry>

                  <entry><varname>String</varname></entry>

                  <entry>N</entry>

                  <entry></entry>
                </row>

                <row>
                  <entry spanname="description"><para>Sets the metadata
                  section of the application SWF. This is equivalent to the
                  raw-metadata option of the mxmlc or compc compilers. Need a
                  well-formed XML fragment</para></entry>
                </row>

                <row>
                  <entry><varname>remoteRepositories</varname></entry>

                  <entry><varname>List</varname></entry>

                  <entry>N</entry>

                  <entry></entry>
                </row>

                <row>
                  <entry spanname="description"><para>List of remote
                  repositories to be used by the plugin to resolve
                  dependencies.</para></entry>
                </row>

                <row>
                  <entry><varname>resourceBundlePath</varname></entry>

                  <entry><varname>String</varname></entry>

                  <entry>N</entry>

                  <entry>see description</entry>
                </row>

                <row>
                  <entry spanname="description"><para>Define the base path to
                  locate resouce bundle files Accept some special tokens:
                  {locale} - replace by locale name Default value is:
                  ${basedir}/src/main/locales/{locale}.</para></entry>
                </row>

                <row>
                  <entry><varname>rslUrls</varname></entry>

                  <entry><varname>String[]</varname></entry>

                  <entry>N</entry>

                  <entry>see description</entry>
                </row>

                <row>
                  <entry spanname="description"><para>rslUrls array of URLs.
                  The first RSL URL in the list is the primary RSL. The
                  remaining RSL URLs will only be loaded if the primary RSL
                  fails to load. Accept some special tokens: {contextRoot} -
                  replace by defined context root {groupId} - replace by
                  library groupId {artifactId} - replace by library artifactId
                  {version} - replace by library version {extension} - replace
                  by library extension swf or swz
                  default-value="/{contextRoot}/rsl/{artifactId}-{version}.{extension}"
                  </para><para>Usage: </para><programlisting>&lt;rslUrls&gt;
  &lt;url&gt;/{contextRoot}/rsl/{artifactId}-{version}.{extension}&lt;/url&gt;
&lt;/rslUrls&gt;</programlisting></entry>
                </row>

                <row>
                  <entry><varname>runtimeLocaleOutputPath</varname></entry>

                  <entry><varname>String</varname></entry>

                  <entry>N</entry>

                  <entry>see description</entry>
                </row>

                <row>
                  <entry spanname="description"><para>Resource module or
                  resource library output path Default value is:
                  ${project.build.directory}/locales/${project.artifactId}-${project.version}-{locale}.{extension}</para></entry>
                </row>

                <row>
                  <entry><varname>runtimeLocales</varname></entry>

                  <entry><varname>String[]</varname></entry>

                  <entry>N</entry>

                  <entry></entry>
                </row>

                <row>
                  <entry spanname="description"><para>Sets the locales that
                  should be used to generate resource bundles.
                  </para><para>Usage:</para><programlisting>&lt;runtimeLocales&gt;
  &lt;locale&gt;en_US&lt;/locale&gt;
  &lt;locale&gt;pt_BR&lt;/locale&gt;
  &lt;locale&gt;es_ES&lt;/locale&gt;
&lt;/runtimeLocales&gt;</programlisting></entry>
                </row>

                <row>
                  <entry><varname>scriptMaxExecutionTime</varname></entry>

                  <entry><varname>int</varname></entry>

                  <entry>N</entry>

                  <entry>60</entry>
                </row>

                <row>
                  <entry spanname="description"><para>Sets the default script
                  execution limits (which can be overridden by root
                  attributes). This is equivalent to using the
                  default-script-limits option of the mxmlc or compc
                  compilers. Execution time, in seconds</para></entry>
                </row>

                <row>
                  <entry><varname>scriptMaxRecursionDepth</varname></entry>

                  <entry><varname>int</varname></entry>

                  <entry>N</entry>

                  <entry>1000</entry>
                </row>

                <row>
                  <entry spanname="description"><para>Sets the default script
                  execution limits (which can be overridden by root
                  attributes). This is equivalent to using the
                  default-script-limits option of the mxmlc or compc
                  compilers. Recursion depth</para></entry>
                </row>

                <row>
                  <entry><varname>services</varname></entry>

                  <entry><varname>File</varname></entry>

                  <entry>N</entry>

                  <entry></entry>
                </row>

                <row>
                  <entry spanname="description"><para>Sets the location of the
                  Flex Data Services service configuration file. This is
                  equivalent to using the compiler.services option of the
                  mxmlc and compc compilers. If not define will look inside
                  resources directory for services-config.xml</para></entry>
                </row>

                <row>
                  <entry><varname>showWarnings</varname></entry>

                  <entry><varname>boolean</varname></entry>

                  <entry>N</entry>

                  <entry><varname>true</varname></entry>
                </row>

                <row>
                  <entry spanname="description"><para>Run the AS3 compiler in
                  a mode that detects legal but potentially incorrect code.
                  Equivalent compiler option: warnings</para></entry>
                </row>

                <row>
                  <entry><varname>sourcePaths</varname></entry>

                  <entry><varname>File[]</varname></entry>

                  <entry>N</entry>

                  <entry>see description</entry>
                </row>

                <row>
                  <entry spanname="description"><para>List of path elements
                  that form the roots of ActionScript class hierarchies. By
                  default use Maven source and resources
                  folders.</para><para>Usage: </para><programlisting>&lt;sourcePaths&gt;
  &lt;path&gt;${baseDir}/src/main/flex&lt;/path&gt;
&lt;/sourcePaths&gt;</programlisting></entry>
                </row>

                <row>
                  <entry><varname>staticLinkRuntimeSharedLibraries</varname></entry>

                  <entry><varname>boolean</varname></entry>

                  <entry>N</entry>

                  <entry><varname>false</varname></entry>
                </row>

                <row>
                  <entry spanname="description"><para>Determines whether to
                  compile against libraries statically or use RSLs. Set this
                  option to true to ignore the RSLs specified by the rslUrls.
                  Set this option to false to use the RSLs.</para></entry>
                </row>

                <row>
                  <entry><varname>strict</varname></entry>

                  <entry><varname>boolean</varname></entry>

                  <entry>N</entry>

                  <entry><varname>true</varname></entry>
                </row>

                <row>
                  <entry spanname="description"><para>Run the AS3 compiler in
                  strict error checking mode.</para></entry>
                </row>

                <row>
                  <entry><varname>targetPlayer</varname></entry>

                  <entry><varname>String</varname></entry>

                  <entry>N</entry>

                  <entry>9.0.0</entry>
                </row>

                <row>
                  <entry spanname="description"><para>specifies the version of
                  the player the application is targeting. Features requiring
                  a later version will not be compiled into the application.
                  The minimum value supported is "9.0.0".</para></entry>
                </row>

                <row>
                  <entry><varname>themes</varname></entry>

                  <entry><varname>String[]</varname></entry>

                  <entry>N</entry>

                  <entry></entry>
                </row>

                <row>
                  <entry spanname="description"><para>List of CSS or SWC files
                  to apply as a theme.
                  </para><para>Usage:</para><programlisting>&lt;themes&gt; 
  &lt;theme&gt;css/main.css&lt;/theme&gt;
&lt;/themes&gt;</programlisting><para>If you are using SWC theme should be
                  better keep it's version controlled, so is advised to use a
                  dependency with theme scope. Like
                  this:</para><programlisting>&lt;dependency&gt;
  &lt;groupId&gt;com.acme&lt;/groupId&gt;
  &lt;artifactId&gt;acme-theme&lt;/artifactId&gt;
  &lt;type&gt;swc&lt;/type&gt;
  &lt;scope&gt;theme&lt;/scope&gt;
  &lt;version&gt;1.0&lt;/version&gt;
&lt;/dependency&gt;</programlisting></entry>
                </row>

                <row>
                  <entry><varname>useNetwork</varname></entry>

                  <entry><varname>boolean</varname></entry>

                  <entry>N</entry>

                  <entry><varname>true</varname></entry>
                </row>

                <row>
                  <entry spanname="description"><para>Enables SWFs to access
                  the network.</para></entry>
                </row>

                <row>
                  <entry><varname>useResourceBundleMetadata</varname></entry>

                  <entry><varname>boolean</varname></entry>

                  <entry>N</entry>

                  <entry><varname>true</varname></entry>
                </row>

                <row>
                  <entry spanname="description"><para>Determines whether
                  resources bundles are included in the application. This is
                  equivalent to using the
                  compiler.use-resource-bundle-metadata option of the mxmlc or
                  compc compilers.</para></entry>
                </row>

                <row>
                  <entry><varname>verboseStacktraces</varname></entry>

                  <entry><varname>boolean</varname></entry>

                  <entry>N</entry>

                  <entry><varname>false</varname></entry>
                </row>

                <row>
                  <entry spanname="description"><para>Turns on the display of
                  stack traces for uncaught runtime errors.</para></entry>
                </row>

                <row>
                  <entry><varname>verifyDigests</varname></entry>

                  <entry><varname>boolean</varname></entry>

                  <entry>N</entry>

                  <entry><varname>true</varname></entry>
                </row>

                <row>
                  <entry spanname="description"><para>Verifies the RSL loaded
                  has the same digest as the RSL specified when the
                  application was compiled. This is equivalent to using the
                  verify-digests option in the mxmlc compiler.</para></entry>
                </row>

                <row>
                  <entry><varname>warnings</varname></entry>

                  <entry><varname>Warning</varname></entry>

                  <entry>N</entry>

                  <entry></entry>
                </row>

                <row>
                  <entry spanname="description"><para>Enables checking of the
                  following ActionScript warnings:</para><screen>--compiler.warn-array-tostring-changes 
--compiler.warn-assignment-within-conditional 
--compiler.warn-bad-array-cast 
--compiler.warn-bad-bool-assignment 
--compiler.warn-bad-date-cast 
--compiler.warn-bad-es3-type-method 
--compiler.warn-bad-es3-type-prop 
--compiler.warn-bad-nan-comparison 
--compiler.warn-bad-null-assignment 
--compiler.warn-bad-null-comparison 
--compiler.warn-bad-undefined-comparison 
--compiler.warn-boolean-constructor-with-no-args 
--compiler.warn-changes-in-resolve 
--compiler.warn-class-is-sealed 
--compiler.warn-const-not-initialized 
--compiler.warn-constructor-returns-value 
--compiler.warn-deprecated-event-handler-error 
--compiler.warn-deprecated-function-error 
--compiler.warn-deprecated-property-error 
--compiler.warn-duplicate-argument-names 
--compiler.warn-duplicate-variable-def 
--compiler.warn-for-var-in-changes 
--compiler.warn-import-hides-class 
--compiler.warn-instance-of-changes 
--compiler.warn-internal-error 
--compiler.warn-level-not-supported 
--compiler.warn-missing-namespace-decl 
--compiler.warn-negative-uint-literal 
--compiler.warn-no-constructor 
--compiler.warn-no-explicit-super-call-in-constructor 
--compiler.warn-no-type-decl 
--compiler.warn-number-from-string-changes 
--compiler.warn-scoping-change-in-this 
--compiler.warn-slow-text-field-addition 
--compiler.warn-unlikely-function-value 
--compiler.warn-xml-class-has-changed</screen><para>Usage:</para><programlisting>&lt;warnings&gt; 
  &lt;arrayTostringChanges&gt;true&lt;/arrayTostringChanges&gt;
  &lt;assignmentWithinConditional&gt;false&lt;/assignmentWithinConditional&gt;
&lt;/warnings&gt;</programlisting></entry>
                </row>
              </tbody>
            </tgroup>
          </table></para>
      </section>

      <section id="flex-dev-sect-goal-compile-swc">
        <title>Configuring the compile-swc Goal</title>

        <para>In addition to the common compilation parameters listed in <xref
        linkend="flex-dev-sect-common-configuration" />, the following
        configuration parameters are unique to the
        <varname>compile-swc</varname> goal.</para>

        <para><table>
            <title>Configuration Parameters for the compile-swc goal</title>

            <tgroup cols="4">
              <colspec colname="name" colnum="1" colsep="0" colwidth="3.75in"
                       rowsep="0" />

              <colspec colname="type" colnum="2" colsep="0" colwidth="1.25in"
                       rowsep="0" />

              <colspec colname="required" colnum="3" colsep="0"
                       colwidth="1.25in" rowsep="0" />

              <colspec colname="default" colnum="4" colsep="0"
                       colwidth="1.25in" rowsep="0" />

              <spanspec charoff="1in" nameend="default" namest="name"
                        rowsep="1" spanname="description" />

              <thead>
                <colspec colname="name" colnum="1" colsep="1"
                         colwidth="3.75in" rowsep="1" />

                <colspec colname="type" colnum="2" colwidth="1.25in"
                         rowsep="1" />

                <colspec colname="required" colnum="3" colsep="1"
                         colwidth="1.25in" rowsep="1" />

                <colspec colname="default" colnum="4" colsep="1"
                         colwidth="1.25in" rowsep="1" />

                <row>
                  <entry>Name</entry>

                  <entry>Type</entry>

                  <entry>Required</entry>

                  <entry>Default</entry>
                </row>
              </thead>

              <tbody>
                <row>
                  <entry><emphasis><varname>addMavenDescriptor</varname></emphasis></entry>

                  <entry><varname>boolean</varname></entry>

                  <entry>N</entry>

                  <entry><varname>true</varname></entry>
                </row>

                <row>
                  <entry spanname="description"><para>By default, Maven
                  generated archives include the META-INF/maven directory,
                  which contains the pom.xml file used to build the archive.
                  To disable the generation of these files, include the
                  following configuration for your plugin.</para></entry>
                </row>

                <row>
                  <entry><emphasis><varname>computeDigest</varname></emphasis></entry>

                  <entry><varname>boolean</varname></entry>

                  <entry>N</entry>

                  <entry><varname>true</varname></entry>
                </row>

                <row>
                  <entry spanname="description"><para>Enable or disable the
                  computation of a digest for the created swf library. This is
                  equivalent to using the compiler.computeDigest in the compc
                  compiler.</para></entry>
                </row>

                <row>
                  <entry><varname>debug</varname></entry>

                  <entry><varname>boolean</varname></entry>

                  <entry>N</entry>

                  <entry><varname>true</varname></entry>
                </row>

                <row>
                  <entry spanname="description"><para>Turn on generation of
                  debuggable SWFs. False by default for mxmlc, but true by
                  default for compc.</para></entry>
                </row>

                <row>
                  <entry><emphasis><varname>directory</varname></emphasis></entry>

                  <entry><varname>File</varname></entry>

                  <entry>N</entry>

                  <entry></entry>
                </row>

                <row>
                  <entry spanname="description"><para>Sets the RSL output
                  directory.</para></entry>
                </row>

                <row>
                  <entry><varname>includeClasses</varname></entry>

                  <entry><varname>String[]</varname></entry>

                  <entry>N</entry>

                  <entry></entry>
                </row>

                <row>
                  <entry spanname="description"><para>This is the equilvalent
                  of the include-classes option of the compc
                  compiler.</para><para>Usage:<programlisting>&lt;includeClasses&gt;
  &lt;class&gt;AClass&lt;/class&gt;
  &lt;class&gt;BClass&lt;/class&gt;
&lt;/includeClasses&gt;</programlisting></para></entry>
                </row>

                <row>
                  <entry><varname>includeFiles</varname></entry>

                  <entry><varname>String[]</varname></entry>

                  <entry>N</entry>

                  <entry></entry>
                </row>

                <row>
                  <entry spanname="description"><para>This is equilvalent to
                  the include-file option of the compc
                  compiler.</para><para>Usage:<programlisting>&lt;includeFiles&gt;
  &lt;file&gt;${baseDir}/anyFile.txt&lt;/file&gt;
&lt;/includeFiles&gt;</programlisting></para></entry>
                </row>

                <row>
                  <entry><varname>includeNamespaces</varname></entry>

                  <entry><varname>String[]</varname></entry>

                  <entry>N</entry>

                  <entry></entry>
                </row>

                <row>
                  <entry spanname="description"><para>This is equilvalent to
                  the include-namespaces option of the compc compiler.
                  </para><para>Usage:</para><programlisting>&lt;includeNamespaces&gt;
  &lt;namespace&gt;http://www.adobe.com/2006/mxml&lt;/namespace&gt;
&lt;/includeNamespaces&gt;</programlisting></entry>
                </row>

                <row>
                  <entry><varname>includeSources</varname></entry>

                  <entry><varname>File[]</varname></entry>

                  <entry>N</entry>

                  <entry></entry>
                </row>

                <row>
                  <entry spanname="description"><para>This is the equilvalent
                  of the include-sources option of the compc compiler.
                  </para><para>Usage:</para><programlisting>&lt;includeSources&gt;
  &lt;sources&gt;${baseDir}/src/main/flex&lt;/sources&gt;
&lt;/includeSources&gt;</programlisting></entry>
                </row>

                <row>
                  <entry><varname>includeStylesheet</varname></entry>

                  <entry><varname>Stylesheet[]</varname></entry>

                  <entry>N</entry>

                  <entry></entry>
                </row>

                <row>
                  <entry spanname="description"><para>Adds a CSS stylesheet to
                  this Library object. This is equilvalent to the
                  include-stylesheet option of the compc compiler.
                  </para><para>Usage:</para><programlisting>&lt;includeStylesheet&gt; 
  &lt;stylesheet&gt; 
    &lt;name&gt;style1&lt;/name&gt; 
    &lt;path&gt;${baseDir}/src/main/flex/style1.css&lt;/path&gt; 
  &lt;/stylesheet&gt; 
&lt;/includeStylesheet&gt;</programlisting></entry>
                </row>

                <row>
                  <entry><varname>output</varname></entry>

                  <entry><varname>File</varname></entry>

                  <entry>N</entry>

                  <entry>see description</entry>
                </row>

                <row>
                  <entry spanname="description"><para>The filename of the SWF
                  movie to create Default value is:
                  ${project.build.directory}/${project.build.finalName}.swc.</para></entry>
                </row>
              </tbody>
            </tgroup>
          </table></para>
      </section>

      <section id="flex-dev-sect-goal-compile-swf">
        <title>Configuring the compile-swf Goal</title>

        <para>In addition to the common compilation parameters listed in <xref
        linkend="flex-dev-sect-common-configuration" />, the following
        configuration parameters are unique to the
        <varname>compile-swf</varname> goal.</para>

        <para><table>
            <title>Configuration Parameters for the compile-swf goal</title>

            <tgroup cols="4">
              <colspec colname="name" colnum="1" colsep="0" colwidth="3.75in"
                       rowsep="0" />

              <colspec colname="type" colnum="2" colsep="0" colwidth="1.25in"
                       rowsep="0" />

              <colspec colname="required" colnum="3" colsep="0"
                       colwidth="1.25in" rowsep="0" />

              <colspec colname="default" colnum="4" colsep="0"
                       colwidth="1.25in" rowsep="0" />

              <spanspec charoff="1in" nameend="default" namest="name"
                        rowsep="1" spanname="description" />

              <thead>
                <colspec colname="name" colnum="1" colsep="1"
                         colwidth="3.75in" rowsep="1" />

                <colspec colname="type" colnum="2" colwidth="1.25in"
                         rowsep="1" />

                <colspec colname="required" colnum="3" colsep="1"
                         colwidth="1.25in" rowsep="1" />

                <colspec colname="default" colnum="4" colsep="1"
                         colwidth="1.25in" rowsep="1" />

                <row>
                  <entry>Name</entry>

                  <entry>Type</entry>

                  <entry>Required</entry>

                  <entry>Default</entry>
                </row>
              </thead>

              <tbody>
                <row>
                  <entry><varname>debug</varname></entry>

                  <entry><varname>boolean</varname></entry>

                  <entry>N</entry>

                  <entry><varname>falase</varname></entry>
                </row>

                <row>
                  <entry spanname="description"><para>Turn on generation of
                  debuggable SWFs. False by default for mxmlc, but true by
                  default for compc.</para></entry>
                </row>

                <row>
                  <entry><emphasis><varname>defaultLocale</varname></emphasis></entry>

                  <entry><varname>String</varname></entry>

                  <entry>N</entry>

                  <entry>en_US</entry>
                </row>

                <row>
                  <entry spanname="description"><para>Default locale for
                  libraries. This is useful to non localized applications,
                  just to define swc.rb locale</para></entry>
                </row>

                <row>
                  <entry><varname>loadExternsOnModules</varname></entry>

                  <entry><varname>boolean</varname></entry>

                  <entry>N</entry>

                  <entry>true</entry>
                </row>

                <row>
                  <entry spanname="description"><para>When true, tells
                  flexmojos to use link reports/load externs on modules
                  compilation</para></entry>
                </row>

                <row>
                  <entry><varname>moduleFiles</varname></entry>

                  <entry><varname>String</varname></entry>

                  <entry>N</entry>

                  <entry></entry>
                </row>

                <row>
                  <entry spanname="description"><para>The list of modules
                  files to be compiled. The path must be relative with source
                  folder.</para><para>Usage: </para><programlisting>&lt;moduleFiles&gt;
&lt;module&gt;com/acme/AModule.mxml&lt;/module&gt;
&lt;/moduleFiles&gt;
</programlisting></entry>
                </row>

                <row>
                  <entry><varname>output</varname></entry>

                  <entry><varname>File</varname></entry>

                  <entry>N</entry>

                  <entry>see description</entry>
                </row>

                <row>
                  <entry spanname="description"><para>The filename of the SWF
                  movie to create Default value is:
                  ${project.build.directory}/${project.build.finalName}.swf.</para></entry>
                </row>

                <row>
                  <entry><varname>sourceFile</varname></entry>

                  <entry><varname>String</varname></entry>

                  <entry>N</entry>

                  <entry><varname></varname></entry>
                </row>

                <row>
                  <entry spanname="description"><para>The file to be compiled.
                  The path must be relative with source folder</para></entry>
                </row>

                <row>
                  <entry><varname>updateSecuritySandbox</varname></entry>

                  <entry><varname>boolean</varname></entry>

                  <entry>N</entry>

                  <entry>true</entry>
                </row>

                <row>
                  <entry spanname="description">When true, flexmojos will
                  register register every compiled SWF files as trusted. These
                  SWF files are assigned to the local-trusted sandbox. They
                  can interact with any other SWF files, and they can load
                  data from anywhere, remote or local. On false nothing is
                  done, so if the file is already trusted it will still as it
                  is.</entry>
                </row>
              </tbody>
            </tgroup>
          </table></para>
      </section>
    </section>

    <section id="flex-dev-sect-unit-testing">
      <title>Unit Testing Flex</title>

      <section id="flex-dev-sect-goal-test-compile">
        <title>Configuring the test-compile Goal</title>

        <para>In addition to the common compilation parameters listed in <xref
        linkend="flex-dev-sect-common-configuration" />, the following
        configuration parameters are unique to the
        <varname>test-compile</varname> goal.</para>

        <para><table>
            <title>Configuration Parameters for the test-compile goal.</title>

            <tgroup cols="4">
              <colspec colname="name" colnum="1" colsep="0" colwidth="3.75in"
                       rowsep="0" />

              <colspec colname="type" colnum="2" colsep="0" colwidth="1.25in"
                       rowsep="0" />

              <colspec colname="required" colnum="3" colsep="0"
                       colwidth="1.25in" rowsep="0" />

              <colspec colname="default" colnum="4" colsep="0"
                       colwidth="1.25in" rowsep="0" />

              <spanspec charoff="1in" nameend="default" namest="name"
                        rowsep="1" spanname="description" />

              <thead>
                <colspec colname="name" colnum="1" colsep="1"
                         colwidth="3.75in" rowsep="1" />

                <colspec colname="type" colnum="2" colwidth="1.25in"
                         rowsep="1" />

                <colspec colname="required" colnum="3" colsep="1"
                         colwidth="1.25in" rowsep="1" />

                <colspec colname="default" colnum="4" colsep="1"
                         colwidth="1.25in" rowsep="1" />

                <row>
                  <entry>Name</entry>

                  <entry>Type</entry>

                  <entry>Required</entry>

                  <entry>Default</entry>
                </row>
              </thead>

              <tbody>
                <row>
                  <entry><emphasis><varname>defaultLocale</varname></emphasis></entry>

                  <entry><varname>String</varname></entry>

                  <entry>N</entry>

                  <entry>en_US</entry>
                </row>

                <row>
                  <entry spanname="description"><para>Default locale for
                  libraries. This is useful to non localized applications,
                  just to define swc.rb locale</para></entry>
                </row>

                <row>
                  <entry><varname>excludeTestFiles</varname></entry>

                  <entry><varname>String[]</varname></entry>

                  <entry>N</entry>

                  <entry></entry>
                </row>

                <row>
                  <entry spanname="description"><para>Files to exclude from
                  testing. If not defined, assumes no
                  exclusions</para></entry>
                </row>

                <row>
                  <entry><varname>forkMode</varname></entry>

                  <entry><varname>String</varname></entry>

                  <entry>N</entry>

                  <entry>once</entry>
                </row>

                <row>
                  <entry spanname="description"><para>Option to specify the
                  forking mode. Can be "once" or "always". Always fork
                  flashplayer per test class.</para></entry>
                </row>

                <row>
                  <entry><varname>includeTestFiles</varname></entry>

                  <entry><varname>String[]</varname></entry>

                  <entry>N</entry>

                  <entry></entry>
                </row>

                <row>
                  <entry spanname="description"><para>File to be tested. If
                  not defined assumes Test*.as and *Test.as</para></entry>
                </row>

                <row>
                  <entry><varname>skipTests</varname></entry>

                  <entry><varname>boolean</varname></entry>

                  <entry>N</entry>

                  <entry>false</entry>
                </row>

                <row>
                  <entry spanname="description"><para>Set this to 'true' to
                  bypass unit tests entirely. Its use is NOT RECOMMENDED, but
                  quite convenient on occasion.</para></entry>
                </row>

                <row>
                  <entry><varname>sourceFile</varname></entry>

                  <entry><varname>String</varname></entry>

                  <entry>N</entry>

                  <entry><varname></varname></entry>
                </row>

                <row>
                  <entry spanname="description"><para>The file to be compiled.
                  The path must be relative with source folder</para></entry>
                </row>

                <row>
                  <entry><varname>testControlPort</varname></entry>

                  <entry><varname>int</varname></entry>

                  <entry>N</entry>

                  <entry>13540</entry>
                </row>

                <row>
                  <entry spanname="description">Socket connect port for
                  flex/java communication to control if flashplayer is
                  alive</entry>
                </row>

                <row>
                  <entry><varname>testPort</varname></entry>

                  <entry><varname>int</varname></entry>

                  <entry>N</entry>

                  <entry>13539</entry>
                </row>

                <row>
                  <entry spanname="description">Socket connect port for
                  flex/java communication to transfer tests results</entry>
                </row>

                <row>
                  <entry><varname>testRunnerTemplate</varname></entry>

                  <entry><varname>File</varname></entry>

                  <entry>N</entry>

                  <entry></entry>
                </row>

                <row>
                  <entry spanname="description"></entry>
                </row>
              </tbody>
            </tgroup>
          </table></para>
      </section>

      <section id="flex-dev-sect-goal-test-run">
        <title>Configuring the test-run Goal</title>

        <para>The following configuration parameters provide control over the
        execution of Unit Tests.</para>

        <para><table>
            <title>Configuration Parameters for the test-run goal.</title>

            <tgroup cols="4">
              <colspec colname="name" colnum="1" colsep="0" colwidth="3.75in"
                       rowsep="0" />

              <colspec colname="type" colnum="2" colsep="0" colwidth="1.25in"
                       rowsep="0" />

              <colspec colname="required" colnum="3" colsep="0"
                       colwidth="1.25in" rowsep="0" />

              <colspec colname="default" colnum="4" colsep="0"
                       colwidth="1.25in" rowsep="0" />

              <spanspec charoff="1in" nameend="default" namest="name"
                        rowsep="1" spanname="description" />

              <thead>
                <colspec colname="name" colnum="1" colsep="1"
                         colwidth="3.75in" rowsep="1" />

                <colspec colname="type" colnum="2" colwidth="1.25in"
                         rowsep="1" />

                <colspec colname="required" colnum="3" colsep="1"
                         colwidth="1.25in" rowsep="1" />

                <colspec colname="default" colnum="4" colsep="1"
                         colwidth="1.25in" rowsep="1" />

                <row>
                  <entry>Name</entry>

                  <entry>Type</entry>

                  <entry>Required</entry>

                  <entry>Default</entry>
                </row>
              </thead>

              <tbody>
                <row>
                  <entry><emphasis><varname>allowHeadlessMode</varname></emphasis></entry>

                  <entry><varname>boolean</varname></entry>

                  <entry>N</entry>

                  <entry>true</entry>
                </row>

                <row>
                  <entry spanname="description"><para>When true, allow
                  flexmojos to launch xvfb-run to run test if it detects
                  headless linux env</para></entry>
                </row>

                <row>
                  <entry><emphasis><varname>firstConnectionTimeout</varname></emphasis></entry>

                  <entry><varname>int</varname></entry>

                  <entry>N</entry>

                  <entry>20000</entry>
                </row>

                <row>
                  <entry spanname="description"><para>Timeout for the first
                  connection on ping Thread. That means how much time
                  flexmojos will wait for Flashplayer be loaded at first
                  time.</para></entry>
                </row>

                <row>
                  <entry><emphasis><varname>flashPlayerCommand</varname></emphasis></entry>

                  <entry><varname>String</varname></entry>

                  <entry>N</entry>

                  <entry></entry>
                </row>

                <row>
                  <entry spanname="description"><para>Can be of type
                  &lt;argument&gt;</para></entry>
                </row>

                <row>
                  <entry><varname>localRepository</varname></entry>

                  <entry><varname>ArtifactRepository</varname></entry>

                  <entry>N</entry>

                  <entry></entry>
                </row>

                <row>
                  <entry spanname="description"><para>Local repository to be
                  used by the plugin to resolve dependencies.</para></entry>
                </row>

                <row>
                  <entry><varname>pluginArtifacts</varname></entry>

                  <entry><varname>List</varname></entry>

                  <entry>N</entry>

                  <entry></entry>
                </row>

                <row>
                  <entry spanname="description"></entry>
                </row>

                <row>
                  <entry><varname>remoteRepostories</varname></entry>

                  <entry><varname>List</varname></entry>

                  <entry>N</entry>

                  <entry></entry>
                </row>

                <row>
                  <entry spanname="description"><para>List of remote
                  repositories to be used by the plugin to resolve
                  dependencies.</para></entry>
                </row>

                <row>
                  <entry><varname>skip</varname></entry>

                  <entry><varname>boolean</varname></entry>

                  <entry>N</entry>

                  <entry><varname>false</varname></entry>
                </row>

                <row>
                  <entry spanname="description"><para></para></entry>
                </row>

                <row>
                  <entry><varname>skipTest</varname></entry>

                  <entry><varname>boolean</varname></entry>

                  <entry>N</entry>

                  <entry>false</entry>
                </row>

                <row>
                  <entry spanname="description"></entry>
                </row>

                <row>
                  <entry><varname>testControlPort</varname></entry>

                  <entry><varname>int</varname></entry>

                  <entry>N</entry>

                  <entry>13540</entry>
                </row>

                <row>
                  <entry spanname="description">Socket connect port for
                  flex/java communication to control if flashplayer is
                  alive.</entry>
                </row>

                <row>
                  <entry><varname>testFailureIgnore</varname></entry>

                  <entry><varname>boolean</varname></entry>

                  <entry>N</entry>

                  <entry>false</entry>
                </row>

                <row>
                  <entry spanname="description"></entry>
                </row>

                <row>
                  <entry><varname>testPort</varname></entry>

                  <entry><varname>int</varname></entry>

                  <entry>N</entry>

                  <entry>13539</entry>
                </row>

                <row>
                  <entry spanname="description">Socket connect port for
                  flex/java communication to transfer tests results.</entry>
                </row>

                <row>
                  <entry><varname>testTimeout</varname></entry>

                  <entry><varname>int</varname></entry>

                  <entry>N</entry>

                  <entry>2000</entry>
                </row>

                <row>
                  <entry spanname="description">Test timeout to wait for
                  socket responding</entry>
                </row>

                <row>
                  <entry><varname>verifyDigests</varname></entry>

                  <entry><varname>boolean</varname></entry>

                  <entry>N</entry>

                  <entry><varname>true</varname></entry>
                </row>

                <row>
                  <entry spanname="description"><para>Verifies the RSL loaded
                  has the same digest as the RSL specified when the
                  application was compiled. This is equivalent to using the
                  verify-digests option in the mxmlc compiler.</para></entry>
                </row>
              </tbody>
            </tgroup>
          </table></para>
      </section>
    </section>

    <section id="flex-dev-sect-flexbuilder">
      <title>Generating Flex Builder Project Files</title>

      <para>To generate Flex Builder project files for a FlexMojos project,
      configure the plugin groups as described in <xref
      linkend="flex-dev-sect-plugin-group" />, and run the
      <varname>flexbuilder</varname> goal:</para>

      <screen>$ <command>mvn flexmojos:flexbuilder</command></screen>

      <para>Running this goal will create a <filename>.project</filename>,
      <filename>.settings/org.eclipse.core.resources.prefs</filename>,
      <filename>.actionScriptProperties</filename>, and
      <filename>.flexLibProperties</filename>. These configuration values in
      these files can be customizing by configuring the flexbuilder goal
      configuration parameters detailed in <xref
      linkend="flex-dev-sect-goal-flexbuilder" />.</para>

      <section id="flex-dev-sect-goal-flexbuilder">
        <title>Configuring the flexbuilder Goal</title>

        <para>The following configuration parameters allow you to customize
        the FlexBuider projfect files created by the
        <varname>flexbuilder</varname> goal.</para>

        <table>
          <title>Configuration Parameters for the flexbuilder goal.</title>

          <tgroup cols="4">
            <colspec colname="name" colnum="1" colsep="0" colwidth="3.75in"
                     rowsep="0" />

            <colspec colname="type" colnum="2" colsep="0" colwidth="1.25in"
                     rowsep="0" />

            <colspec colname="required" colnum="3" colsep="0"
                     colwidth="1.25in" rowsep="0" />

            <colspec colname="default" colnum="4" colsep="0" colwidth="1.25in"
                     rowsep="0" />

            <spanspec charoff="1in" nameend="default" namest="name" rowsep="1"
                      spanname="description" />

            <thead>
              <colspec colname="name" colnum="1" colsep="1" colwidth="3.75in"
                       rowsep="1" />

              <colspec colname="type" colnum="2" colwidth="1.25in" rowsep="1" />

              <colspec colname="required" colnum="3" colsep="1"
                       colwidth="1.25in" rowsep="1" />

              <colspec colname="default" colnum="4" colsep="1"
                       colwidth="1.25in" rowsep="1" />

              <row>
                <entry>Name</entry>

                <entry>Type</entry>

                <entry>Required</entry>

                <entry>Default</entry>
              </row>
            </thead>

            <tbody>
              <row>
                <entry><emphasis><varname>accessible</varname></emphasis></entry>

                <entry><varname>boolean</varname></entry>

                <entry>N</entry>

                <entry>false</entry>
              </row>

              <row>
                <entry spanname="description"><para>Turn on generation of
                accessible SWFs.</para></entry>
              </row>

              <row>
                <entry><emphasis><varname>compiledLocales</varname></emphasis></entry>

                <entry><varname>String[]</varname></entry>

                <entry>N</entry>

                <entry></entry>
              </row>

              <row>
                <entry spanname="description"><para>Sets the locales that the
                compiler uses to replace {locale} tokens that appear in some
                configuration values. This is equivalent to using the
                compiler.locale option of the mxmlc or compc
                compilers.</para><para>Usage:<programlisting>&lt;compiledLocales&gt; 
  &lt;locale&gt;en_US&lt;/locale&gt;
  &lt;locale&gt;pt_BR&lt;/locale&gt; 
  &lt;locale&gt;es_ES&lt;/locale&gt; 
&lt;/compiledLocales&gt;</programlisting></para></entry>
              </row>

              <row>
                <entry><emphasis><varname>defaultLocale</varname></emphasis></entry>

                <entry><varname>String</varname></entry>

                <entry>N</entry>

                <entry>en_US</entry>
              </row>

              <row>
                <entry spanname="description"><para>Default locale for
                libraries. This is useful to non localized applications, just
                to define swc.rb locale</para></entry>
              </row>

              <row>
                <entry><emphasis><varname>enableM2e</varname></emphasis></entry>

                <entry><varname>boolean</varname></entry>

                <entry>N</entry>

                <entry>true</entry>
              </row>

              <row>
                <entry spanname="description"><para></para></entry>
              </row>

              <row>
                <entry><emphasis><varname>generateHtmlWrapper</varname></emphasis></entry>

                <entry><varname>boolean</varname></entry>

                <entry>N</entry>

                <entry>false</entry>
              </row>

              <row>
                <entry spanname="description"><para></para></entry>
              </row>

              <row>
                <entry><varname>includeClasses</varname></entry>

                <entry><varname>String[]</varname></entry>

                <entry>N</entry>

                <entry></entry>
              </row>

              <row>
                <entry spanname="description"><para>This is the equilvalent of
                the include-classes option of the compc
                compiler.</para><para>Usage:</para><programlisting>&lt;includeClassses&gt;
  &lt;class&gt;foo.Bar&lt;/class&gt;
&lt;/includeClasses&gt;
</programlisting></entry>
              </row>

              <row>
                <entry><varname>includeSources</varname></entry>

                <entry><varname>File[]</varname></entry>

                <entry>N</entry>

                <entry></entry>
              </row>

              <row>
                <entry spanname="description"><para>This is the equilvalent of
                the include-sources option of the compc compiler.
                </para><para>Usage:</para><programlisting>&lt;includeSources&gt;
  &lt;sources&gt;${baseDir}/src/main/flex&lt;/sources&gt;
&lt;/includeSources&gt;</programlisting></entry>
              </row>

              <row>
                <entry><varname>locales</varname></entry>

                <entry><varname>String[]</varname></entry>

                <entry>N</entry>

                <entry></entry>
              </row>

              <row>
                <entry spanname="description"><para>Sets the locales that the
                compiler uses to replace {locale} tokens that appear in some
                configuration values. This is equivalent to using the
                compiler.locale option of the mxmlc or compc compilers.
                </para><para>Usage:</para><programlisting>&lt;locales&gt;
  &lt;locale&gt;en_US&lt;/locale&gt;
  &lt;locale&gt;pt_BR&lt;/locale&gt;
  &lt;locale&gt;es_ES&lt;/locale&gt;
&lt;/locales&gt;</programlisting></entry>
              </row>

              <row>
                <entry><varname>mergeResourceBundle</varname></entry>

                <entry><varname>boolean</varname></entry>

                <entry>N</entry>

                <entry></entry>
              </row>

              <row>
                <entry spanname="description"><para>When true resources are
                compiled into Application or Library. When false resources are
                compiled into separated Application or Library files. If not
                defined no resourceBundle generation is done</para></entry>
              </row>

              <row>
                <entry><varname>remoteRepostories</varname></entry>

                <entry><varname>List</varname></entry>

                <entry>N</entry>

                <entry></entry>
              </row>

              <row>
                <entry spanname="description"><para>List of remote
                repositories to be used by the plugin to resolve
                dependencies.</para></entry>
              </row>

              <row>
                <entry><varname>resourceBundlePath</varname></entry>

                <entry><varname>String</varname></entry>

                <entry>N</entry>

                <entry>see description</entry>
              </row>

              <row>
                <entry spanname="description"><para>Define the base path to
                locate resouce bundle files Accept some special tokens:
                {locale} - replace by locale name Default value is:
                ${basedir}/src/main/locales/{locale}.</para></entry>
              </row>

              <row>
                <entry><varname>showWarnings</varname></entry>

                <entry><varname>boolean</varname></entry>

                <entry>N</entry>

                <entry><varname>true</varname></entry>
              </row>

              <row>
                <entry spanname="description"><para>Run the AS3 compiler in a
                mode that detects legal but potentially incorrect code.
                Equivalent compiler option: warnings</para></entry>
              </row>

              <row>
                <entry><varname>sourceFile</varname></entry>

                <entry><varname>String</varname></entry>

                <entry>N</entry>

                <entry><varname></varname></entry>
              </row>

              <row>
                <entry spanname="description"><para>The file to be compiled.
                The path must be relative with source folder</para></entry>
              </row>

              <row>
                <entry><varname>sourcePaths</varname></entry>

                <entry><varname>File[]</varname></entry>

                <entry>N</entry>

                <entry>see description</entry>
              </row>

              <row>
                <entry spanname="description"><para>List of path elements that
                form the roots of ActionScript class hierarchies. By default
                use Maven source and resources folders.</para><para>Usage:
                </para><programlisting>&lt;sourcePaths&gt;
  &lt;path&gt;${baseDir}/src/main/flex&lt;/path&gt;
&lt;/sourcePaths&gt;</programlisting></entry>
              </row>

              <row>
                <entry><varname>strict</varname></entry>

                <entry><varname>boolean</varname></entry>

                <entry>N</entry>

                <entry><varname>true</varname></entry>
              </row>

              <row>
                <entry spanname="description"><para>Run the AS3 compiler in
                strict error checking mode.</para></entry>
              </row>

              <row>
                <entry><varname>targetPlayer</varname></entry>

                <entry><varname>String</varname></entry>

                <entry>N</entry>

                <entry>9.0.0</entry>
              </row>

              <row>
                <entry spanname="description"><para>specifies the version of
                the player the application is targeting. Features requiring a
                later version will not be compiled into the application. The
                minimum value supported is "9.0.0".</para></entry>
              </row>
            </tbody>
          </tgroup>
        </table>
      </section>
    </section>
  </section>

  <section id="flex-dev-sect-reports">
    <title>FlexMojos Plugin Reports</title>

    <para>The FlexMojos Maven Plugin contains the following report:</para>

    <variablelist>
      <varlistentry>
        <term>flexmojos:asdoc-report</term>

        <listitem>
          <para>Generates documentation for Actionscript sources as a report
          that can be included in a Maven site</para>
        </listitem>
      </varlistentry>
    </variablelist>

    <section id="flex-dev-sect-report-asdoc">
      <title>Generating Actionscript Documentation Report</title>

      <para>To generate the <varname>asdoc-report</varname> as part of your
      Maven site build, add the following XML to your POM:</para>

      <example>
        <title>Configuring the Actionscript Documentation Report</title>

        <programlisting>&lt;reporting&gt;
  &lt;plugins&gt;
    &lt;plugin&gt;
      &lt;groupId&gt;org.sonatype.flexmojos&lt;/groupId&gt;
      &lt;artifactId&gt;flexmojos-maven-plugin&lt;/artifactId&gt;
      &lt;version&gt;${flexmojos.version}&lt;/version&gt;
      &lt;reportSets&gt;
        &lt;reportSet&gt;
          &lt;id&gt;flex-reports&lt;/id&gt;
          &lt;reports&gt;
            &lt;report&gt;asdoc-report&lt;/report&gt;
          &lt;/reports&gt;
        &lt;/reportSet&gt;
      &lt;/reportSets&gt;
    &lt;/plugin&gt;
  &lt;/plugins&gt;
&lt;/reporting&gt;
</programlisting>
      </example>

      <para>When you run <command>mvn site</command>, Maven will generate this
      report and place the results under the "Project Reports" menu as shown
      in <xref linkend="fig-flex-dev-actionscript-report" />.</para>

      <figure id="fig-flex-dev-actionscript-report">
        <title>Actionscript Documentation Report on Maven Site</title>

        <mediaobject>
          <imageobject>
            <imagedata fileref="figs/web/flex-dev_asdocs-report.png" />
          </imageobject>
        </mediaobject>
      </figure>

      <para>If you need to pass in any configuration options to the
      asdoc-report, you will need add a configuration element to the
      <varname>reportSets</varname> element as shown in <xref
      linkend="ex-flex-dev-config-asdoc-report" />. For more information about
      the available configuration parameters for the
      <varname>asdoc-report,</varname> see the configuration parameters for
      the <varname>asdoc</varname> goal in <xref
      linkend="flex-dev-sect-config-asdoc" />.</para>

      <example id="ex-flex-dev-config-asdoc-report">
        <title>Configuring the asdoc-report</title>

        <programlisting>&lt;reporting&gt;
    &lt;plugins&gt;
      &lt;plugin&gt;
        &lt;groupId&gt;org.sonatype.flexmojos&lt;/groupId&gt;
        &lt;artifactId&gt;flexmojos-maven-plugin&lt;/artifactId&gt;
        &lt;version&gt;${flexmojos.version}&lt;/version&gt;
        &lt;reportSets&gt;
          &lt;reportSet&gt;
            &lt;id&gt;flex-reports&lt;/id&gt;
            &lt;reports&gt;
              &lt;report&gt;asdoc-report&lt;/report&gt;
            &lt;/reports&gt;
            &lt;configuration&gt;
              &lt;windowTitle&gt;My TEST API Doc&lt;/windowTitle&gt;
              &lt;footer&gt;Copyright 2009 Sonatype&lt;/footer&gt;
            &lt;/configuration&gt;
          &lt;/reportSet&gt;
        &lt;/reportSets&gt;
      &lt;/plugin&gt;
    &lt;/plugins&gt;
  &lt;/reporting&gt;
</programlisting>
      </example>
    </section>
  </section>

  <section id="flex-dev-sect-dev">
    <title>Developing and Customizing Flexmojos</title>

    <para>The following sections guide you through some of first steps toward
    customizing or contributing to the Flexmojos project. Flexmojos is more
    than just a tool for people who are interested in compiling Actionscript
    into SWF and SWC artifacts, it is a community of developers. This section
    isn't for everyone, but, if you have an itch to scratch and you wish to
    participate, come on in.</para>

    <section id="flex-dev-sect-get-source">
      <title>Get the Flexmojos Source Code</title>

      <para>Flexmojos is an open source project hosted on the Sonatype Forge,
      and the source code for Flexmojos is stored in the Sonatype Forge
      Subversion repository. You can browse the contents of the Flexmojos
      Subversion repository by opening <ulink
      url="http://svn.sonatype.org/flexmojos/trunk">http://svn.sonatype.org/flexmojos/trunk</ulink>
      in a web browser.</para>

      <figure id="flex-dev-svn-repo">
        <title>Flexmojos Subversion Repository</title>

        <mediaobject>
          <imageobject>
            <imagedata fileref="figs/web/flex-dev-subversion.png" />
          </imageobject>
        </mediaobject>
      </figure>

      <para>If you are interested in participating in the Flexmojos project,
      you will likely want to checkout the current Flexmojos source code to
      your local machine. To checkout the Flexmojos source using Subversion,
      execute the followings command at the command line:</para>

      <screen>$ <command>svn co http://svn.sonatype.org/flexmojos/trunk flexmojos</command>
A flexmojos
...
$ <command>ls</command>
COPYRIGHT               flexmojos-sandbox         pom.xml
flexmojos-archetypes    flexmojos-super-poms      src
flexmojos-maven-plugin  flexmojos-testing
flexmojos-parent        flexmojos-touchstone
</screen>
    </section>
  </section>
</chapter>
