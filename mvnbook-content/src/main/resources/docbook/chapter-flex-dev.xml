<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE chapter PUBLIC "-//OASIS//DTD DocBook XML V4.5//EN"
"http://www.oasis-open.org/docbook/xml/4.5/docbookx.dtd">
<chapter id="flex-dev">
  <title>Développement avec Flexmojos</title>

  <section id="flex-dev-sect-intro">
    <title>Introduction</title>

    <para>Ce chapître propose un apperçu du projet Flexmojos pour les personnes intéressées d'utilisées Maven pour développer des applications Flex ainsi que des librairies.</para>
  </section>

  <section id="flex-dev-sect-config-build">
    <title>Configuration de l'environnement de build pour Flexmojos</title>

    <para>Avant que vous ne tentiez de compiler des libriaries et des appilcations Flex avec Maven, vous devrez réaliser deux tâches de configuration:</para>

    <itemizedlist>
      <listitem>
        <para>Configurer vos paramètres Maven afin de référencer un dépôt qui contienne le framework Flex</para>
      </listitem>

      <listitem>
        <para>Ajouter Flash Player à votre PATH afin de permettre les tests unitaires Flex</para>
      </listitem>

      <listitem>
        <para>(Optionnel) Configurer vos paramètres Maven pour inclure le group de plugin de Sonatype</para>
      </listitem>
    </itemizedlist>

    <section id="flex-dev-sect-referencing-repo-with-flex">
      <title>Faire référence à un dépôt contenant le Framework Flex </title>

      <para>Pour configurer votre environnement Maven pour utiliser Flexmojos, vous avez deux options: vous pouvez faire référence au dếpôt Flexmojos de Sonotype directement dans le fichier 
  <filename>pom.xml</filename>, ou vous pouvez installer Nexus et ajouter le dépôt Sonatype pour Flexmojos en tant que dépôt proxy dans votre propre gestionnaire de dépôts.
  Alors que l'option la plus directe conciste à faire référence directement au dépôt, télécharger et installer Nexus vous procurera le contrôle et la flexibilité dont vous avez besoin pour câcher et gérer les artéfacts générés par vos propres builds.
Si vous être juste intéressé de démarrer rapidement et exécuter Flexmojos, lisez ci-dessous <xref linkend="flex-dev-sect-direct-repo"/> . Si vous êtes intéressés par une solution à long terme qui peut être déployée pour servir de support à une equipe de développement allez à la section 
      <xref linkend="flex-dev-sect-proxy-nexus"/>.</para>

      <para>Si votre organisation utilise déjà la solution Nexus de Sonatype en tant que proxy
      pour les dépôts distants, vous avre probablement un fichier 
      <filename>~/.m2/settings.xml</filename> personalisé qui pointe vers un seul groupe 
      Nexus. 
      Si telle est votre situation, vous devrez ajouter au groupe référencé par votre équipe de développement un dépôt proxy 
      pour le groupe de dépôts de Flexmojos avec l'adresse <ulink url="${flexmojos.repository}">${flexmojos.repository}</ulink>.
      Ajouter un dépôt proxy pour ce groupe distant et ensuite ajouter ce groupe au groupe public de votre installation Nexus, donnera aux clients de l'instance Nexus un accès aux artefacts Sonatype repository.sonatype.org.
    </para>

      <section id="flex-dev-sect-direct-repo">
        <title>Faire référence depuis le POM au dépôt Flexmojos de Sonatype</title>

        <para>Flexmojos depend de quelques artifacts qui ne sont actuellement pas disponible depuis le dépôt central Maven.
Ces artefact sont disponible depuis un dépot hébergé par sonatype. Pour utiliser Flexmojos, vous devrez faire référence à ce dépot depuis le 
        <filename>pom.xml</filename> de votre projet. 
        Pour réaliser ceci, ajoutez l'élément 
        <sgmltag>repositories</sgmltag> indiqué dans <xref linkend="ex-flex-dev-repository"/> au 
        <filename>pom.xml</filename> de votre projet.</para>


        <example id="ex-flex-dev-repository">
          <title>Ajouter une référence au dépôt Flexmojos de Sonatype au sein du POM</title>

          <programlisting>&lt;project&gt;
  &lt;modelVersion&gt;4.0.0&lt;/modelVersion&gt;
  &lt;groupId&gt;test&lt;/groupId&gt;
  &lt;artifactId&gt;test&lt;/artifactId&gt;
  &lt;version&gt;1.0-SNAPSHOT&lt;/version&gt;
  &lt;packaging&gt;pom&lt;/packaging&gt;
  
  &lt;modules&gt;
    &lt;module&gt;swc&lt;/module&gt;
    &lt;module&gt;swf&lt;/module&gt;
    &lt;module&gt;war&lt;/module&gt;
  &lt;/modules&gt;

  <emphasis>&lt;repositories&gt;
    &lt;repository&gt;
      &lt;id&gt;flexmojos&lt;/id&gt;
      &lt;url&gt;${flexmojos.repository}&lt;/url&gt;
    &lt;/repository&gt;
  &lt;/repositories&gt;</emphasis>

&lt;/project&gt;
</programlisting>
        </example>

        <para>Le XML illustré dans <xref linkend="ex-flex-dev-repository"/>, ajoutera ce dépôt  à la liste des dépots que consultera Maven quand il tentera de télécharger les artefacts et les plugins. </para>
      </section>

      <section id="flex-dev-sect-proxy-nexus">
        <title>Proxying Sonatype's Flexmojos Repository with Nexus</title>

        <para>Instead of pointing directly at the Sonatype Flexmojos
        repository, Sonatype recommends that you install a repository manager
        and proxy the Sonatype public repository. When you proxy a remote
        repository with a repository manager such as Nexus, you gain a level
        of control and stability not possible when your build relies directly
        on external resources. In addition to this control and stability, a
        repository manager also provides you with an deployment target for
        binary artifacts generated by your own builds. For instructions on
        downloading, installing, and configuring Nexus, refer to the <ulink
        url="http://www.sonatype.com/books/nexus-book/reference/install.html">Installation
        chapter in Repository Management with Nexus</ulink>. Once Nexus is
        installed and started, complete the following steps to add a proxy
        repository for the Sonatype public repository.</para>

        <para>To add a new proxy repository, click on the
        <guimenuitem>Repositories</guimenuitem> link under
        <guisubmenu>Views/Repositories</guisubmenu> in the
        <guimenu>Nexus</guimenu> menu on the left-hand side of the Nexus user
        interface. Clicking on <guimenuitem>Repositories</guimenuitem> will
        load the <guilabel>Repositories</guilabel> panel. In the
        <guilabel>Repositories</guilabel> panel, click on the
        <guibutton>Add..</guibutton> button and select Proxy Repository as
        shown in <xref linkend="fig-flex-dev-add-proxy-repos" />.</para>

        <figure id="fig-flex-dev-add-proxy-repos">
          <title>Adding a Proxy Repository to Sonatype Nexus</title>

          <mediaobject>
            <imageobject role="web">
              <imagedata fileref="figs/web/flex-dev-nexus-add-proxy.png" />
            </imageobject>

            <imageobject role="print">
              <imagedata align="center"
                         fileref="figs/print/flex-dev-nexus-add-proxy.pdf"
                         scalefit="0" width="100%" />
            </imageobject>
          </mediaobject>
        </figure>

        <para>Once you've created a new Proxy repository, you will need to
        configure it to point to the Sonatype Flexmojos repository. Select the
        new repository, and then select the Configuration tab in the lower
        half of the window. Populate the following field with the values shown
        in <xref linkend="fig-flex-dev-sonatype-public-proxy" />.</para>

        <itemizedlist>
          <listitem>
            <para>Repository ID is "sonatype-flexmojos"</para>
          </listitem>

          <listitem>
            <para>Repository Name is "Sonatype Flexmojos Proxy"</para>
          </listitem>

          <listitem>
            <para>The Remote Storage Location is <ulink
            url="${flexmojos.repository}">${flexmojos.repository}</ulink></para>
          </listitem>
        </itemizedlist>

        <figure id="fig-flex-dev-sonatype-public-proxy">
          <title>Configuring the Sonatype Flexmojos Proxy Repository</title>

          <mediaobject>
            <imageobject role="web">
              <imagedata fileref="figs/web/flex-dev-nexus-sonatype-proxy.png" />
            </imageobject>

            <imageobject role="print">
              <imagedata align="center"
                         fileref="figs/print/flex-dev-nexus-sonatype-proxy.pdf"
                         scalefit="0" width="100%" />
            </imageobject>
          </mediaobject>
        </figure>

        <para>Once you have populated the fields shown in <xref
        linkend="fig-flex-dev-sonatype-public-proxy" /> click the
        <guibutton>Save</guibutton> button to save the proxy repository and
        start proxying the Sonatype Flexmojos repository. Nexus ships with a
        public repository group, which combines several repositories into a
        single point of contact for Maven clients. To complete our setup of
        the new proxy repository, you should add this new proxy repository to
        the Nexus public group. To do this, return to the list of repositories
        which should now be visible in the upper half of the Repositories
        panel as shown in <xref
        linkend="fig-flex-dev-sonatype-public-proxy" />. Click on the Public
        Repositories group and then click on the Configuration tab in the
        lower half of the Repository panel. Clicking the Configuration tab
        will expose the Group configuration form shown in <xref
        linkend="fig-flex-dev-adding-sonatype-to-group" />.</para>

        <figure id="fig-flex-dev-adding-sonatype-to-group">
          <title>Adding the Sonatype Flexmojos Proxy to the Public
          Repositories Group</title>

          <mediaobject>
            <imageobject role="web">
              <imagedata fileref="figs/web/flex-dev-nexus-sonatype-to-group.png" />
            </imageobject>

            <imageobject role="print">
              <imagedata align="center"
                         fileref="figs/print/flex-dev-nexus-sonatype-to-group.pdf"
                         format="PDF" scalefit="0" width="100%" />
            </imageobject>
          </mediaobject>
        </figure>

        <para>To add the <guilabel>Sonatype Public Proxy</guilabel> to the
        <guilabel>Public Repositories</guilabel> group simply drag and drop
        the <guilabel>Sonatype Public Proxy</guilabel> repository from the
        <guilabel>Available Repositories</guilabel> list to the
        <guilabel>Ordered Group Repositories</guilabel> list. Click
        <guibutton>Save</guibutton>, and you have successfully added a proxy
        of the Sonatype Flexmojos repository to your Nexus installation.
        Whenever a client requests an artifact from this repository group, if
        Nexus has not already cached a matching artifact, it will query the
        Sonatype Flexmojos repository at <ulink
        url="${flexmojos.repository}">${flexmojos.repository}</ulink>. Your
        Nexus installation will maintain a local cache of all artifacts
        retrieved from the Sonatype Flexmojos repository. This local cache
        gives you more control and contributes to a more stable build
        environment. If you are setting up a group of developers to rely upon
        artifacts from the Sonatype public repository, you'll have a
        completely self-contained build environment that won't be subject to
        the availability of the Sonatype repository once the necessary
        artifacts have been cached by your Nexus instance.</para>

        <para>The final step is connecting your Maven installation to the
        Nexus instance you just configured. You will need to update your Maven
        Settings to use your Nexus repository group as a mirror for all
        repositories. To do this, you need to put the following XML in your
        <filename>~/.m2/settings.xml</filename> file.</para>

        <example id="ex-flex-dev-settings-local-nexus">
          <title>Settings XML for Local Nexus Instance</title>

          <programlisting>&lt;settings&gt;
  &lt;mirrors&gt;
    &lt;mirror&gt;
      &lt;!--This sends everything else to /public --&gt;
      &lt;id&gt;nexus&lt;/id&gt;
      &lt;mirrorOf&gt;*&lt;/mirrorOf&gt;
      &lt;url&gt;http://localhost:8081/nexus/content/groups/public&lt;/url&gt;
    &lt;/mirror&gt;
  &lt;/mirrors&gt;
  &lt;profiles&gt;
    &lt;profile&gt;
      &lt;id&gt;nexus&lt;/id&gt;
      &lt;!—-Enable snapshots for the built in central repo to direct --&gt;
      &lt;!--all requests to nexus via the mirror --&gt;
      &lt;repositories&gt;
        &lt;repository&gt;
          &lt;id&gt;central&lt;/id&gt;
          &lt;url&gt;http://central&lt;/url&gt;
          &lt;releases&gt;&lt;enabled&gt;true&lt;/enabled&gt;&lt;/releases&gt;
          &lt;snapshots&gt;&lt;enabled&gt;true&lt;/enabled&gt;&lt;/snapshots&gt;
        &lt;/repository&gt;
      &lt;/repositories&gt;
     &lt;pluginRepositories&gt;
        &lt;pluginRepository&gt;
          &lt;id&gt;central&lt;/id&gt;
          &lt;url&gt;http://central&lt;/url&gt;
          &lt;releases&gt;&lt;enabled&gt;true&lt;/enabled&gt;&lt;/releases&gt;
          &lt;snapshots&gt;&lt;enabled&gt;true&lt;/enabled&gt;&lt;/snapshots&gt;
        &lt;/pluginRepository&gt;
      &lt;/pluginRepositories&gt;
    &lt;/profile&gt;
  &lt;/profiles&gt;
  &lt;activeProfiles&gt;
    &lt;!—-make the profile active all the time --&gt;
    &lt;activeProfile&gt;nexus&lt;/activeProfile&gt;
  &lt;/activeProfiles&gt;
&lt;/settings&gt;
</programlisting>
        </example>

        <para>This XML file configures Maven to consult a single public
        repository group for all configured repositories and plugin
        repositories. It is a simple way to guarantee that every request for
        an artifact is made through your Nexus installation.</para>
      </section>
    </section>

    <section id="flex-dev-sect-configuring-unit-tests">
      <title>Configuring Environment to Support Flex Unit Tests</title>

      <para>Flexmojos expects to be able to launch the stand-alone Flash Play
      to execute unit tests. In order for this to work, you will need to add
      the stand-alone Flash Player to your PATH, or you will need to pass the
      location of the Flash Player executable to your build using the
      <varname>-DflashPlayer.command</varname> options. When executing a unit
      test, Flex Mojos expects to launch the following platform-specific
      executables for the stand-alone Flash Player:</para>

      <variablelist>
        <varlistentry>
          <term>Microsoft Windows</term>

          <listitem>
            <para>FlexMojos will attempt to launch the
            <filename>FlashPlayer.exe</filename> binary. To support execution
            of unit tests, add the directory containing
            <filename>FlashPlayer.exe</filename> to your PATH or pass in the
            location of the <filename>FlashPlayer.exe</filename> binary to
            Maven using the
            <varname>-DflashPlayer.command=${filepath}</varname> command-line
            option.</para>
          </listitem>
        </varlistentry>

        <varlistentry>
          <term>Macintosh OSX</term>

          <listitem>
            <para>FlexMojos will attempt to launch the "Flash Player"
            application. To support the execution of unit tests, add the
            directory containing "Flash Player" to your PATH or pass the path
            to the executable to Maven using the
            <varname>-DflashPlayer.command=${filepath}</varname> command-line
            option.</para>
          </listitem>
        </varlistentry>

        <varlistentry>
          <term>Unix (Linux, Solaris, etc.)</term>

          <listitem>
            <para>FlexMojos will attempt to launch the
            <filename>flashplayer</filename> executable. To support the
            execution of unit tests, add the directory containing
            <filename>flashplayer</filename> to your PATH or pass the path to
            the executable to Maven using the
            <varname>-DflashPlayer.command=${filepath}</varname> command-line
            option.</para>
          </listitem>
        </varlistentry>
      </variablelist>

      <note>
        <para>On a Linux machine, you will need to have X virtual framebuffer
        (Xvfb) installed to run unit tests in a headless build. For more
        information about Xvfb, <ulink
        url="http://en.wikipedia.org/wiki/Xvfb">click here</ulink>.</para>
      </note>

      <para>If you have been developing Flash Applications with Adobe Flash
      CS4 or Adobe Flex Builder or if you have been viewing flash content in a
      browser, you probably have the Flash Player installed somewhere on your
      workstation. While it is possible to configure Maven to use one of these
      players for Flex unit tests, you'll want to make sure that you are
      running the debug version of the Flash Player. To minimize the potential
      for incompatibility, you should download one of the Flash Player's
      listed below and install it on your local workstation. To download the
      standalone Flash Player for you environment:</para>

      <itemizedlist>
        <listitem>
          <para>Windows: <ulink
          url="http://download.macromedia.com/pub/flashplayer/updaters/10/flashplayer_10_sa_debug.exe">http://download.macromedia.com/pub/flashplayer/updaters/10/flashplayer_10_sa_debug.exe</ulink></para>
        </listitem>

        <listitem>
          <para>Mac OSX: <ulink
          url="http://download.macromedia.com/pub/flashplayer/updaters/10/flashplayer_10_sa_debug.app.zip">http://download.macromedia.com/pub/flashplayer/updaters/10/flashplayer_10_sa_debug.app.zip</ulink></para>
        </listitem>

        <listitem>
          <para>Linux: <ulink
          url="http://download.macromedia.com/pub/flashplayer/updaters/10/flash_player_10_linux_dev.tar.gz">http://download.macromedia.com/pub/flashplayer/updaters/10/flash_player_10_linux_dev.tar.gz</ulink></para>
        </listitem>
      </itemizedlist>

      <para>To install this player and add it to your PATH on an OSX machine,
      run the following commands:</para>

      <screen>$ <command>wget http://download.macromedia.com/pub/flashplayer/updaters/10/\
flashplayer_10_sa_debug.app.zip</command>
$ <command>unzip flashplayer_10_sa_debug.app.zip</command>
$ <command>sudo cp -r Flash\ Player.app /Applications/</command>
$ <command>export PATH=/Applications/Flash\ Player.app/Contents/MacOS:${PATH}</command></screen>

      <para>Instead of adding the path for the Flash Player to your PATH on
      the command-line, you should configure your environment's profile. On
      OSX, tyou would add the last export command to you
      <filename>~/.bash_profile</filename>.</para>
    </section>

    <section id="flex-dev-sect-plugin-group">
      <title>Adding FlexMojos to Your Maven Settings' Plugin Groups</title>

      <para>If you need to run FlexMojos goals from the command-line, it will
      be more convenient if you add the Sonatype Plugin groups to your Maven
      Settings. To do this, open up <filename>~/.m2/settings.xml</filename>
      and add the following plugin groups:</para>

      <example>
        <title>Adding Sonatype Plugins to Maven Settings</title>

        <programlisting>&lt;pluginGroups&gt;
  &lt;pluginGroup&gt;com.sonatype.maven.plugins&lt;/pluginGroup&gt;
  &lt;pluginGroup&gt;org.sonatype.plugins&lt;/pluginGroup&gt;
&lt;/pluginGroups&gt;
</programlisting>
      </example>

      <para>Once you've added these plugin groups to your Maven Settings you
      can invoke a FlexMojos goal using the plugin prefix
      <varname>flexmojos</varname>. Without this configuration, calling the
      <varname>flexbuilder</varname> goal would involve the following
      command-line:</para>

      <screen>$ <command>mvn org.sonatype.flexmojos:flexmojos-maven-plugin:3.2.0:flexbuilder</command></screen>

      <para>With the org.sonatype.plugins group in your Maven settings, the
      same goal can be invoked with:</para>

      <screen>$ <command>mvn flexmojos:flexbuilder</command></screen>
    </section>
  </section>

  <section id="flex-dev-sect-creating-with-archetype">
    <title>Creation d'un projet Flex Mojos à partir d'un archétype</title>

    <para>Flexmojos a un ensemble d'archétypes qui peuvent être utilisés rapidement pour creer 
    un nouveau projet Flex. Les archétypes ci-dessous sont tous dans le groupe 
    <package>org.sonatype.flexmojos</package> avec version 
    <varname>${flexmojos.version}</varname>:</para>

    <variablelist>
      <varlistentry>
        <term>flexmojos-archetypes-library</term>

        <listitem>
          <para>Crée un simple projet de librairie Flex qui crée un artéfact
          SWC</para>
        </listitem>
      </varlistentry>

      <varlistentry>
        <term>flexmojos-archetypes-application</term>

        <listitem>
          <para>Crée un simple projet Flex qui crée un artéfact SWF</para>
        </listitem>
      </varlistentry>

      <varlistentry>
        <term>flexmojos-archetypes-modular-webapp</term>

        <listitem>
          <para>Crée un projet multi-modules qui présente un projet qui 
          produit un SWC qui est consommé par un projet qui produit un SWF
          lequel est présenté au final dans un projet qui génère un 
          WAR</para>
        </listitem>
      </varlistentry>
    </variablelist>

    <section id="flex-dev-sect-library-archetype">
      <title>Création d'une librairie Flex</title>

      <para>Pour créer un projet de librairie Flex, il suffit d'exécuter la commande en ligne
      suivante :</para>

      <screen>$ <command>mvn archetype:generate \
    -DarchetypeRepository=http://repository.sonatype.org/content/groups/public \
    -DarchetypeGroupId=org.sonatype.flexmojos \
    -DarchetypeArtifactId=flexmojos-archetypes-library \
    -DarchetypeVersion=${flexmojos.version}</command>
[INFO] Scanning for projects...
[INFO] Searching repository for plugin with prefix: 'archetype'.
[INFO] com.sonatype.maven.plugins: checking for updates from central
...
[INFO] [archetype:generate]
[INFO] Generating project in Interactive mode
[INFO] Archetype defined by properties
...
Define value for groupId: : <command>org.sonatype.test</command>
Define value for artifactId: : <command>sample-library</command>
Define value for version:  1.0-SNAPSHOT: : <command>1.0-SNAPSHOT</command>
Define value for package:  org.sonatype.test: : <command>org.sonatype.test</command> 
Confirm properties configuration:
groupId: org.sonatype.test
artifactId: sample-library
version: 1.0-SNAPSHOT
package: org.sonatype.test
 Y: : <command>Y</command>[INFO] Parameter: groupId, Value: org.sonatype.test
[INFO] Parameter: packageName, Value: org.sonatype.test
[INFO] Parameter: basedir, Value: /Users/Tim
[INFO] Parameter: package, Value: org.sonatype.test
[INFO] Parameter: version, Value: 1.0-SNAPSHOT
[INFO] Parameter: artifactId, Value: sample-library
[INFO] ------------------------------------------------------------------------
[INFO] BUILD SUCCESSFUL
</screen>

      <para>En regardant dans le répertoire sample-library/ vous verrez
      que le projet présente une arborescence comme dans la figure <xref
      linkend="fig-flex-dev-library-archetype-fs" />.</para>

      <figure id="fig-flex-dev-library-archetype-fs">
        <title>Arborescence de l'archétype Librairie Flexmojo</title>

        <mediaobject>
          <imageobject role="web">
            <imagedata fileref="figs/web/flex-dev-arche-simple-lib-fs.png" />
          </imageobject>

          <imageobject role="print">
            <imagedata align="center"
                       fileref="figs/print/flex-dev-arche-simple-lib-fs.pdf"
                       scalefit="0" width="100%" />
          </imageobject>
        </mediaobject>
      </figure>

      <para>Le produit du seul archétype Lirairie Flex contient 
      trois fichiers: un POM, un fichier source et un fichier de test unitaire. Regardons chacun de ces
      trois fichiers. Premièrement, le Project Object Model (POM).</para>

      <example id="fig-flex-dev-simple-lib-pom">
        <title>POM d'un archétype pour projet de librairie Flex</title>

        <programlisting>&lt;project xmlns="http://maven.apache.org/POM/4.0.0" 
         xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
         xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 
                             http://maven.apache.org/maven-v4_0_0.xsd"&gt;

  &lt;modelVersion&gt;4.0.0&lt;/modelVersion&gt;

  &lt;groupId&gt;org.sonatype.test&lt;/groupId&gt;
  &lt;artifactId&gt;sample-library&lt;/artifactId&gt;
  &lt;version&gt;1.0-SNAPSHOT&lt;/version&gt;
  &lt;packaging&gt;swc&lt;/packaging&gt;

  &lt;name&gt;test Flex&lt;/name&gt;

  &lt;build&gt;
    &lt;sourceDirectory&gt;src/main/flex&lt;/sourceDirectory&gt;
    &lt;testSourceDirectory&gt;src/test/flex&lt;/testSourceDirectory&gt;
    &lt;plugins&gt;
      &lt;plugin&gt;
        &lt;groupId&gt;org.sonatype.flexmojos&lt;/groupId&gt;
        &lt;artifactId&gt;flexmojos-maven-plugin&lt;/artifactId&gt;
        &lt;version&gt;${flexmojos.version}&lt;/version&gt;
        &lt;extensions&gt;true&lt;/extensions&gt;
      &lt;/plugin&gt;
    &lt;/plugins&gt;
  &lt;/build&gt;

  &lt;dependencies&gt;
    &lt;dependency&gt;
      &lt;groupId&gt;com.adobe.flex.framework&lt;/groupId&gt;
      &lt;artifactId&gt;flex-framework&lt;/artifactId&gt;
      &lt;version&gt;3.2.0.3958&lt;/version&gt;
      &lt;type&gt;pom&lt;/type&gt;
    &lt;/dependency&gt;

    &lt;!-- flexmojos Unit testing support --&gt;
    &lt;dependency&gt;
      &lt;groupId&gt;org.sonatype.flexmojos&lt;/groupId&gt;
      &lt;artifactId&gt;flexmojos-unittest-support&lt;/artifactId&gt;
      &lt;version&gt;${flexmojos.version}&lt;/version&gt;
      &lt;type&gt;swc&lt;/type&gt;
      &lt;scope&gt;test&lt;/scope&gt;
    &lt;/dependency&gt;
  &lt;/dependencies&gt;

&lt;/project&gt;</programlisting>
      </example>

      <para>L'<xref linkend="fig-flex-dev-simple-lib-pom" /> est très simple, le 
      point clef de ce POM c'est la configuration de <varname>flexmojos-maven-plugin</varname>
       qui positionne <varname>extensions</varname> à
      <varname>true</varname>. Cette configuration personalise le cycle pour le pacjaging 
      <varname>swc</varname> qui est défini dans le plugin
      <varname>flexmojos-maven-plugin</varname>. L'archétype inclut alors
      la dépendance <varname>flex-framework</varname> ainsi que la dépence de scope test
      <varname>flexmojos-unittest-support</varname>.
      La dépendance <varname>flex-framework</varname> est un POM qui contient
      les références vers les librairies libraries et les resources requises pour compiler une application Flex.</para>

      <para>Dans l'<xref linkend="fig-flex-dev-simple-lib-pom" />, le packaging
      est primordial. Le type de packaging d'un POM controle le cycle de vie qui est utilisé
      pour produire le résultat de build. La valeur <varname>swc</varname> dans 
       l'élément packaging est l'indice pour rechercher les personalisations liées aux cycle de vie spécifique Flex
      qui sont fournies par le plugin 
      <varname>flexmojos-maven-plugin</varname>. L'autre partie importante de ce
      POM est lélément build qui précise la localisation du code source Flex
      ainsi que des tests unitaires. Maintenant, jetons un coup d'oeil à 
      <xref linkend="ex-flex-dev-lib-as" /> qui contient l'exemple 
      d'Actionscript créé par l'archetype.</para>

      <example id="ex-flex-dev-lib-as">
        <title>App, l'application exemple de l'archétype pour Librairie Flex</title>

        <programlisting>package org.sonatype.test {
  public class App {
    public static function greeting(name:String):String {
      return "Hello, " + name;
    }
  }
}
</programlisting>
      </example>

      <para>Bien que ce code soit très simple, il apporte un exemple et un pointeur rapide : "Placer le reste du code ici". Bien qu'il puisse sembler idiot
      de tester ce code aussi simple, un exemple de test nommé
      <filename>TestApp.as</filename> est proposé dans le répertoire
      <filename>src/test/flex</filename>. Ce test est illustré dans 
      l'<xref linkend="ex-flex-dev-test-app" />.</para>

      <example id="ex-flex-dev-test-app">
        <title>Test unitaire de la classe App pour l'archetype de Librairie Flex</title>

        <programlisting>package org.sonatype.test {

  import flexunit.framework.TestCase;

  public class TestApp extends TestCase {

    /**
     * Tests our greeting() method
     */
    public function testGreeting():void {
      var name:String = "Buck Rogers";
      var expectedGreeting:String = "Hello, Buck Rogers";

      var result:String = App.greeting(name);
      assertEquals("Greeting is incorrect", expectedGreeting, result);
    }
  }
}
</programlisting>
      </example>

      <para>Pour exécuter ce build, allez au répertoire du projet sample-library et lancer la commande : 
      run mvn install.</para>

      <screen>$ <command>mvn install</command> 
[INFO] Scanning for projects...
[INFO] ------------------------------------------------------------------------
[INFO] Building sample-library Flex
[INFO]    task-segment: [install]
[INFO] ------------------------------------------------------------------------
[INFO] [resources:resources]
[INFO] [flexmojos:compile-swc]
[INFO] flexmojos ${flexmojos.version} - GNU GPL License (NO WARRANTY) - \
See COPYRIGHT file
[WARNING] Nothing expecified to include.  Assuming source and resources folders.
[INFO] Flex compiler configurations:
-compiler.headless-server=false 
-compiler.keep-all-type-selectors=false 
-compiler.keep-generated-actionscript=false 
-compiler.library-path ~/.m2/repository/com/adobe/flex/framework/flex/\
3.2.0.3958...
-compiler.namespaces.namespace http://www.adobe.com/2006/mxml 
        target/classes/configs/mxml-manifest.xml 
-compiler.optimize=true 
-compiler.source-path src/main/flex 
...
[INFO] [resources:testResources]
[WARNING] Using platform encoding (MacRoman actually) to copy filtered \
        resources, i.e.  build is platform dependent!
[INFO] skip non existing resourceDirectory src/test/resources
[INFO] [flexmojos:test-compile]
[INFO] flexmojos ${flexmojos.version} - GNU GPL License (NO WARRANTY) - \
See COPYRIGHT file
[INFO] Flex compiler configurations:
-compiler.include-libraries ~/.m2/repository/org/sonatype/flexmojos/\
        flexmojos-unittest-support...
-compiler.keep-generated-actionscript=false 
-compiler.library-path ~/.m2/repository/com/adobe/flex/framework/flex
        3.2.0.3958/flex-3.2.0.... 
-compiler.optimize=true 
-compiler.source-path src/main/flex target/test-classes src/test/flex 
-compiler.strict=true 
-target-player 9.0.0 
-use-network=true 
-verify-digests=true -load-config= 
[INFO] Already trust on target/test-classes/TestRunner.swf
[INFO] [flexmojos:test-run]
[INFO] flexmojos ${flexmojos.version} - GNU GPL License (NO WARRANTY) - \
See COPYRIGHT file
[INFO] flexunit setup args: null
[INFO] ------------------------------------------------------------------------
[INFO] Tests run: 1, Failures: 0, Errors: 0, Time Elpased: 0 sec
[INFO] [install:install]
</screen>

      <note>
        <para>Pour pouvoir exécuter les tests unitaires Flex il vous faudra  configurer votre variable d'enrironnement PATH
        afin d'inclure le lecteur Flash Player. Pour plus d'information concernant  la configuration de FlexMojos pour les tests unitiares, se référer à la <xref
        linkend="flex-dev-sect-configuring-unit-tests" />.</para>
      </note>

      <para>Quand vous exécuter la commande <command>mvn install</command> pour ce projet, vous
      pouvez noter dans l'output que Maven et le plugin Flexmojos prennent en charge
      la gestion de toutes les librairies et dépendances pour le compilateur Flex. De la même façon que Maven est excellent pour aider les développeurs Java à gérer le contenu d'un classpath Java, Maven peut aider les développeurs Flex a gérer la complexité de génération des paths. Vous avez peut-être été surpris quand votre projet Flexmojos a démarré un navigateur web ou un lecteur Flash Player et l'a utilisé pour exécuter l'application TestApp construit à partir de votre code source.</para>
    </section>

    <section id="flex-dev-sect-application-archetype">
      <title>Création d'une application Flex</title>

      <para>Pour créer une application Flex à partir d'un archétype Maven, lancer la 
       commande suivante :</para>

      <screen>$ <command>mvn archetype:generate \
    -DarchetypeRepository=http://repository.sonatype.org/content/groups/public \
    -DarchetypeGroupId=org.sonatype.flexmojos \
    -DarchetypeArtifactId=flexmojos-archetypes-application \
    -DarchetypeVersion=${flexmojos.version}</command>
[INFO] Scanning for projects...
[INFO] Searching repository for plugin with prefix: 'archetype'.
[INFO] com.sonatype.maven.plugins: checking for updates from central
...
[INFO] [archetype:generate]
[INFO] Generating project in Interactive mode
[INFO] Archetype defined by properties
...
Define value for groupId: : <command>org.sonatype.test</command>
Define value for artifactId: : <command>sample-application</command>
Define value for version:  1.0-SNAPSHOT: : <command>1.0-SNAPSHOT</command>
Define value for package:  org.sonatype.test: : <command>org.sonatype.test</command> 
Confirm properties configuration:
groupId: org.sonatype.test
artifactId: sample-library
version: 1.0-SNAPSHOT
package: org.sonatype.test
 Y: : <command>Y</command>
[INFO] Parameter: groupId, Value: org.sonatype.test
[INFO] Parameter: packageName, Value: org.sonatype.test
[INFO] Parameter: basedir, Value: /Users/Tim/flex-sample
[INFO] Parameter: package, Value: org.sonatype.test
[INFO] Parameter: version, Value: 1.0-SNAPSHOT
[INFO] Parameter: artifactId, Value: sample-application
[INFO] BUILD SUCCESSFUL

</screen>

      <para>Si vous regerdez dans le répertoire sample-application/ vous verrez l'arborescence
      de fichiers illustrée dans la <xref linkend="fig-flex-dev-dir-app-fs" />.</para>

      <figure id="fig-flex-dev-dir-app-fs">
        <title>Structure de fichiers issu de l'archétype pour application Flex</title>

        <mediaobject>
          <imageobject role="web">
            <imagedata fileref="figs/web/flex-dev-arche-simple-app-fs.png" />
          </imageobject>

          <imageobject role="print">
            <imagedata align="center"
                       fileref="figs/print/flex-dev-arche-simple-app-fs.pdf"
                       scalefit="0" width="100%" />
          </imageobject>
        </mediaobject>
      </figure>

      <para>La génération d'une application Flex via l'archétype produit le POM suivant.</para>

      <example id="ex-flex-dev-app-pom">
        <title>POM généré par l'archétype Flex Application </title>

        <programlisting>&lt;project xmlns="http://maven.apache.org/POM/4.0.0" 
         xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" 
         xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 
                             http://maven.apache.org/maven-v4_0_0.xsd"&gt;

  &lt;modelVersion&gt;4.0.0&lt;/modelVersion&gt;

  &lt;groupId&gt;org.sonatype.test&lt;/groupId&gt;
  &lt;artifactId&gt;sample-application&lt;/artifactId&gt;
  &lt;version&gt;1.0-SNAPSHOT&lt;/version&gt;
  &lt;packaging&gt;swf&lt;/packaging&gt;

  &lt;name&gt;sample-application Flex&lt;/name&gt;

  &lt;build&gt;
    &lt;sourceDirectory&gt;src/main/flex&lt;/sourceDirectory&gt;
    &lt;testSourceDirectory&gt;src/test/flex&lt;/testSourceDirectory&gt;
    &lt;plugins&gt;
      &lt;plugin&gt;
        &lt;groupId&gt;org.sonatype.flexmojos&lt;/groupId&gt;
        &lt;artifactId&gt;flexmojos-maven-plugin&lt;/artifactId&gt;
        &lt;version&gt;${flexmojos.version}&lt;/version&gt;
        &lt;extensions&gt;true&lt;/extensions&gt;
      &lt;/plugin&gt;
    &lt;/plugins&gt;
  &lt;/build&gt;

  &lt;dependencies&gt;
    &lt;dependency&gt;
      &lt;groupId&gt;com.adobe.flex.framework&lt;/groupId&gt;
      &lt;artifactId&gt;flex-framework&lt;/artifactId&gt;
      &lt;version&gt;3.2.0.3958&lt;/version&gt;
      &lt;type&gt;pom&lt;/type&gt;
    &lt;/dependency&gt;

    &lt;!-- flexmojos Unit testing support --&gt;
    &lt;dependency&gt;
      &lt;groupId&gt;org.sonatype.flexmojos&lt;/groupId&gt;
      &lt;artifactId&gt;flexmojos-unittest-support&lt;/artifactId&gt;
      &lt;version&gt;${flexmojos.version}&lt;/version&gt;
      &lt;type&gt;swc&lt;/type&gt;
      &lt;scope&gt;test&lt;/scope&gt;
    &lt;/dependency&gt;
  &lt;/dependencies&gt;

&lt;/project&gt;
</programlisting>
      </example>

      <para>La différence entre l'<xref linkend="ex-flex-dev-app-pom" /> et 
      l'<xref linkend="fig-flex-dev-simple-lib-pom" /> se trouve dans l'élément de 
      <varname>packaging</varname> : <varname>swf</varname> à la place de 
      <varname>swc</varname>. En positionnant le packaging à
      <varname>swf</varname>, le projet produira une application Flex, à savoir 
      <filename>target/sample-application-1.0-SNAPSHOT.swf</filename>. L'application 
	exemple produit par cet archétype affichera le texte "Hello
      World". Le fichier source <filename>Main.mxml</filename> se trouve dans 
      <filename>src/main/flex</filename>.</para>

      <example>
        <title>Application exemple Main.mxml</title>

        <programlisting>&lt;mx:Application xmlns:mx="http://www.adobe.com/2006/mxml" layout="absolute"&gt;
        &lt;mx:Text text="Hello World!"/&gt;
&lt;/mx:Application&gt;
</programlisting>
      </example>

      <para>L'archétype produit également un test unitaire flexUnit simple qui ne fait rien d'autre que d'afficher un message de trace. 
	l'exemple de test unitaire se trouve dans 
      <filename>src/test/flex/org/sonatype/test</filename>.</para>

      <example>
        <title>test unitaire de Main.mxml</title>

        <programlisting>package org.sonatype.test 
{

        import flexunit.framework.TestCase;
        import Main;

        public class TestApp extends TestCase 
        {

                public function testNothing():void 
                {
                        //TODO un implemented
                        trace("Hello test"); 
                }
        }
}
</programlisting>
      </example>
    </section>

    <section id="flex-dev-sect-multimodule-archetype">
      <title>Creating d'un projet multi-modules : application web avec dépendance Flex</title>

      <para>La ligne de commande suivante crée un projet multi-modules contenant un projet de librairie Flex
 référencée par une application Flex qui elle-même est référencée par une application web : </para>

      <screen>$ <command>mvn archetype:generate \
    -DarchetypeRepository=http://repository.sonatype.org/content/groups/public \
    -DarchetypeGroupId=org.sonatype.flexmojos \
    -DarchetypeArtifactId=flexmojos-archetypes-modular-webapp \
    -DarchetypeVersion=${flexmojos.version}</command>
[INFO] Scanning for projects...
[INFO] Searching repository for plugin with prefix: 'archetype'.
[INFO] com.sonatype.maven.plugins: checking for updates from central
...
[INFO] [archetype:generate]
[INFO] Generating project in Interactive mode
[INFO] Archetype defined by properties
...
Define value for groupId: : <command>org.sonatype.test</command>
Define value for artifactId: : <command>sample-multimodule</command>
Define value for version:  1.0-SNAPSHOT: : <command>1.0-SNAPSHOT</command>
Define value for package:  org.sonatype.test: : <command>org.sonatype.test</command> 
Confirm properties configuration:
groupId: org.sonatype.test
artifactId: sample-library
version: 1.0-SNAPSHOT
package: org.sonatype.test
 Y: : <command>Y</command>
[INFO] Parameter: groupId, Value: org.sonatype.test
[INFO] Parameter: packageName, Value: org.sonatype.test
[INFO] Parameter: basedir, Value: /Users/Tim
[INFO] Parameter: package, Value: org.sonatype.test
[INFO] Parameter: version, Value: 1.0-SNAPSHOT
[INFO] Parameter: artifactId, Value: sample-multimodule
[INFO] ------------------------------------------------------------------------
[INFO] BUILD SUCCESSFUL
</screen>

      <para>Si vous regardez dans le répertoire <filename>sample-multimodule/</filename>, 
	vous verrez une arborescence qui contient trois projets
       swc, swf et war.</para>

      <figure id="fig-flex-dev-multimodule-archetype-fs">
        <title>Arborescence de fichiers issu de l'archétype Multi-modules Flex</title>

        <mediaobject>
          <imageobject role="web">
            <imagedata fileref="figs/web/flex-dev-arche-multimodule-fs.png" />
          </imageobject>

          <imageobject role="print">
            <imagedata align="center"
                       fileref="figs/print/flex-dev-arche-multimodule-fs.pdf"
                       scalefit="0" width="100%" />
          </imageobject>
        </mediaobject>
      </figure>

      <para>Le POM parent du projet multi-modules est simple et affiché ci-dessous.
      Il est constitué de références aux modules swc, swf et war.</para>

      <example>
        <title>POM parent produit par l'archétype Multi-modules Flex</title>

        <programlisting>&lt;project xmlns="http://maven.apache.org/POM/4.0.0" 
         xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
 xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 
                     http://maven.apache.org/maven-v4_0_0.xsd"&gt;
  &lt;modelVersion&gt;4.0.0&lt;/modelVersion&gt;
  &lt;groupId&gt;org.sonatype.test&lt;/groupId&gt;
  &lt;artifactId&gt;sample-multimodule&lt;/artifactId&gt;
  &lt;version&gt;1.0-SNAPSHOT&lt;/version&gt;
  &lt;packaging&gt;pom&lt;/packaging&gt;
  
  &lt;modules&gt;
    &lt;module&gt;swc&lt;/module&gt;
    &lt;module&gt;swf&lt;/module&gt;
    &lt;module&gt;war&lt;/module&gt;
  &lt;/modules&gt;
&lt;/project&gt;
</programlisting>
      </example>

      <para>Le projet swc a un POM simple qui ressemble au POM illustré dans 
      l'<xref linkend="fig-flex-dev-simple-lib-pom" />. Notez que
      l'<varname>artifactId</varname> dans ce POM ne reflète pas le nom de 
      module mais est <varname>swc-swc</varname>.</para>

      <example>
        <title>POM du module swc</title>

        <programlisting>&lt;project&gt;

  &lt;modelVersion&gt;4.0.0&lt;/modelVersion&gt;

  &lt;parent&gt;
    &lt;groupId&gt;org.sonatype.test&lt;/groupId&gt;
    &lt;artifactId&gt;sample-multimodule&lt;/artifactId&gt;
    &lt;version&gt;1.0-SNAPSHOT&lt;/version&gt;
  &lt;/parent&gt;

  &lt;groupId&gt;org.sonatype.test&lt;/groupId&gt;
  &lt;artifactId&gt;swc-swc&lt;/artifactId&gt;
  &lt;version&gt;1.0-SNAPSHOT&lt;/version&gt;
  &lt;packaging&gt;swc&lt;/packaging&gt;
  &lt;name&gt;swc Library&lt;/name&gt;
  &lt;build&gt;
    &lt;sourceDirectory&gt;src/main/flex&lt;/sourceDirectory&gt;
    &lt;testSourceDirectory&gt;src/test/flex&lt;/testSourceDirectory&gt;
    &lt;plugins&gt;
      &lt;plugin&gt;
        &lt;groupId&gt;org.sonatype.flexmojos&lt;/groupId&gt;
        &lt;artifactId&gt;flexmojos-maven-plugin&lt;/artifactId&gt;
        &lt;version&gt;${flexmojos.version}&lt;/version&gt;
        &lt;extensions&gt;true&lt;/extensions&gt;
        &lt;configuration&gt;
          &lt;locales&gt;
            &lt;locale&gt;en_US&lt;/locale&gt;
          &lt;/locales&gt;
        &lt;/configuration&gt;
      &lt;/plugin&gt;
    &lt;/plugins&gt;
  &lt;/build&gt;

  &lt;dependencies&gt;
    &lt;dependency&gt;
      &lt;groupId&gt;com.adobe.flex.framework&lt;/groupId&gt;
      &lt;artifactId&gt;flex-framework&lt;/artifactId&gt;
      &lt;version&gt;3.2.0.3958&lt;/version&gt;
      &lt;type&gt;pom&lt;/type&gt;
    &lt;/dependency&gt;

    &lt;!-- flexmojos Unit testing support --&gt;
    &lt;dependency&gt;
      &lt;groupId&gt;org.sonatype.flexmojos&lt;/groupId&gt;
      &lt;artifactId&gt;flexmojos-unittest-support&lt;/artifactId&gt;
      &lt;version&gt;${flexmojos.version}&lt;/version&gt;
      &lt;type&gt;swc&lt;/type&gt;
      &lt;scope&gt;test&lt;/scope&gt;
    &lt;/dependency&gt;
  &lt;/dependencies&gt;

&lt;/project&gt;
</programlisting>
      </example>

      <para>Le POM du module swf ressemble au POM de l'<xref
      linkend="ex-flex-dev-app-pom" /> en ajoutant une dépendance à l'artéfact
      <varname>swc-swc</varname>. Notez que
      l'<varname>artifactId</varname> dans ce POM ne reflète pas le nom du répertoire qui contient le 
      module ; l'artifactId dans le POM ci-dessous est 
	<varname>swf-swf</varname>.</para>

      <example id="ex-flex-swf-module-pom">
        <title>MOM du module swf</title>

        <programlisting>&lt;project&gt;

  &lt;modelVersion&gt;4.0.0&lt;/modelVersion&gt;

  &lt;parent&gt;
    &lt;groupId&gt;org.sonatype.test&lt;/groupId&gt;
    &lt;artifactId&gt;sample-multimodule&lt;/artifactId&gt;
    &lt;version&gt;1.0-SNAPSHOT&lt;/version&gt;
  &lt;/parent&gt;

  &lt;groupId&gt;org.sonatype.test&lt;/groupId&gt;

  &lt;artifactId&gt;swf-swf&lt;/artifactId&gt;
  &lt;version&gt;1.0-SNAPSHOT&lt;/version&gt;
  &lt;packaging&gt;swf&lt;/packaging&gt;
  &lt;name&gt;swf Application&lt;/name&gt;

  &lt;build&gt;
    &lt;sourceDirectory&gt;src/main/flex&lt;/sourceDirectory&gt;
    &lt;testSourceDirectory&gt;src/test/flex&lt;/testSourceDirectory&gt;
    &lt;plugins&gt;
      &lt;plugin&gt;
        &lt;groupId&gt;org.sonatype.flexmojos&lt;/groupId&gt;
        &lt;artifactId&gt;flexmojos-maven-plugin&lt;/artifactId&gt;
        &lt;version&gt;${flexmojos.version}&lt;/version&gt;
        &lt;extensions&gt;true&lt;/extensions&gt;
        &lt;configuration&gt;
          &lt;locales&gt;
            &lt;locale&gt;en_US&lt;/locale&gt;
          &lt;/locales&gt;
        &lt;/configuration&gt;
      &lt;/plugin&gt;
    &lt;/plugins&gt;
  &lt;/build&gt;

  &lt;dependencies&gt;
    &lt;dependency&gt;
      &lt;groupId&gt;com.adobe.flex.framework&lt;/groupId&gt;
      &lt;artifactId&gt;flex-framework&lt;/artifactId&gt;
      &lt;version&gt;3.2.0.3958&lt;/version&gt;
      &lt;type&gt;pom&lt;/type&gt;
    &lt;/dependency&gt;

    &lt;!-- flexmojos Unit testing support --&gt;
    &lt;dependency&gt;
      &lt;groupId&gt;org.sonatype.flexmojos&lt;/groupId&gt;
      &lt;artifactId&gt;flexmojos-unittest-support&lt;/artifactId&gt;
      &lt;version&gt;${flexmojos.version}&lt;/version&gt;
      &lt;type&gt;swc&lt;/type&gt;
      &lt;scope&gt;test&lt;/scope&gt;
    &lt;/dependency&gt;

    &lt;dependency&gt;
      &lt;groupId&gt;org.sonatype.test&lt;/groupId&gt;
      &lt;artifactId&gt;swf-swc&lt;/artifactId&gt;
      &lt;version&gt;1.0-SNAPSHOT&lt;/version&gt;
      &lt;type&gt;swc&lt;/type&gt;
    &lt;/dependency&gt;
  &lt;/dependencies&gt;
&lt;/project&gt;
</programlisting>
      </example>

      <warning>
        <para>Dans l'<xref linkend="ex-flex-swf-module-pom" />, la dépendance vers
        "swf-swc" doit être changé pour "swc-swc". C'est un bug dans l'archétype Multi-module Flex 
	qui est présent dans la version 
        ${flexmojos.version} de FlexMojos. Il sera corrigé dans la version FlexMojos 3.2.0.</para>
      </warning>

      <para>Quand vous déclarer une dépendance vers un SWC, vous devez préciser le type de 
      dépendencé afin que Maven puisse localiser les artéfacts adéquats dans le dépot distant ou local. 
      Dans ce cas, projet
      <varname>swf-swf</varname> dépend d'un SWC qui est généré
      par un projet <varname>swc-swc</varname>. Quand vous ajoutez
      la dépendence au projet <varname>swf-swf</varname>, le plugin FlexMojos
      ajoutera le fichier SWC approprié dans le chemin des bibliothèques de compilation Flex.</para>

      <para>Maintenant, jetez un coup d'oeil dans le POM simple du module war.</para>

      <example id="ex-flex-war-module-pom">
        <title>war module POM</title>

        <programlisting>&lt;project&gt;
  &lt;modelVersion&gt;4.0.0&lt;/modelVersion&gt;
  &lt;parent&gt;
    &lt;artifactId&gt;sample-multimodule&lt;/artifactId&gt;
    &lt;groupId&gt;org.sonatype.test&lt;/groupId&gt;
    &lt;version&gt;1.0-SNAPSHOT&lt;/version&gt;
  &lt;/parent&gt;
  &lt;groupId&gt;org.sonatype.test&lt;/groupId&gt;
  &lt;artifactId&gt;war-war&lt;/artifactId&gt;
  &lt;version&gt;1.0-SNAPSHOT&lt;/version&gt;
  &lt;packaging&gt;war&lt;/packaging&gt;
  &lt;build&gt;
    &lt;plugins&gt;
      &lt;plugin&gt;
        &lt;groupId&gt;org.sonatype.flexmojos&lt;/groupId&gt;
        &lt;artifactId&gt;flexmojos-maven-plugin&lt;/artifactId&gt;
        &lt;version&gt;${flexmojos.version}&lt;/version&gt;
        &lt;executions&gt;
          &lt;execution&gt;
            &lt;goals&gt;
              &lt;goal&gt;copy-flex-resources&lt;/goal&gt;
            &lt;/goals&gt;
          &lt;/execution&gt;
        &lt;/executions&gt;
      &lt;/plugin&gt;
      &lt;plugin&gt;
        &lt;groupId&gt;org.mortbay.jetty&lt;/groupId&gt;
        &lt;artifactId&gt;maven-jetty-plugin&lt;/artifactId&gt;
      &lt;/plugin&gt;
    &lt;/plugins&gt;
  &lt;/build&gt;
  &lt;dependencies&gt;
    &lt;dependency&gt;
      &lt;groupId&gt;org.sonatype.test&lt;/groupId&gt;
      &lt;artifactId&gt;war-swf&lt;/artifactId&gt;
      &lt;version&gt;1.0-SNAPSHOT&lt;/version&gt;
      &lt;type&gt;swf&lt;/type&gt;
    &lt;/dependency&gt;
  &lt;/dependencies&gt;
&lt;/project&gt;
</programlisting>
      </example>

      <warning>
        <para>Dans l'<xref linkend="ex-flex-war-module-pom" />, la dépendance vers 
        "war-swf" doit être remplacée par "swf-swf". C'est un bug dans l'archétype Multi-module Flex 
	qui est présent dans la version 
        ${flexmojos.version} de FlexMojos. Il sera corrigé dans la version FlexMojos 3.2.0.</para>
      </warning>

      <para>Le POM illustré dans l'<xref linkend="ex-flex-war-module-pom" />
      configure le plugin FlexMojos pour exécuter le goal
      <varname>copy-flex-resources</varname> pour ce projet. Le goal
      <varname>copy-flex-resources</varname> fera une copie de l'application SWF 
      à la racine de l'application web. Dans ce projet, l'exécution du build
      et la production du WAR fera une copie du fichier 
      <filename>swf-swf-1.0-SNAPSHOT.swf</filename> dans le répertoire racine de l'application web 
      <filename>target/war-war-1.0-SNAPSHOT</filename>.</para>

      <para>Pour construire l'application web multi-modules, exécutez <command>mvn
      install</command> depuis le répertoire racine. Ceci doit générer les artéfacts
      <varname>swc-swc</varname>, <varname>swf-swf</varname> et
      <varname>war-war</varname> et produire le fichier WAR 
	<filename>/target/war-war-1.0-SNAPSHOT.war</filename> qui contient
      le <filename>swf-swf-1.0-SNAPSHOT.swf</filename> à la racine de 
      l'application web.</para>

      <note>
        <para>Pour pouvoir exécuter les tests unitaires Flex il vous faudra  configurer votre variable d'enrironnement PATH
        afin d'inclure le lecteur Flash Player. Pour plus d'information concernant  la configuration de FlexMojos pour les tests unitiares, se référer à la <xref
        linkend="flex-dev-sect-configuring-unit-tests" />.</para>
      </note>
    </section>
  </section>

  <section id="flex-dev-sect-custom-lifecycle">
    <title>Le cycle de vie de FlexMojos</title>

    <para>Le plguin Maven FlexMojos personalise le cycle de vie sur la base du type de 
    packaging. Si votre projet a <varname>packaging</varname> de type
    <varname>swc</varname> ou <varname>swf,</varname> alors le plugin FlexMojos 
    exécute un cycle de vie personalisé si votre configuration de plugin positionne 
    extensions à true. L'<xref linkend="ex-flex-dev-extensions-true" /> illustre
    la configuration de plugin pour flexmojos-maven-plugin avec 
    <varname>extensions</varname> positionné à <varname>true</varname>.</para>

    <example id="ex-flex-dev-extensions-true">
      <title>Configuration de l'élément extensions à true pour un cycle de vie personalisé Flex</title>

      <programlisting>  &lt;build&gt;
    &lt;sourceDirectory&gt;src/main/flex&lt;/sourceDirectory&gt;
    &lt;testSourceDirectory&gt;src/test/flex&lt;/testSourceDirectory&gt;
    &lt;plugins&gt;
      &lt;plugin&gt;
        &lt;groupId&gt;org.sonatype.flexmojos&lt;/groupId&gt;
        &lt;artifactId&gt;flexmojos-maven-plugin&lt;/artifactId&gt;
        &lt;version&gt;${flexmojos.version}&lt;/version&gt;
        <emphasis>&lt;extensions&gt;true&lt;/extensions&gt;</emphasis>
        &lt;configuration&gt;
          &lt;locales&gt;
            &lt;locale&gt;en_US&lt;/locale&gt;
          &lt;/locales&gt;
        &lt;/configuration&gt;
      &lt;/plugin&gt;
    &lt;/plugins&gt;
  &lt;/build&gt;</programlisting>
    </example>

    <section id="flex-dev-sect-lifecycle-swc">
      <title>Le cycle de vie SWC</title>

      <para>Quand le packaging est swc, FlexMojos execute le cycle de vie
      illustré dans la <xref linkend="fig-flex-dev-swc-lifecycle" />. Les goals surlignés
      sont des goals spécifiques au plugin FlexMojos, les goals qui ne sont pas
      surlignés sont des goals standards du plugin Core Maven.</para>

      <figure id="fig-flex-dev-swc-lifecycle">
        <title>Le cycle de vie SWC de FlexMojos </title>

        <mediaobject>
          <imageobject role="web">
            <imagedata fileref="figs/web/flex-dev_swc-lifecycle.png" />
          </imageobject>

          <imageobject role="print">
            <imagedata align="center"
                       fileref="figs/print/flex-dev_swc-lifecycle.pdf"
                       scalefit="0" width="100%" />
          </imageobject>
        </mediaobject>
      </figure>

      <para>Les goals FlexMojos mise en oeuvre sont les suivants:</para>

      <variablelist>
        <varlistentry>
          <term>flexmojos:compile-swc</term>

          <listitem>
            <para>Ce goal compile en librairie SWC tous les fichiers Actionscript et MXML qui sont dans 
	<varname>sourceDirectory</varname>. Un SWC une bibliothèque Adobe qui contient des composants et des 
            resources utilisées dans des Flex applications.</para>
          </listitem>
        </varlistentry>

        <varlistentry>
          <term>flexmojos:test-compile</term>

          <listitem>
            <para>Ce goal compile tous les fichiers Actionscript et MXML files qui se trouvent 
            dans <varname>testSourceDirectory</varname>.</para>
          </listitem>
        </varlistentry>

        <varlistentry>
          <term>flexmojos:test-run</term>

          <listitem>
            <para>Ce goal execute les tests unitaires en utilisant le lecteur Flash Player. Ce 
            goal ne peut s'exécuter que si Flash Player a correctement été configuré comme 
            décrit dans la <xref
            linkend="flex-dev-sect-configuring-unit-tests" />.</para>
          </listitem>
        </varlistentry>
      </variablelist>
    </section>

    <section id="flex-dev-sect-lifecycle-swf">
      <title>Le cycle de vie SWF</title>

      <para>Quand le packaging est swf, FlexMojos execute le lifecycle
      de vie illustré dans la <xref linkend="fig-flex-dev-swf-lifecycle" />. Les goals
      surlignés sont spécifiques au plugin FlexMojos, les goals qui ne sont pas
      surlignés sont des goals standards du plugin Core Maven.</para>

      <figure id="fig-flex-dev-swf-lifecycle">
        <title>Cycle de vie SWF de FlexMojos</title>

        <mediaobject>
          <imageobject role="web">
            <imagedata fileref="figs/web/flex-dev_swf-lifecycle.png" />
          </imageobject>

          <imageobject role="print">
            <imagedata align="center"
                       fileref="figs/print/flex-dev_swf-lifecycle.pdf"
                       scalefit="0" width="100%" />
          </imageobject>
        </mediaobject>
      </figure>

      <para>Les goals FlexMojos participants sont les suivants :</para>

      <variablelist>
        <varlistentry>
          <term>flexmojos:compile-swf</term>

          <listitem>
            <para>Ce goal compile en SWF tous les fichiers Actionscript et MXML 
            du répertoire <varname>sourceDirectory</varname>. Un SWF est un fichier
            qui contient une application qui peut être rendu dans le lecteur 
            Flash Player or le runtime Adobe AIR.</para>
          </listitem>
        </varlistentry>

        <varlistentry>
          <term>flexmojos:test-compile</term>

          <listitem>
            <para>Ce goal compile tous les fichiers Actionscript et MXML 
            du répertoire <varname>testSourceDirectory</varname>.</para>
          </listitem>
        </varlistentry>

        <varlistentry>
          <term>flexmojos:test-run</term>

          <listitem>
            <para>Ce goal execute les tests unitaires en utilisant le lecteur Flash Player. Ce goal ne peut être exécuté que si le lecteur Flash Player a correctement été configuré comme décrit dans la <xref
            linkend="flex-dev-sect-configuring-unit-tests" />.</para>
          </listitem>
        </varlistentry>
      </variablelist>
    </section>
  </section>

  <section id="flex-dev-sect-goals">
    <title>Les goals du plugin FlexMojos</title>

    <para>Le plugin Maven FlexMojos contient les goals suivants :</para>

    <variablelist>
      <varlistentry>
        <term>flexmojos:asdoc</term>

        <listitem>
          <para>Génère la documentation pour les fichiers source Actionscript</para>
        </listitem>
      </varlistentry>

      <varlistentry>
        <term>flexmojos:asdoc-report</term>

        <listitem>
          <para>Génère la documentation pour les fichiers source Actionscript sous forme de 
          rapport qui peut être inclus dans un site Maven</para>
        </listitem>
      </varlistentry>

      <varlistentry>
        <term>flexmojos:compile-swc</term>

        <listitem>
          <para>Compile les sources Flex (Actionscript and MXML) en une librairie SWC
          pour une intégration dans une application Flex ou AIR</para>
        </listitem>
      </varlistentry>

      <varlistentry>
        <term>flexmojos:compile-swf</term>

        <listitem>
          <para>Compile les sources Flex (Actionscript and MXML) en une application SWF  pour lecteur Adobe Flash Player ou runtime Adobe AIR </para>
        </listitem>
      </varlistentry>

      <varlistentry>
        <term>flexmojos:copy-flex-resources</term>

        <listitem>
          <para>Copie les ressources Flex dans le projet de l'application web</para>
        </listitem>
      </varlistentry>

      <varlistentry>
        <term>flexmojos:flexbuilder</term>

        <listitem>
          <para>Génère les fichiers de projet pour un usage dans l'environnement de développement Adobe Flex Builder</para>
        </listitem>
      </varlistentry>

      <varlistentry>
        <term>flexmojos:generate</term>

        <listitem>
          <para>Génère, via Granite GAS3, des fichiers source Actionscript 3 sur la base de classes Java</para>
        </listitem>
      </varlistentry>

      <varlistentry>
        <term>flexmojos:optimize</term>

        <listitem>
          <para>Goal qui exécute une optimisation des fichiers swcpostérieurment à une inclusion dans SWF. Ce
          goal est utilisé pour produire des fichiers RSL.</para>
        </listitem>
      </varlistentry>

      <varlistentry>
        <term>flexmojos:sources</term>

        <listitem>
          <para>Génère un JAR contenant tous les sources du projet Flex
          </para>
        </listitem>
      </varlistentry>

      <varlistentry>
        <term>flexmojos:test-compile</term>

        <listitem>
          <para>Compile toutes les classes de test du projet Flex</para>
        </listitem>
      </varlistentry>

      <varlistentry>
        <term>flexmojos:test-run</term>

        <listitem>
          <para>Exécute les tests utilisant le lecteur Adobe Flash Player</para>
        </listitem>
      </varlistentry>

      <varlistentry>
        <term>flexmojos:test-swc</term>

        <listitem>
          <para>produit un SWC contenant les classes de test du projet
          </para>
        </listitem>
      </varlistentry>

      <varlistentry>
        <term>flexmojos:wrapper</term>

        <listitem>
          <para>Génère un wrapper HTML pour l'application SWF</para>
        </listitem>
      </varlistentry>
    </variablelist>

    <section id="flex-dev-sect-gen-asdoc">
      <title>Génération de la documentation ActionScript </title>

      <para>Vous pouvez exécuter les goals asdoc ou asdoc-report pour générer
      la documentation des source ActionScript. Une fois générée, la
      documentation est sauvegardée en HTML dans le répertoire 
      <filename>\${basedir}/target/asdoc</filename>. La <xref
      linkend="fig-flex-dev-actionscript" /> illustre le résultat issu de d'exécution du goal
      <varname>asdoc</varname> pour le projet obtenu via l'archétype Flexmojos.</para>

      <figure id="fig-flex-dev-actionscript">
        <title>Documentation ActionScript généré par le plugin FlexMojos</title>

        <mediaobject>
          <imageobject role="web">
            <imagedata fileref="figs/web/flex-dev_asdoc-browser.png" />
          </imageobject>

          <imageobject role="print">
            <imagedata align="center"
                       fileref="figs/print/flex-dev_asdoc-browser.pdf"
                       scalefit="0" width="100%" />
          </imageobject>
        </mediaobject>
      </figure>
    </section>

    <section id="flex-dev-sect-compiling">
      <title>Compilation des sources Flex</title>

      <para>FlexMojos présente nombre de goals compilant ActionScript
      et MXML en SWCs and SWFs. Les goals compile-swc et compile-swf sont utilisés
      pour produire les artefacts cible à partie des sources du project. Le goal test-compile est utilisé pour compiler 
 	les tests unitaires. Dans les projets simples crééspar les archétypes
      FlexMojos, les goals compile-swc et compile-swf sont invoqués
      parce que  le projet personalise le cycle de vie et lie 
      compile-swc ou compile-swf à la phase de compilation et test-compile à la phase de
      test-compile. Si vous avez besoin de configurer les options du compilateur
      FlexMojos, vous le ferez à travers les options de configuration du plugin FlexMojos.
	Par exemple, si vous voulez que l'application avec le POM
      illustré dans l'<xref linkend="ex-flex-dev-app-pom" /> ignore les warnings de compilation au niveau du code et utilise des propriétés personalisées de fonte,
      vous pouvez utiliser une configuration de plugin illustrée dans l'<xref
      linkend="ex-flex-dev-customizing-compiler" />.</para>

      <example id="ex-flex-dev-customizing-compiler">
        <title>Configuration du plugin pour une compilation personnalisée</title>

        <programlisting>  &lt;build&gt;
    &lt;sourceDirectory&gt;src/main/flex&lt;/sourceDirectory&gt;
    &lt;testSourceDirectory&gt;src/test/flex&lt;/testSourceDirectory&gt;
    &lt;plugins&gt;
      &lt;plugin&gt;
        &lt;groupId&gt;org.sonatype.flexmojos&lt;/groupId&gt;
        &lt;artifactId&gt;flexmojos-maven-plugin&lt;/artifactId&gt;
        &lt;version&gt;${flexmojos.version}&lt;/version&gt;
        &lt;extensions&gt;true&lt;/extensions&gt;
        &lt;configuration&gt;
          &lt;configurationReport&gt;true&lt;/configurationReport&gt;
          &lt;warnings&gt;
            &lt;arrayTostringChanges&gt;true&lt;/arrayTostringChanges&gt;
            &lt;duplicateArgumentNames&gt;false&lt;/duplicateArgumentNames&gt;
          &lt;/warnings&gt;
          &lt;fonts&gt;
            &lt;advancedAntiAliasing&gt;true&lt;/advancedAntiAliasing&gt;
            &lt;flashType&gt;true&lt;/flashType&gt;
            &lt;languages&gt;
              &lt;englishRange&gt;U+0020-U+007E&lt;/englishRange&gt;
            &lt;/languages&gt;
            &lt;localFontsSnapshot&gt;
              \${basedir}/src/main/resources/fonts.ser
            &lt;/localFontsSnapshot&gt;
            &lt;managers&gt;
              &lt;manager&gt;flash.fonts.BatikFontManager&lt;/manager&gt;
            &lt;/managers&gt;
            &lt;maxCachedFonts&gt;20&lt;/maxCachedFonts&gt;
            &lt;maxGlyphsPerFace&gt;1000&lt;/maxGlyphsPerFace&gt;
          &lt;/fonts&gt;
        &lt;/configuration&gt;
      &lt;/plugin&gt;
    &lt;/plugins&gt;
  &lt;/build&gt;</programlisting>
      </example>
    </section>

    <section id="flex-dev-sect-flexbuilder">
      <title>Génération des fichiers de projet Flex Builder</title>

      <para>Pour générer les fichiers de projet Flex Builder pour un projet FlexMojos,
      configurez les groupes de plugin comme dérit dans la <xref
      linkend="flex-dev-sect-plugin-group" /> et lancer le goal
      <varname>flexbuilder</varname> :</para>

      <screen>$ <command>mvn flexmojos:flexbuilder</command></screen>

      <para>L'éxécution de ce goal produira les fichiers : <filename>.project</filename>,
      <filename>.settings/org.eclipse.core.resources.prefs</filename>,
      <filename>.actionScriptProperties</filename> et
      <filename>.flexLibProperties</filename>.</para>
    </section>
  </section>

  <section id="flex-dev-sect-reports">
    <title>Les rapports du plugin FlexMojos</title>

    <para>Le plugin Maven FlexMojos propose le rapport suivant :</para>

    <variablelist>
      <varlistentry>
        <term>flexmojos:asdoc-report</term>

        <listitem>
          <para>Génère la documentation des source ActionScript en tant que rapport pouvant être inclus dans un site Maven</para>
        </listitem>
      </varlistentry>
    </variablelist>

    <section id="flex-dev-sect-report-asdoc">
      <title>Génération de la documentation ActionScript</title>

      <para>Pour que l'<varname>asdoc-report</varname> soit intégré
      au build du site Maven, il suffit d'ajouter le code XML suivant à votre POM:</para>

      <example>
        <title>Configuring pour une génération de documentation ActionScript</title>

        <programlisting>&lt;reporting&gt;
  &lt;plugins&gt;
    &lt;plugin&gt;
      &lt;groupId&gt;org.sonatype.flexmojos&lt;/groupId&gt;
      &lt;artifactId&gt;flexmojos-maven-plugin&lt;/artifactId&gt;
      &lt;version&gt;${flexmojos.version}&lt;/version&gt;
      &lt;reportSets&gt;
        &lt;reportSet&gt;
          &lt;id&gt;flex-reports&lt;/id&gt;
          &lt;reports&gt;
            &lt;report&gt;asdoc-report&lt;/report&gt;
          &lt;/reports&gt;
        &lt;/reportSet&gt;
      &lt;/reportSets&gt;
    &lt;/plugin&gt;
  &lt;/plugins&gt;
&lt;/reporting&gt;
</programlisting>
      </example>

      <para>Quand vous faire la commande <command>mvn site</command>, Maven génèrera cette documentation et la placera dans le menu "Project Reports" comme indiqué dans
      la<xref linkend="fig-flex-dev-actionscript-report" />.</para>

      <figure id="fig-flex-dev-actionscript-report">
        <title>Documentation ActionScript incluse dans le site Maven</title>

        <mediaobject>
          <imageobject role="web">
            <imagedata fileref="figs/web/flex-dev_asdocs-report.png" />
          </imageobject>

          <imageobject role="print">
            <imagedata align="center"
                       fileref="figs/print/flex-dev_asdocs-report.pdf"
                       scalefit="0" width="100%" />
          </imageobject>
        </mediaobject>
      </figure>

      <para>Si vous avez besoin de transmettre quelqu'option de configuration que ce soit au goal
      asdoc-report, il vous faudra ajouter un élément de configuration 
      <varname>reportSets</varname> comme indiqué dans l'<xref
      linkend="ex-flex-dev-config-asdoc-report" />.</para>

      <example id="ex-flex-dev-config-asdoc-report">
        <title>Configuration de asdoc-report</title>

        <programlisting>&lt;reporting&gt;
    &lt;plugins&gt;
      &lt;plugin&gt;
        &lt;groupId&gt;org.sonatype.flexmojos&lt;/groupId&gt;
        &lt;artifactId&gt;flexmojos-maven-plugin&lt;/artifactId&gt;
        &lt;version&gt;${flexmojos.version}&lt;/version&gt;
        &lt;reportSets&gt;
          &lt;reportSet&gt;
            &lt;id&gt;flex-reports&lt;/id&gt;
            &lt;reports&gt;
              &lt;report&gt;asdoc-report&lt;/report&gt;
            &lt;/reports&gt;
            &lt;configuration&gt;
              &lt;windowTitle&gt;My TEST API Doc&lt;/windowTitle&gt;
              &lt;footer&gt;Copyright 2009 Sonatype&lt;/footer&gt;
            &lt;/configuration&gt;
          &lt;/reportSet&gt;
        &lt;/reportSets&gt;
      &lt;/plugin&gt;
    &lt;/plugins&gt;
  &lt;/reporting&gt;
</programlisting>
      </example>
    </section>
  </section>

  <section id="flex-dev-sect-dev">
    <title>Developpement et personnalisation de Flexmojos</title>

    <para>Les sections suivantes vous guideront à travers les premières étapes de personnalisation   de Flexmojos voire de contribution au projet lui-même. Flexmojos est plus 
    qu'un simple outils pour les personnes souhaitant compiler de l'ActionScript
    en artéfacts SWF et SWC ; c'est une communauté de developpeurs. Cette section
    n'est pas pour tout le monde, mais si vous voulez participez, vous êtes les bienvenus.</para>

    <section id="flex-dev-sect-get-source">
      <title>Obtenir le code source Flexmojos </title>

      <para>Flexmojos est un projet open-source hébergé par Sonatype
      et le code source de Flexmojos est stocké dans le repository Subversion de la forge Sonatype.
	 Vous pouvez visualiser le contenu du repository Subversion de Flexmojos en ouvrant, dans un navigateur web, le lien
       <ulink
      url="http://svn.sonatype.org/flexmojos/trunk">http://svn.sonatype.org/flexmojos/trunk</ulink>.</para>

      <figure id="flex-dev-svn-repo">
        <title>Le repository Subversion de Flexmojos</title>

        <mediaobject>
          <imageobject role="web">
            <imagedata fileref="figs/web/flex-dev-subversion.png" />
          </imageobject>

          <imageobject role="print">
            <imagedata align="center"
                       fileref="figs/print/flex-dev-subversion.pdf"
                       scalefit="0" width="100%" />
          </imageobject>
        </mediaobject>
      </figure>

      <para>Si vous êtes intéressé par une participation au projet Flexmojos,
      vous effectuez probablement un checkout de la version courrante sur votre machine. 
Pour effectuer un checkout du code source Flexmojos en utilisant Subversion,
      saisissez la ligne de commande suivante :</para>

      <screen>$ <command>svn co http://svn.sonatype.org/flexmojos/trunk flexmojos</command>
A flexmojos
...
$ <command>ls</command>
COPYRIGHT               flexmojos-sandbox         pom.xml
flexmojos-archetypes    flexmojos-super-poms      src
flexmojos-maven-plugin  flexmojos-testing
flexmojos-parent        flexmojos-touchstone
</screen>
    </section>
  </section>
</chapter>
