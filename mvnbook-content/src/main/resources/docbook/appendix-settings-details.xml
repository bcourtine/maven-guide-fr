<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE appendix PUBLIC "-//OASIS//DTD DocBook XML V4.5//EN"
"http://www.oasis-open.org/docbook/xml/4.5/docbookx.dtd">
<appendix id="appendix-settings">
  <title>Appendix: Settings Details</title>

  <section id="appendix-settings-sect-quick-overview">
    <title>Quick Overview</title>

    <para>The settings element in the <filename>settings.xml</filename> file
    contains elements used to define values which configure Maven execution.
    Settings in this file are settings which apply to many projects and which
    should not be bundled to any specific project, or distributed to an
    audience. These include values such as the local repository location,
    alternate remote repository servers, and authentication information. There
    are two locations where a <filename>settings.xml</filename> file may
    live:</para>

    <itemizedlist>
      <listitem>
        <para>Maven Installation Directory:
        <filename>$M2_HOME/conf/settings.xml</filename></para>
      </listitem>

      <listitem>
        <para>User-specific Settings File:
        <filename>~/.m2/settings.xml</filename></para>
      </listitem>
    </itemizedlist>

    <para>Here is an overview of the top elements under settings:</para>

    <para><example>
        <title>Overview of top-level elements in settings.xml</title>

        <programlisting language="xml">&lt;settings xmlns="http://maven.apache.org/POM/4.0.0"
  xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
  xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 
                      http://maven.apache.org/xsd/settings-1.0.0.xsd"&gt;
  &lt;localRepository/&gt;
  &lt;interactiveMode/&gt;
  &lt;usePluginRegistry/&gt;
  &lt;offline/&gt;
  &lt;pluginGroups/&gt;
  &lt;servers/&gt;
  &lt;mirrors/&gt;
  &lt;proxies/&gt;
  &lt;profiles/&gt;
  &lt;activeProfiles/&gt;
&lt;/settings&gt;
</programlisting>
      </example></para>
  </section>

  <section id="appendix-settings-sect-details">
    <title>Settings Details</title>

    <section id="appendix-settings-sect-simpleval">
      <title>Simple Values</title>

      <para>Half of the top-level settings elements are simple values,
      representing a range of values which configure the core behavior of
      Maven:</para>

      <para><example>
          <title>Simple top-level elements in settings.xml</title>

          <programlisting language="xml">&lt;settings xmlns="http://maven.apache.org/POM/4.0.0"
  xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
  xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 
                      http://maven.apache.org/xsd/settings-1.0.0.xsd"&gt;
  &lt;localRepository&gt;\${user.dir}/.m2/repository&lt;/localRepository&gt;
  &lt;interactiveMode&gt;true&lt;/interactiveMode&gt;
  &lt;usePluginRegistry&gt;false&lt;/usePluginRegistry&gt;
  &lt;offline&gt;false&lt;/offline&gt;
  &lt;pluginGroups&gt;
    &lt;pluginGroup&gt;org.codehaus.mojo&lt;/pluginGroup&gt;
  &lt;/pluginGroups&gt;
  ...
&lt;/settings&gt;
</programlisting>
        </example></para>

      <para>The simple top-level elements are:</para>

      <variablelist>
        <varlistentry>
          <term>localRepository</term>

          <listitem>
            <para>This value is the path of this build system's local
            repository. The default value is
            <filename>\${user.dir}/.m2/repository</filename>.</para>
          </listitem>
        </varlistentry>

        <varlistentry>
          <term>interactiveMode</term>

          <listitem>
            <para><varname>true</varname> if Maven should attempt to interact
            with the user for input, <varname>false</varname> if not. Defaults
            to <varname>true</varname>.</para>
          </listitem>
        </varlistentry>

        <varlistentry>
          <term>usePluginRegistry</term>

          <listitem>
            <para><varname>true</varname> if Maven should use the
            <filename>\${user.dir}/.m2/plugin-registry.xml</filename> file to
            manage plugin versions, defaults to
            <varname>false</varname>.</para>
          </listitem>
        </varlistentry>

        <varlistentry>
          <term>offline</term>

          <listitem>
            <para><varname>true</varname> if this build system should operate
            in offline mode, defaults to <varname>false</varname>. This
            element is useful for build servers which cannot connect to a
            remote repository, either because of network setup or security
            reasons.</para>
          </listitem>
        </varlistentry>

        <varlistentry>
          <term>pluginGroups</term>

          <listitem>
            <para>This element contains a list of
            <sgmltag>pluginGroup</sgmltag> elements, each contains a
            <sgmltag>groupId</sgmltag>. The list is searched when a plugin is
            used and the <sgmltag>groupId</sgmltag> is not provided in the
            command line. This list contains
            <varname>org.apache.maven.plugins</varname> by default.</para>
          </listitem>
        </varlistentry>
      </variablelist>
    </section>

    <section id="appendix-settings-sect-servers">
      <title>Servers</title>

      <para>The <sgmltag>distributionManagement</sgmltag> element of the
      <acronym>POM</acronym> defines the repositories for deployment. However,
      certain settings such as security credentials should not be distributed
      along with the <filename>pom.xml</filename>. This type of information
      should exist on the build server in the
      <filename>settings.xml</filename>.</para>

      <para><example>
          <title>Server configuration in settings.xml</title>

          <programlisting language="xml">&lt;settings xmlns="http://maven.apache.org/POM/4.0.0"
  xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
  xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 
                      http://maven.apache.org/xsd/settings-1.0.0.xsd"&gt;
  ...
  &lt;servers&gt;
    &lt;server&gt;
      &lt;id&gt;server001&lt;/id&gt;
      &lt;username&gt;my_login&lt;/username&gt;
      &lt;password&gt;my_password&lt;/password&gt;
      &lt;privateKey&gt;\${user.home}/.ssh/id_dsa&lt;/privateKey&gt;
      &lt;passphrase&gt;some_passphrase&lt;/passphrase&gt;
      &lt;filePermissions&gt;664&lt;/filePermissions&gt;
      &lt;directoryPermissions&gt;775&lt;/directoryPermissions&gt;
      &lt;configuration&gt;&lt;/configuration&gt;
    &lt;/server&gt;
  &lt;/servers&gt;
  ...
&lt;/settings&gt;
</programlisting>
        </example></para>

      <para>The elements under server are:</para>

      <variablelist>
        <varlistentry>
          <term>id</term>

          <listitem>
            <para>This is the <sgmltag>id</sgmltag> of the server (not of the
            user to login as) that matches the
            <sgmltag>distributionManagement</sgmltag> repository element's
            <sgmltag>id</sgmltag>.</para>
          </listitem>
        </varlistentry>
      </variablelist>

      <variablelist>
        <varlistentry>
          <term>username, password</term>

          <listitem>
            <para>These elements appear as a pair denoting the login and
            password required to authenticate to this server.</para>
          </listitem>
        </varlistentry>
      </variablelist>

      <variablelist>
        <varlistentry>
          <term>privateKey, passphrase</term>

          <listitem>
            <para>Like the previous two elements, this pair specifies a path
            to a private key (default is
            <filename>\${user.home}/.ssh/id_dsa</filename>) and a passphrase,
            if required. The passphrase and password elements may be
            externalized in the future, but for now they must be set
            plain-text in the <filename>settings.xml</filename> file.</para>
          </listitem>
        </varlistentry>
      </variablelist>

      <variablelist>
        <varlistentry>
          <term>filePermissions, directoryPermissions</term>

          <listitem>
            <para>When a repository file or directory is created on
            deployment, these are the permissions to use. The legal values of
            each is a three digit number corresponding to *nix file
            permissions, i.e. 664, or 775.</para>
          </listitem>
        </varlistentry>
      </variablelist>
    </section>

    <section id="appendix-settings-sect-mirrors">
      <title>Mirrors</title>

      <para><example>
          <title>Mirror configuration in settings.xml</title>

          <programlisting language="xml">&lt;settings xmlns="http://maven.apache.org/POM/4.0.0"
  xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
  xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 
                      http://maven.apache.org/xsd/settings-1.0.0.xsd"&gt;
  ...
  &lt;mirrors&gt;
    &lt;mirror&gt;
      &lt;id&gt;planetmirror.com&lt;/id&gt;
      &lt;name&gt;PlanetMirror Australia&lt;/name&gt;
      &lt;url&gt;http://downloads.planetmirror.com/pub/maven2&lt;/url&gt;
      &lt;mirrorOf&gt;central&lt;/mirrorOf&gt;
    &lt;/mirror&gt;
  &lt;/mirrors&gt;
  ...
&lt;/settings&gt;
</programlisting>
        </example></para>

      <para><variablelist>
          <varlistentry>
            <term>id, name</term>

            <listitem>
              <para>The unique identifier of this mirror. The id is used to
              differentiate between mirror elements.</para>
            </listitem>
          </varlistentry>
        </variablelist><variablelist>
          <varlistentry>
            <term>url</term>

            <listitem>
              <para>The base <acronym>UR</acronym>L of this mirror. The build
              system will use prepend this <acronym>URL</acronym> to connect
              to a repository rather than the default server
              <acronym>URL</acronym>.</para>
            </listitem>
          </varlistentry>
        </variablelist><variablelist>
          <varlistentry>
            <term>mirrorOf</term>

            <listitem>
              <para>The id of the server that this is a mirror of. For
              example, to point to a mirror of the Maven central server
              (<ulink
              url="http://repo1.maven.org/maven2">http://repo1.maven.org/maven2</ulink>),
              set this element to central. This must not match the mirror
              id.</para>
            </listitem>
          </varlistentry>
        </variablelist></para>
    </section>

    <section id="appendix-settings-sect-proxies">
      <title>Proxies</title>

      <para><example>
          <title>Proxy configuration in settings.xml</title>

          <programlisting language="xml">&lt;settings xmlns="http://maven.apache.org/POM/4.0.0"
  xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
  xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 
                      http://maven.apache.org/xsd/settings-1.0.0.xsd"&gt;
  ...
  &lt;proxies&gt;
    &lt;proxy&gt;
      &lt;id&gt;myproxy&lt;/id&gt;
      &lt;active&gt;true&lt;/active&gt;
      &lt;protocol&gt;http&lt;/protocol&gt;
      &lt;host&gt;proxy.somewhere.com&lt;/host&gt;
      &lt;port&gt;8080&lt;/port&gt;
      &lt;username&gt;proxyuser&lt;/username&gt;
      &lt;password&gt;somepassword&lt;/password&gt;
      &lt;nonProxyHosts&gt;*.google.com|ibiblio.org&lt;/nonProxyHosts&gt;
    &lt;/proxy&gt;
  &lt;/proxies&gt;
  ...
&lt;/settings&gt;
</programlisting>
        </example></para>

      <para><variablelist>
          <varlistentry>
            <term>id</term>

            <listitem>
              <para>The unique identifier for this proxy. This is used to
              differentiate between proxy elements.</para>
            </listitem>
          </varlistentry>

          <varlistentry>
            <term>active</term>

            <listitem>
              <para><varname>true</varname> if this proxy is active. This is
              useful for declaring a set of proxies, but only one may be
              active at a time.</para>
            </listitem>
          </varlistentry>

          <varlistentry>
            <term>protocol, host, port</term>

            <listitem>
              <para>The <varname>protocol://host:port</varname> of the proxy,
              separated into discrete elements.</para>
            </listitem>
          </varlistentry>

          <varlistentry>
            <term>username, password</term>

            <listitem>
              <para>These elements appear as a pair denoting the login and
              password required to authenticate to this proxy server.</para>
            </listitem>
          </varlistentry>

          <varlistentry>
            <term>nonProxyHosts</term>

            <listitem>
              <para>This is a list of hosts which should not be proxied. The
              delimiter of the list is the expected type of the proxy server;
              the example above is pipe delimited - comma delimited is also
              common.</para>
            </listitem>
          </varlistentry>
        </variablelist></para>
    </section>

    <section id="appendix-settings-sect-profiles">
      <title>Profiles</title>

      <para>The <sgmltag>profile</sgmltag> element in the
      <filename>settings.xml</filename> is a truncated version of the
      <filename>pom.xml</filename> profile element. It consists of the
      <sgmltag>activation</sgmltag>, <sgmltag>repositories</sgmltag>,
      <sgmltag>pluginRepositories</sgmltag> and <sgmltag>properties</sgmltag>
      elements. The profile elements only include these four elements because
      they concern themselves with the build system as a whole (which is the
      role of the <filename>settings.xml</filename> file), not about
      individual project object model settings.</para>

      <para>If a profile is active from settings, its values will override any
      equivalent profiles which matching identifiers in a
      <acronym>POM</acronym> or <filename>profiles.xml</filename> file.</para>
    </section>

    <section id="appendix-settings-sect-activation">
      <title>Activation</title>

      <para>Activations are the key of a profile. Like the
      <acronym>POM</acronym>'s profiles, the power of a profile comes from its
      ability to modify some values only under certain circumstances; those
      circumstances are specified via an activation element.</para>

      <para><example>
          <title>Defining Activation Parameters in settings.xml</title>

          <programlisting language="xml">&lt;settings xmlns="http://maven.apache.org/POM/4.0.0"
  xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
  xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 
                      http://maven.apache.org/xsd/settings-1.0.0.xsd"&gt;
  ...
  &lt;profiles&gt;
    &lt;profile&gt;
      &lt;id&gt;test&lt;/id&gt;
      &lt;activation&gt;
        &lt;activeByDefault&gt;false&lt;/activeByDefault&gt;
        &lt;jdk&gt;1.5&lt;/jdk&gt;
        &lt;os&gt;
          &lt;name&gt;Windows XP&lt;/name&gt;
          &lt;family&gt;Windows&lt;/family&gt;
          &lt;arch&gt;x86&lt;/arch&gt;
          &lt;version&gt;5.1.2600&lt;/version&gt;
        &lt;/os&gt;
        &lt;property&gt;
          &lt;name&gt;mavenVersion&lt;/name&gt;
          &lt;value&gt;2.0.3&lt;/value&gt;
        &lt;/property&gt;
        &lt;file&gt;
          &lt;exists&gt;\${basedir}/file2.properties&lt;/exists&gt;
          &lt;missing&gt;\${basedir}/file1.properties&lt;/missing&gt;
        &lt;/file&gt;
      &lt;/activation&gt;
      ...
    &lt;/profile&gt;
  &lt;/profiles&gt;
  ...
&lt;/settings&gt;
</programlisting>
        </example></para>

      <para>Activation occurs when all specified criteria have been met,
      though not all are required at once.</para>

      <variablelist>
        <varlistentry>
          <term>jdk</term>

          <listitem>
            <para>activation has a built in, Java-centric check in the jdk
            element. This will activate if the test is run under a jdk version
            number that matches the prefix given. In the above example,
            1.5.0_06 will match.</para>
          </listitem>
        </varlistentry>

        <varlistentry>
          <term>os</term>

          <listitem>
            <para>The <sgmltag>os</sgmltag> element can define some operating
            system specific properties shown above.</para>
          </listitem>
        </varlistentry>

        <varlistentry>
          <term>property</term>

          <listitem>
            <para>The profile will activate if Maven detects a property (a
            value which can be dereferenced within the POM by \${name}) of the
            corresponding name=value pair.</para>
          </listitem>
        </varlistentry>

        <varlistentry>
          <term>file</term>

          <listitem>
            <para>Finally, a given filename may activate the profile by the
            existence of a file, or if it is missing.</para>
          </listitem>
        </varlistentry>
      </variablelist>

      <para>The <sgmltag>activation</sgmltag> element is not the only way that
      a profile may be activated. The <filename>settings.xml</filename> file's
      <sgmltag>activeProfile</sgmltag> element may contain the profile's id.
      They may also be activated explicitly through the command line via a
      comma separated list after the P flag (e.g. <varname>-P</varname>
      test).</para>

      <para>To see which profile will activate in a certain build, use the
      maven-help-plugin.</para>

      <screen>mvn help:active-profiles
</screen>
    </section>

    <section id="appendix-settings-sect-properties">
      <title>Properties</title>

      <para>Maven properties are value placeholder, like properties in Ant.
      Their values are accessible anywhere within a <acronym>POM</acronym> by
      using the notation <varname>\${X}</varname>, where X is the property.
      They come in five different styles, all accessible from the settings.xml
      file:</para>

      <variablelist>
        <varlistentry>
          <term><literal>env.</literal><replaceable>X</replaceable></term>

          <listitem>
            <para>Prefixing a variable with <literal>env.</literal> will
            <indexterm>
                <primary>env.* properties</primary>
              </indexterm><indexterm>
                <primary>environment variables, referencing</primary>
              </indexterm>return the shell’s environment variable. For
            example, <varname>\${env.PATH}</varname> contains the
            <varname>$path</varname> environment variable.
            (<varname>%PATH%</varname> in Windows.)</para>
          </listitem>
        </varlistentry>

        <varlistentry>
          <term><literal>project.</literal><replaceable>x</replaceable></term>

          <listitem>
            <para>A dot-notated (.) path in the <acronym>POM</acronym> will
            <indexterm>
                <primary>project.* properties</primary>
              </indexterm><indexterm>
                <primary>POM (Project Object Model)</primary>

                <secondary>referencing properties in</secondary>
              </indexterm><indexterm>
                <primary>pom.xml file</primary>

                <secondary>referencing properties in</secondary>
              </indexterm>contain the corresponding elements value.</para>
          </listitem>
        </varlistentry>

        <varlistentry>
          <term><literal>settings.</literal><replaceable>x</replaceable></term>

          <listitem>
            <para>A dot-notated (.) path in the<indexterm>
                <primary>settings.* properties</primary>
              </indexterm><indexterm>
                <primary>settings.xml file</primary>

                <secondary>properties in</secondary>

                <tertiary>referencing</tertiary>
              </indexterm> <filename>settings.xml</filename> will contain the
            corresponding elements value.</para>
          </listitem>
        </varlistentry>

        <varlistentry>
          <term>Java system properties</term>

          <listitem>
            <para>All properties accessible via<indexterm>
                <primary>system properties, referencing</primary>
              </indexterm><indexterm>
                <primary>Java system properties, referencing</primary>
              </indexterm>
            <methodname>java.lang.System.getProperties()</methodname> are
            available as <acronym>POM</acronym> properties, such as
            <varname>\${java.home}</varname>.</para>
          </listitem>
        </varlistentry>

        <varlistentry>
          <term><replaceable>x</replaceable></term>

          <listitem>
            <para>Set within a <literal>properties</literal> element or an
            external file, the value may be used as <varname
            role="keep-together">\${someVar}</varname>.</para>
          </listitem>
        </varlistentry>
      </variablelist>

      <para><example>
          <title>Setting the \${user.install} property in settings.xml</title>

          <programlisting language="xml">&lt;settings xmlns="http://maven.apache.org/POM/4.0.0"
  xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
  xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 
                      http://maven.apache.org/xsd/settings-1.0.0.xsd"&gt;
  ...
  &lt;profiles&gt;
    &lt;profile&gt;
      ...
      &lt;properties&gt;
        &lt;user.install&gt;\${user.dir}/our-project&lt;/user.install&gt;
      &lt;/properties&gt;
      ...
    &lt;/profile&gt;
  &lt;/profiles&gt;
  ...
&lt;/settings&gt;
</programlisting>
        </example></para>

      <para>The property <varname>\${user.install}</varname> is accessible
      from a <acronym>POM</acronym> if this profile is active.</para>
    </section>

    <section id="appendix-settings-sect-settings-repository">
      <title>Repositories</title>

      <para>Repositories are remote collections of projects from which Maven
      uses to populate the local repository of the build system. It is from
      this local repository that Maven calls it plugins and dependencies.
      Different remote repositories may contain different projects, and under
      the active profile they may be searched for a matching release or
      snapshot artifact.</para>

      <para><example>
          <title>Repository Configuration in settings.xml</title>

          <programlisting language="xml">&lt;settings xmlns="http://maven.apache.org/POM/4.0.0"
  xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
  xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 
                      http://maven.apache.org/xsd/settings-1.0.0.xsd"&gt;
  ...
  &lt;profiles&gt;
    &lt;profile&gt;
      ...
      &lt;repositories&gt;
        &lt;repository&gt;
          &lt;id&gt;codehausSnapshots&lt;/id&gt;
          &lt;name&gt;Codehaus Snapshots&lt;/name&gt;
          &lt;releases&gt;
            &lt;enabled&gt;false&lt;/enabled&gt;
            &lt;updatePolicy&gt;always&lt;/updatePolicy&gt;
            &lt;checksumPolicy&gt;warn&lt;/checksumPolicy&gt;
          &lt;/releases&gt;
          &lt;snapshots&gt;
            &lt;enabled&gt;true&lt;/enabled&gt;
            &lt;updatePolicy&gt;never&lt;/updatePolicy&gt;
            &lt;checksumPolicy&gt;fail&lt;/checksumPolicy&gt;
          &lt;/snapshots&gt;
          &lt;url&gt;http://snapshots.maven.codehaus.org/maven2&lt;/url&gt;
          &lt;layout&gt;default&lt;/layout&gt;
        &lt;/repository&gt;
      &lt;/repositories&gt;
      &lt;pluginRepositories&gt;
        ...
      &lt;/pluginRepositories&gt;
      ...
    &lt;/profile&gt;
  &lt;/profiles&gt;
  ...
&lt;/settings&gt;
</programlisting>
        </example></para>

      <para><variablelist>
          <varlistentry>
            <term>releases, snapshots</term>

            <listitem>
              <para>These are the policies for each type of artifact, Release
              or snapshot. With these two sets, a <acronym>POM</acronym> has
              the power to alter the policies for each type independent of the
              other within a single repository. For example, one may decide to
              enable only snapshot downloads, possibly for development
              purposes.</para>
            </listitem>
          </varlistentry>

          <varlistentry>
            <term>enabled</term>

            <listitem>
              <para><varname>true</varname> or <varname>false</varname> for
              whether this repository is enabled for the respective type
              (releases or snapshots).</para>
            </listitem>
          </varlistentry>

          <varlistentry>
            <term>updatePolicy</term>

            <listitem>
              <para>This element specifies how often updates should attempt to
              occur. Maven will compare the local <acronym>POM</acronym>s
              timestamp to the remote. The choices are:
              <varname>always</varname>, <varname>daily</varname> (default),
              <varname>interval:X</varname> (where X is an integer in minutes)
              or <varname>never</varname>.</para>
            </listitem>
          </varlistentry>

          <varlistentry>
            <term>checksumPolicy</term>

            <listitem>
              <para>When Maven deploys files to the repository, it also
              deploys corresponding checksum files. Your options are to
              <varname>ignore</varname>, <varname>fail</varname>, or
              <varname>warn</varname> on missing or incorrect
              checksums.</para>
            </listitem>
          </varlistentry>

          <varlistentry>
            <term>layout</term>

            <listitem>
              <para>In the above description of repositories, it was mentioned
              that they all follow a common layout. This is mostly correct.
              Maven 2 has a default layout for its repositories; however,
              Maven 1.x had a different layout. Use this element to specify
              which if it is default or legacy. If you are upgrading from
              Maven 1 to Maven 2, and you want to use the same repository
              which was used in your Maven 1 build, list the layout as
              <varname>legacy</varname>.</para>
            </listitem>
          </varlistentry>
        </variablelist></para>
    </section>

    <section id="appendix-settings-sect-plugin-repositories">
      <title>Plugin Repositories</title>

      <para>The structure of the <sgmltag>pluginRepositories</sgmltag> element
      block is similar to the <sgmltag>repositories</sgmltag> element. The
      <sgmltag>pluginRepository</sgmltag> elements each specify a remote
      location of where Maven can find plugins artifacts.</para>

      <example>
        <title>Plugin Repositories in settings.xml</title>

        <programlisting>&lt;settings xmlns="http://maven.apache.org/POM/4.0.0"
  xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
  xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 
                      http://maven.apache.org/xsd/settings-1.0.0.xsd"&gt;
  ...
  &lt;profiles&gt;
    &lt;profile&gt;
      ...
      &lt;repositories&gt;
        ...
      &lt;/repositories&gt;
      &lt;pluginRepositories&gt;
        &lt;pluginRepository&gt;
          &lt;id&gt;codehausSnapshots&lt;/id&gt;
          &lt;name&gt;Codehaus Snapshots&lt;/name&gt;
          &lt;releases&gt;
            &lt;enabled&gt;false&lt;/enabled&gt;
            &lt;updatePolicy&gt;always&lt;/updatePolicy&gt;
            &lt;checksumPolicy&gt;warn&lt;/checksumPolicy&gt;
          &lt;/releases&gt;
          &lt;snapshots&gt;
            &lt;enabled&gt;true&lt;/enabled&gt;
            &lt;updatePolicy&gt;never&lt;/updatePolicy&gt;
            &lt;checksumPolicy&gt;fail&lt;/checksumPolicy&gt;
          &lt;/snapshots&gt;
          &lt;url&gt;http://snapshots.maven.codehaus.org/maven2&lt;/url&gt;
          &lt;layout&gt;default&lt;/layout&gt;
        &lt;/pluginRepository&gt;
      &lt;/pluginRepositories&gt;
      ...
    &lt;/profile&gt;
  &lt;/profiles&gt;
  ...
&lt;/settings&gt;
</programlisting>
      </example>
    </section>

    <section id="appendix-settings-sect-active-profiles">
      <title>Active Profiles</title>

      <para><example>
          <title>Setting active profiles in settings.xml</title>

          <programlisting language="xml">&lt;settings xmlns="http://maven.apache.org/POM/4.0.0"
  xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
  xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 
                      http://maven.apache.org/xsd/settings-1.0.0.xsd"&gt;
  ...
  &lt;activeProfiles&gt;
    &lt;activeProfile&gt;env-test&lt;/activeProfile&gt;
  &lt;/activeProfiles&gt;
&lt;/settings&gt;
</programlisting>
        </example></para>

      <para>The final piece of the <filename>settings.xml</filename> puzzle is
      the <sgmltag>activeProfiles</sgmltag> element. This contains a set of
      <sgmltag>activeProfile</sgmltag> elements, which each have a value of a
      profile id. Any profile id defined as an
      <sgmltag>activeProfile</sgmltag> will be active, regardless of any
      environment settings. If no matching profile is found nothing will
      happen. For example, if <varname>env-test</varname> is an
      <sgmltag>activeProfile</sgmltag>, a <sgmltag>profile</sgmltag> in a
      <filename>pom.xml</filename> (or <filename>profile.xml</filename> with a
      corresponding id it will be active. If no such profile is found then
      execution will continue as normal.</para>
    </section>

    <section id="appendix-settings-sect-encrypting-passwords">
      <title>Encrypting Passwords in Maven Settings</title>

      <para>Once you start to use Maven to deploy software to remote
      repositories and to interact with source control systems directly, you
      will start to collect a number of passwords in your Maven Settings and
      without a mechanism for encrypting these passwords, a developer's
      <filename>~/.m2/settings.xml</filename> will quickly become a security
      risk as it will contain plain-text passwords to source control and
      repository managers. Maven 2.1 introduced a facility to encrypt
      passwords in a user's Maven Settings
      (<filename>~/.m2/settings.xml</filename>). To do this, you must first
      create a master password and store this master password in a
      <filename>security-settings.xml</filename> file in
      <filename>~/.m2/settings-security.xml</filename>. You can then use this
      master password to encrypt passwords stored in Maven Settings
      (<filename>~/.m2/settings.xml</filename>).</para>

      <para>To illustrate this feature, consider the process Maven uses to
      retrieve an unencrypted server password for a user's Maven Settings as
      shown in <xref linkend="fig-settings-unencrypted" />. A user will
      reference a named server using an identifier in a project's POM, Maven
      looks for a matching server in Maven Settings. When it finds a matching
      server element in Maven Settings, Maven will then use the password
      associated with that server element and send this password along to the
      server. The password is stored as plain-text in
      <filename>~/.m2/settings.xml</filename> and it is readily available to
      anyone who has read access to this file.</para>

      <figure id="fig-settings-unencrypted">
        <title>Storing Unencrypted Passwords in Maven Settings</title>

        <mediaobject>
          <imageobject role="web">
            <imagedata fileref="figs/web/settings_password-no-encryption.png" />
          </imageobject>

          <imageobject role="print">
            <imagedata fileref="figs/print/settings_password-no-encryption.pdf" />
          </imageobject>
        </mediaobject>
      </figure>

      <para>Next, consider the process Maven uses to support encrypted
      passwords as shown in <xref linkend="fig-settings-encrypted" />.</para>

      <figure id="fig-settings-encrypted">
        <title>Storing Encrypted Passwords in Maven Settings</title>

        <mediaobject>
          <imageobject role="web">
            <imagedata fileref="figs/web/settings_password-encryption.png" />
          </imageobject>

          <imageobject role="print">
            <imagedata fileref="figs/print/settings_password-encryption.pdf" />
          </imageobject>
        </mediaobject>
      </figure>

      <para>To configure encrypted passwords, create a master password by
      running <command>mvn -emp</command> or <command>mvn
      --encrypt-master-password</command> followed by your master
      password.</para>

      <screen>$ <command>mvn -emp mypassword</command>
{rsB56BJcqoEHZqEZ0R1VR4TIspmODx1Ln8/PVvsgaGw=}</screen>

      <para>Maven prints out an encrypted copy of the password to standard
      out. Copy this encrypted password and paste it into a
      <filename>~/.m2/settings-security.xml</filename> file as shown in</para>

      <example id="ex-settings-master-password">
        <title>settings-security.xml with Master Password</title>

        <programlisting>&lt;settingsSecurity&gt;
  &lt;master&gt;{rsB56BJcqoEHZqEZ0R1VR4TIspmODx1Ln8/PVvsgaGw=}&lt;/master&gt;
&lt;/settingsSecurity&gt;
</programlisting>
      </example>

      <para>After you have created a master password, you can then encrypt
      passwords for use in your Maven Settings. To encrypt a password with the
      master password, run <command>mvn -ep</command> or <command>mvn
      --encrypt-password</command>. Assume that you have a repository manager
      and you need to send a username of "deployment" and a password of
      "qualityFIRST". To encrypt this particular password, you would run the
      following command:</para>

      <screen>$ <command>mvn -ep qualityFIRST</command>
{uMrbEOEf/VQHnc0W2X49Qab75j9LSTwiM3mg2LCrOzI=}</screen>

      <para>At this point, copy the encrypted password printed from the output
      of <command>mvn -ep</command> and paste it into your Maven
      Settings.</para>

      <example>
        <title>Storing an Encrypted Password in Maven Settings
        (~/.m2/settings.xml)</title>

        <programlisting>&lt;settings&gt;
  &lt;servers&gt;
    &lt;server&gt;
      &lt;id&gt;nexus&lt;/id&gt;
      &lt;username&gt;deployment&lt;/username&gt;
      &lt;password&gt;{uMrbEOEf/VQHnc0W2X49Qab75j9LSTwiM3mg2LCrOzI=}&lt;/password&gt;
    &lt;/server&gt;
  &lt;/servers&gt;
  ...
&lt;/settings&gt;</programlisting>
      </example>

      <para>When you run a Maven build that needs to interact with the
      repository manager, Maven will retrieve the Master password from the
      <filename>~/.m2/settings-security.xml</filename> file and use this
      master password to decrypt the password stored in your
      <filename>~/.m2/settings.xml</filename> file. Maven will then send the
      decrypted password to the server.</para>

      <para>What does this buy you? It allows you to avoid storing your
      passwords in <filename>~/.m2/settings.xml</filename> as plain-text
      passwords providing you with the peace of mind that your critical
      passwords are not being stored, unprotected in a Maven Settings file.
      Note that this feature does not provide for encryption of the password
      while it is being sent to the remote server. An enterprising attacker
      could still capture the password using a network analysis tool.</para>

      <para>For an extra level of security, you can encourage your developers
      to store the encrypted master password on a removable storage device
      like a USB hard drive. Using this method, a developer would plug a
      removable drive into a workstation when she wanted to perform a
      deployment or interact with a remote server. To support this, your
      <filename>~/.m2/settings-security.xml</filename> file would contain a
      reference to the location of the
      <filename>settings-security.xml</filename> file using the relocation
      element.</para>

      <example>
        <title>Configuring Relocation of the Master Password</title>

        <programlisting>&lt;settingsSecurity&gt;
  &lt;relocation&gt;/Volumes/usb-key/settings-security.xml&lt;/relocation&gt;
&lt;/settingsSecurity&gt;
</programlisting>
      </example>

      <para>The developer would then store the
      <filename>settings-security.xml</filename> file at
      <filename>/Volumes/usb-key/settings-security.xml</filename> which would
      only be available if the developer were sitting at the
      workstation.</para>
    </section>
  </section>
</appendix>
