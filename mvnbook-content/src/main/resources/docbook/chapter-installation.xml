<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE chapter PUBLIC "-//OASIS//DTD DocBook XML V4.5//EN"
"http://www.oasis-open.org/docbook/xml/4.5/docbookx.dtd">
<chapter id="installation">
  <title>Installing and Running Maven</title>

  <para>This chapter contains very detailed instructions for installing Maven
  on a number of different platforms. Instead of assuming a level of
  familiarity with installing software and setting environment variables,
  we've opted to be as thorough as possible to minimize any problems that
  might arise do to a partial installation. The only thing this chapter
  assumes is that you've already installed a suitable Java Development Kit
  (<acronym>JDK</acronym>). If you are just interested in installation, you
  can move on to the rest of the book after reading through <xref
  linkend="installation-sect-maven-download" xrefstyle="select: title" /> and
  <xref linkend="installation-sect-maven-install"
  xrefstyle="select: title" />. If you are interested in the details of your
  Maven installation, this entire chapter will give you an overview of what
  you've installed and the meaning of the Apache Software License, Version
  2.0.</para>

  <section id="installation-sect-java">
    <title>Verify your Java Installation</title>

    <para>While Maven can run on Java 1.4, this book assumes that you are
    running at least Java 5. Go with the most recent stable Java Development
    Kit (<acronym>JDK</acronym>) available for your operating system. Either
    Java 5 or Java 6 will work with all of the examples in this book.</para>

    <para><screen><prompt moreinfo="none">% </prompt><command moreinfo="none">java -version</command>
java version "1.5.0_16"
Java(TM) 2 Runtime Environment, Standard Edition (build 1.5.0_16-b06-284)
Java HotSpot(TM) Client VM (build 1.5.0_16-133, mixed mode, sharing)
</screen></para>

    <para>Maven works with all certified Java<superscript>TM</superscript>
    compatible development kits, and a few non-certified implementations of
    Java. The examples in this book were written and tested against the
    official Java Development Kit releases downloaded from the Sun
    Microsystems web site. If you’re working with a Linux distribution, you
    may need to download Sun’s <acronym>JDK</acronym> yourself and make sure
    it’s the version you’re invoking (by running <command>java
    -version</command>). Now that Sun has open-sourced Java, this will
    hopefully improve in the future, and we’ll get the Sun
    <acronym>JRE</acronym> and <acronym>JDK</acronym> by default even in
    purist Linux distributions. Until that day, you may need to do some of
    your own downloading.</para>
  </section>

  <section id="installation-sect-maven-download">
    <title>Downloading Maven</title>

    <para>You can download Maven from the Apache Maven project website at
    <ulink
    url="http://maven.apache.org/download.html">http://maven.apache.org/download.html</ulink>.</para>

    <para>When downloading Maven, make sure you choose the latest version of
    Apache Maven from the Maven website. The latest version of Maven when this
    book was written was Maven ${maven.version}. If you are not familiar with
    the Apache Software License, you should familiarize yourself with the
    terms of the license before you start using the product. More information
    on the Apache Software License can be found in <xref
    linkend="installation-sect-license" />.</para>
  </section>

  <section id="installation-sect-maven-install">
    <title>Installing Maven</title>

    <para>There are wide differences between operating systems such as Mac
    <acronym>OS X</acronym> and Microsoft Windows, and there are subtle
    differences between different versions of Windows. Luckily, the process of
    installing Maven on all of these operating systems is relatively painless
    and straightforward. The following sections outline the recommended
    best-practice for installing Maven on a variety of operating
    systems.</para>

    <section id="installation-sect-maven-osx">
      <title>Installing Maven on Mac OSX</title>

      <para>You can download a binary release of Maven<indexterm>
          <primary>installing Maven</primary>

          <secondary sortas="Mac OS X">on Mac OS X</secondary>
        </indexterm><indexterm>
          <primary sortas="maven @installing">Maven, installing</primary>

          <secondary sortas="Mac OS X">on Mac OS X</secondary>
        </indexterm><indexterm>
          <primary>Mac OS X, installing Maven on</primary>
        </indexterm> from <ulink
      url="http://maven.apache.org/download.html"></ulink>. Download the
      current release of Maven in a format that is convenient for you to work
      with. Pick an appropriate place for it to live, and expand the archive
      there. If you expanded the archive into the directory
      <filename>/usr/local/apache-maven-${maven.version}</filename>, you may
      want to create a symbolic link to make it easier to work with and to
      avoid the need to change any environment configuration when you upgrade
      to a newer version:</para>

      <screen>/usr/local % <command moreinfo="none">cd /usr/local
</command>/usr/local % <command moreinfo="none">ln -s apache-maven-${maven.version} maven
</command>/usr/local % <command>export M2_HOME=/usr/local/maven</command>
/usr/local % <command>export PATH=\${M2_HOME}/bin:\${PATH}</command></screen>

      <para>Once Maven is installed, you need to do a couple of things to make
      it work correctly. You need to add its <filename
      moreinfo="none">bin</filename> directory in the distribution (in this
      example, <filename moreinfo="none">/usr/local/maven/bin</filename>) to
      your command path. You also need to set the environment variable
      <varname>M2_HOME<indexterm>
          <primary>M2_HOME environment variable</primary>

          <secondary>Maven installation and</secondary>
        </indexterm><indexterm>
          <primary>PATH variable, Maven installation and</primary>
        </indexterm></varname> to the top-level directory you installed (in
      this example, <filename
      moreinfo="none">/usr/local/maven</filename>).</para>

      <note>
        <para>Installation instructions are the same for both
        <acronym>OSX</acronym> Tiger and <acronym>OSX</acronym> Leopard. It
        has been reported that Maven 2.0.6 is shipping with a preview release
        of XCode. If you have installed XCode, run <command>mvn</command> from
        the command-line to check availability. XCode installs Maven in
        <filename>/usr/share/maven</filename>. We recommend installing the
        most recent version of Maven ${maven.version} as there have been a
        number of critical bug fixes and improvements since Maven 2.0.6 was
        released.</para>
      </note>

      <para>You'll need to add both <envar>M2_HOME</envar> and
      <envar>PATH</envar> to a script that will run every time you login. To
      do this, add the following lines to
      <filename>.bash_login</filename>.</para>

      <programlisting>export M2_HOME=/usr/local/maven
export PATH=\${M2_HOME}/bin:\${PATH}</programlisting>

      <para>Once you've added these lines to your own environment, you will be
      able to run Maven from the command line.</para>

      <note>
        <para>These installation instructions assume that you are running
        bash.</para>
      </note>

      <section id="installation-sect-macports">
        <title>Installing Maven on OSX using MacPorts</title>

        <para>If you are using MacPorts, you can install the maven2 port by
        executing the following command-line:</para>

        <screen>$ <command>sudo port install maven2</command>
Password: ******
---&gt;  Fetching maven2
---&gt;  Attempting to fetch apache-maven-${maven.version}-bin.tar.bz2 from http://www.apache.org/dist/maven/binaries
---&gt;  Verifying checksum(s) for maven2
---&gt;  Extracting maven2
---&gt;  Configuring maven2
---&gt;  Building maven2 with target all
---&gt;  Staging maven2 into destroot
---&gt;  Installing maven2 ${maven.version}_0
---&gt;  Activating maven2 ${maven.version}_0
---&gt;  Cleaning maven2
</screen>

        <para>For more information about the maven2 port, see the maven2
        <filename><ulink
        url="http://trac.macports.org/browser/trunk/dports/java/maven2/Portfile">Portfile</ulink></filename>.
        For more information about MacPorts and how to install it, see the
        <ulink url="http://www.macports.org/index.php">MacPorts project
        page</ulink>.</para>
      </section>
    </section>

    <section id="installation-sect-windows">
      <title>Installing Maven on Microsoft Windows</title>

      <para>Installing Maven on Windows is very similar to installing Maven on
      Mac <acronym>OSX</acronym>, the main differences being the installation
      location and the setting of an environment variable. This book assumes a
      Maven installation directory of <filename>c:\Program
      Files\apache-maven-${maven.version}</filename>, but it won't make a
      difference if you install Maven in another directory as long as you
      configure the proper environment variables. Once you've unpacked Maven
      to the installation directory, you will need to set two environment
      variables—<envar>PATH</envar> and <envar>M2_HOME</envar>. To set these
      environment variables from the command-line, type in the following
      commands:</para>

      <screen>C:\Users\tobrien &gt; <command>set M2_HOME=c:\Program Files\apache-maven-${maven.version}</command>
C:\Users\tobrien &gt; <command>set PATH=%PATH%;%M2_HOME%\bin</command></screen>

      <para>Setting these environment variables on the command-line will allow
      you to run Maven in your current session, but unless you add them to the
      System environment variables through the control panel, you'll have to
      execute these two lines every time you log into your system. You should
      modify both of these variables through the Control Panel in Microsoft
      Windows.<!--TODO: Document process of setting environment variables in the window control panel system dialog.--></para>
    </section>

    <section id="installation-sect-maven-linux">
      <title>Installing Maven on Linux</title>

      <para>To install Maven on a Linux machine follow the exact procedure
      outlined in <xref linkend="installation-sect-maven-osx" />.</para>
    </section>

    <section id="installation-sect-bsd">
      <title>Installing Maven on FreeBSD or OpenBSD</title>

      <para>To install Maven on a FreeBSD or OpenBSD machine, follow the exact
      procedure outlined in <xref
      linkend="installation-sect-maven-osx" />.</para>
    </section>
  </section>

  <section id="installation-sect-test-install">
    <title>Testing a Maven Installation</title>

    <para>Once Maven is installed, you can check the version by running
    <command>mvn -v</command> from the command-line. If Maven has been
    installed, you should see something resembling the following
    output.</para>

    <screen>$ <command>mvn -v</command>
Apache Maven 2.1.0 (r755702; 2009-03-18 14:10:27-0500)
Java version: 1.5.0_16
Java home: /System/Library/Frameworks/JavaVM.framework/Versions/1.5.0/Home
Default locale: en_US, platform encoding: MacRoman
OS name: "mac os x" version: "10.5.6" arch: "i386" Family: "unix"</screen>

    <para>If you see this output, you know that Maven is available and ready
    to be used. If you do not see this output, and your operating system
    cannot find the <command>mvn</command> command, make sure that your
    <envar>PATH</envar> environment variable and <envar>M2_HOME</envar>
    environment variable have been properly set.</para>
  </section>

  <section id="installation-sect-details">
    <title>Maven Installation Details</title>

    <para>Maven's download measures in at roughly 1.5 MiB<footnoteref
    linkend="foot-installation-mebibytes" />, it has attained such a slim
    download size because the core of Maven has been designed to retrieve
    plugins and dependencies from a remote repository on-demand. When you
    start using Maven, it will start to download plugins to a local repository
    described in <xref linkend="installation-sect-user" />. In case you are
    curious, let's take a quick look at what is in Maven's installation
    directory.<footnote id="foot-installation-mebibytes">
        <para>Ever purchased a 200 GB hard drive only to realize that it
        showed up as less than 200 GiB when you installed it? Computers
        understand Gibibytes, but retailers sell products using Gigabytes. MiB
        stands for Mebibyte which is defined as 2<superscript>20</superscript>
        or 1024<superscript>2</superscript>. These binary prefix standards are
        endorsed by the <acronym>IEEE</acronym>, <acronym>CIPM</acronym>, and
        and <acronym>IEC</acronym>. For more information about Kibibytes,
        Mebibytes, Gibibytes, and Tebibytes see <ulink
        url="http://en.wikipedia.org/wiki/Mebibyte">http://en.wikipedia.org/wiki/Mebibyte</ulink>,</para>
      </footnote></para>

    <screen>/usr/local/maven $ <command>ls -p1</command>
LICENSE.txt
NOTICE.txt
README.txt
bin/
boot/
conf/
lib/</screen>

    <para><filename>LICENSE.txt</filename> contains the software license for
    <indexterm>
        <primary>LICENSE.txt file</primary>
      </indexterm>Apache Maven. This license is described in some detail later
    in the section <xref linkend="installation-sect-license" />.”
    <filename>NOTICE.txt</filename> contains some notices and attributions
    <indexterm>
        <primary>NOTICE.txt file</primary>
      </indexterm>required by libraries that Maven depends on.<indexterm>
        <primary>README.txt file</primary>
      </indexterm> <filename role="keep-together">README.txt</filename>
    contains some installation instructions. <filename>bin/</filename>
    contains the <filename>mvn</filename> script <indexterm>
        <primary>mvn script</primary>
      </indexterm>that executes Maven. <filename>boot/</filename> contains a
    JAR file (<filename>classwords-1.1.jar</filename>) that is responsible for
    creating <indexterm>
        <primary>classwords-1.1.jar file</primary>
      </indexterm>the Class Loader in which Maven executes.
    <filename>conf/</filename> contains a global <filename
    role="keep-together">settings.xml</filename> that can be used to
    <indexterm>
        <primary>settings.xml file</primary>
      </indexterm>customize the behavior of your Maven installation. If you
    need to customize Maven, it is customary to override any settings in a
    <filename>settings.xml</filename> file stored in<indexterm>
        <primary>m2 directory, contents of</primary>
      </indexterm> <filename>~/.m2</filename>. <filename>lib/</filename>
    contains a single JAR file
    (<filename>maven-core-${maven.version}-uber.jar</filename>) that contains
    the core of Maven.</para>

    <note>
      <para>Unless you are working in a shared Unix environment, you should
      avoid customizing the <filename>settings.xml</filename> in
      <filename>M2_HOME/conf</filename>. Altering the global
      <filename>settings.xml</filename> file in the Maven installation itself
      is usually unnecessary and it tends to complicate the upgrade procedure
      for Maven as you'll have to remember to copy the customized
      <filename>settings.xml</filename> from the old Maven installation to the
      new installation. If you need to customize
      <filename>settings.xml</filename>, you should be editing your own
      <filename>settings.xml</filename> in
      <filename>~/.m2/settings.xml</filename>.</para>
    </note>

    <section id="installation-sect-user">
      <title>User-specific Configuration and Repository</title>

      <para>Once you start using Maven extensively, you'll notice that Maven
      has created some local user-specific configuration files and a local
      repository in your home directory. In <filename>~/.m2</filename> there
      will be:</para>

      <variablelist>
        <varlistentry>
          <term>~/.m2/settings.xml</term>

          <listitem>
            <para>A file containing user-specific configuration for
            authentication, repositories, and other information to customize
            the behavior of Maven.</para>
          </listitem>
        </varlistentry>

        <varlistentry>
          <term>~/.m2/repository/</term>

          <listitem>
            <para>This directory contains your local Maven repository. When
            you download a dependency from a remote Maven repository, Maven
            stores a copy of the dependency in your local repository.</para>
          </listitem>
        </varlistentry>
      </variablelist>

      <note>
        <para>In Unix (and OSX), your home directory will be referred to using
        a tilde (i.e. <filename>~/bin</filename> refers to
        <filename>/home/tobrien/bin</filename>). In Windows, we will also be
        using <filename>~</filename> to refer to your home directory. In
        Windows XP, your home directory is <filename>C:\Documents and
        Settings\tobrien</filename>, and in Windows Vista, your home directory
        is <filename>C:\Users\tobrien</filename>. From this point forward, you
        should translate paths such as <filename>~/m2</filename> to your
        operating system's equivalent.</para>
      </note>
    </section>

    <section id="installation-sect-upgrade">
      <title>Upgrading a Maven Installation</title>

      <para>If you've installed Maven on a Mac OSX or Unix machine according
      to the details in <xref lang="" linkend="installation-sect-maven-osx" />
      and <xref linkend="installation-sect-maven-linux" />. It should be easy
      to upgrade to newer versions of Maven when they become available. Simply
      install the newer version of Maven
      (<filename>/usr/local/maven-2.future</filename>) next to the existing
      version of Maven
      (<filename>/usr/local/maven-${maven.version}</filename>). Then switch
      the symbolic link <filename>/usr/local/maven</filename> from
      <filename>/usr/local/maven-${maven.version}</filename> to
      <filename>/usr/local/maven-2.future</filename>. Since, you've already
      set your <varname>M2_HOME</varname> variable to point to
      <filename>/usr/local/maven</filename>, you won't need to change any
      environment variables.</para>

      <para>If you have installed Maven on a Windows machine, simply unpack
      Maven to <filename>c:\Program Files\maven-2.future</filename> and update
      your <varname>M2_HOME</varname> variable.</para>

      <note>
        <para>If you have any customizations to the global
        <filename>settings.xml</filename> in
        <filename>M2_HOME/conf</filename>, you will need to copy this
        <filename>settings.xml</filename> to the <filename>conf</filename>
        directory of the new Maven installation.</para>
      </note>
    </section>

    <section id="installation-sect-upgrade-detail">
      <title>Upgrading from Maven 1.x to Maven 2.x</title>

      <para>If you are upgrading from Maven 1 to Maven 2, you are going to be
      using an entirely new POM and repository structure. If you have already
      created a custom Maven 1 repository to hold custom artifacts, you can
      use the Nexus Repository Manager to expose a Maven 1 repository in a
      format that can be understood by Maven 2 clients. For more information
      about the Nexus Repository Manager, see <xref
      linkend="repository-manager" />. In addition to tools like Nexus, you
      can also configure references to repositories to use the
      <varname>legacy</varname> layout format. For more information about
      configuring a reference to a legacy repository, see <xref
      linkend="appendix-settings-sect-settings-repository" />.</para>

      <para>If you have a set of Maven 1 projects, you may want to know about
      the Maven One Plugin. The Maven One Plugin was designed to help projects
      migrate from Maven 1 to Maven 2. If you have a Maven 1 project, you can
      convert the project's POM by running the <varname>one:convert</varname>
      goal as follows:</para>

      <screen>$ cd my-project
$ mvn one:convert</screen>

      <para><varname>one:convert</varname> will read a
      <filename>project.xml</filename> and produce a
      <filename>pom.xml</filename> that is compatible with Maven 2. If you've
      customized a Maven 1 build using Jelly script in a
      <filename>maven.xml</filename> file, you will need to investigate other
      options. While Maven 1 emphasized Jelly scripting for customizing
      builds, Maven 2 favors custom plugins or customization through scripting
      Plugins or the Maven Antrun Plugin.</para>

      <para>The most important thing to know about when upgrading from Maven 1
      to Maven 2 is that Maven 2 is a completely different build framework.
      Maven 2 introduces the concept of the Maven Lifecycle and redefines the
      relationships between plugins. If you upgrade from Maven 1 to Maven 2,
      you need to invest some time in learning about the differences between
      the two versions. Although it might seem straightforward to start
      learning about the new POM structure, you should focus on the Lifecycle
      first. If you understand the Maven Lifecycle, you will be able to use
      Maven to its fullest potential.</para>
    </section>
  </section>

  <section id="installation-sect-uninstalling">
    <title>Uninstalling Maven</title>

    <para>Most of the installation instructions involve unpacking of the Maven
    distribution archive in a directory and setting of various environment
    variables. If you need to remove Maven from your computer, all you need to
    do is delete your Maven installation directory and remove the environment
    variables. You will also want to delete the <filename>~/.m2</filename>
    directory as it contains your local repository.</para>
  </section>

  <section id="installation-sect-getting-help">
    <title>Getting Help with Maven</title>

    <para>While this book aims to be a comprehensive reference, there are
    going to be topics we will miss and special situations and tips which are
    not covered. While the core of Maven is very simple, the real work in
    Maven happens in the plugins, and there are too many plugins available to
    cover them all in one book. You are going to encounter problems and
    features which have not been covered in this book; in these cases, we
    suggest searching for answers at the following locations:</para>

    <variablelist>
      <varlistentry>
        <term><ulink
        url="http://maven.apache.org">http://maven.apache.org</ulink></term>

        <listitem>
          <para>This will be the first place to look, the Maven web site
          contains a wealth of information and documentation. Every plugin has
          a few pages of documentation and there are a series of "quick start"
          documents which will be helpful in addition to the content of this
          book. While the Maven site contains a wealth of information, it can
          also be a frustrating, confusing, and overwhelming. There is a
          custom Google search box on the main Maven page that will search
          known Maven sites for information. This provides better results than
          a generic Google search.</para>
        </listitem>
      </varlistentry>

      <varlistentry>
        <term>Maven User Mailing List</term>

        <listitem>
          <para>The Maven User mailing list is the place for users to ask
          questions. Before you ask a question on the user mailing list, you
          will want to search for any previous discussion that might relate to
          your question. It is bad form to ask a question that has already
          been asked without first checking to see if an answer already exists
          in the archives. There are a number of useful mailing list archive
          browsers, we've found Nabble to the be the most useful. You can
          browse the User mailing list archives here: <ulink
          url="http://www.nabble.com/Maven---Users-f178.html">http://www.nabble.com/Maven---Users-f178.html</ulink>.
          You can join the user mailing list by following the instructions
          available here <ulink
          url="http://maven.apache.org/mail-lists.html">http://maven.apache.org/mail-lists.html</ulink>.</para>
        </listitem>
      </varlistentry>

      <varlistentry>
        <term><ulink
        url="http://www.sonatype.com">http://www.sonatype.com</ulink></term>

        <listitem>
          <para>Sonatype maintains an online copy of this book and other
          tutorials related to Apache Maven.</para>
        </listitem>
      </varlistentry>
    </variablelist>

    <note>
      <para>Despite the best efforts of some very dedicated Maven
      contributors, the Maven web site is poorly organized and full of
      incomplete (and sometimes) misleading snippets of documentation.
      Throughout the Maven community there is a lack of a common standards for
      plugin documentation, some plugins are heavily documented while others
      lack even the most basic instructions for usage. Often your best bet is
      to search for a solution in the archives of the user mailing list. If
      you really want to help submit a patch to the Maven site (or this
      book).</para>
    </note>
  </section>

  <section id="installation-sect-help-plugin-install">
    <title>Using the Maven Help Plugin</title>

    <para>Throughout the book, we will be introducing Maven plugins, talking
    about Maven Project Object Model (<acronym>POM</acronym>) files, settings
    files, and profiles. There are going to be times when you need a tool to
    help you make sense of some of the models that Maven is using and what
    goals are available on a specific plugin. The Maven Help plugin allows you
    to list active Maven profiles, display an effective
    <acronym>POM</acronym>, print the effective settings, or list the
    attributes of a Maven plugin.</para>

    <note>
      <para>For a conceptual overview of the POM and plugins see <xref
      linkend="simple-project" xrefstyle="style:title" />.</para>
    </note>

    <para>The Maven Help plugin has four goals. The first three
    goals—<varname>active-profiles</varname>,
    <varname>effective-pom</varname>, and
    <varname>effective-settings</varname>—describe a particular project and
    must be run in the base directory of a project. The last
    goal—<varname>describe</varname>—is slightly more complex, showing you
    information about a plugin or a plugin goal. The following commands
    provide some general information about the four goals:</para>

    <variablelist>
      <varlistentry>
        <term>help:active-profiles</term>

        <listitem>
          <para>Lists the profiles (project, user, global) which are active
          for the build.</para>
        </listitem>
      </varlistentry>

      <varlistentry>
        <term>help:effective-pom</term>

        <listitem>
          <para>Displays the effective <acronym>POM</acronym> for the current
          build, with the active profiles factored in.</para>
        </listitem>
      </varlistentry>

      <varlistentry>
        <term>help:effective-settings</term>

        <listitem>
          <para>Prints out the calculated settings for the project, given any
          profile enhancement and the inheritance of the global settings into
          the user-level settings.</para>
        </listitem>
      </varlistentry>

      <varlistentry>
        <term>help:describe</term>

        <listitem>
          <para>Describes the attributes of a plugin. This need not run under
          an existing project directory. You must at least give the
          <varname>groupId</varname> and <varname>artifactId</varname> of the
          plugin you wish to describe.</para>
        </listitem>
      </varlistentry>
    </variablelist>

    <section id="installation-sect-describing-plugin">
      <title>Describing a Maven Plugin</title>

      <para>Once you start using Maven, you'll spend most of your time trying
      to get more information about Maven Plugins: How do plugins work? What
      are the configuration parameters? What are the goals? The
      <varname>help:describe</varname> goal is something you'll be using very
      frequently to retrieve this information. With the
      <varname>plugin</varname> parameter you can specify a plugin you wish to
      investigate, passing in either the plugin prefix (e.g.
      <varname>maven-help-plugin</varname> as <varname>help</varname>) or the
      <varname>groupId:artifact[:version]</varname>, where version is
      optional. For example, the following command uses the Help plugin's
      <varname>describe</varname> goal to print out information about the
      Maven Help plugin.</para>

      <screen>$ <command>mvn help:describe -Dplugin=help</command>
...
Group Id:  org.apache.maven.plugins
Artifact Id: maven-help-plugin
Version:     2.0.1
Goal Prefix: help
Description:

The Maven Help plugin provides goals aimed at helping to make sense out of
    the build environment. It includes the ability to view the effective
    POM and settings files, after inheritance and active profiles
    have been applied, as well as a describe a particular plugin goal to give 
    usage information.
...
</screen>

      <para>Executing the <varname>describe</varname> goal with the
      <varname>plugin</varname> parameter printed out the Maven coordinates
      for the plugin, the goal prefix, and a brief description of the plugin.
      While this information is helpful, you'll usually be looking for more
      detail than this. If you want the Help plugin to print a full list of
      goals with parameters, execute the <varname>help:describe</varname> goal
      with the parameter <varname>full</varname> as follows:</para>

      <screen>$ <command>mvn help:describe -Dplugin=help -Dfull</command>
...
Group Id:  org.apache.maven.plugins
Artifact Id: maven-help-plugin
Version:     2.0.1
Goal Prefix: help
Description:

The Maven Help plugin provides goals aimed at helping to make sense out of
    the build environment. It includes the ability to view the effective
    POM and settings files, after inheritance and active profiles
    have been applied, as well as a describe a particular plugin goal to 
    give usage information.

Mojos:

===============================================
Goal: 'active-profiles'
===============================================
Description:

Lists the profiles which are currently active for this build.

Implementation: org.apache.maven.plugins.help.ActiveProfilesMojo
Language: java

Parameters:
-----------------------------------------------

[0] Name: output
Type: java.io.File
Required: false
Directly editable: true
Description:

This is an optional parameter for a file destination for the output of 
this mojo...the listing of active profiles per project.

-----------------------------------------------

[1] Name: projects
Type: java.util.List
Required: true
Directly editable: false
Description:

This is the list of projects currently slated to be built by Maven.

-----------------------------------------------

This mojo doesn't have any component requirements.
===============================================

... removed the other goals ...
</screen>

      <para>This option is great for discovering all of a plugin's goals as
      well as their parameters. But sometimes this is far more information
      than necessary. To get information about a single goal, set the
      <varname>mojo</varname> parameter as well as the
      <varname>plugin</varname> parameter. The following command lists all of
      the information about the Compiler plugin's <varname>compile</varname>
      goal.</para>

      <screen>$ <command>mvn help:describe -Dplugin=compiler -Dmojo=compile -Dfull</command></screen>

      <note>
        <para>What? A Mojo? In Maven, a Plugin goal is known as a
        "Mojo".</para>
      </note>
    </section>
  </section>

  <section id="installation-sect-license">
    <title>About the Apache Software License</title>

    <para>Apache Maven is released under the Apache Software License, Version
    2.0. If you want to read this license, you can read
    <filename>\${M2_HOME}/LICENSE.txt</filename> or read this license on the
    Open Source Initiative's web site here <ulink
    url="http://www.opensource.org/licenses/apache2.0.php">http://www.opensource.org/licenses/apache2.0.php</ulink>.</para>

    <para>There's a good chance that, if you are reading this book, you are
    not a lawyer. If you are wondering what the Apache License, Version 2.0
    means, the Apache Software Foundation has assembled a very helpful
    Frequently Asked Questions (FAQ) page about the license available here
    <ulink
    url="http://www.apache.org/foundation/licence-FAQ.html">http://www.apache.org/foundation/licence-FAQ.html</ulink>.
    Here's is the answer to the question "I am not a lawyer. What does it all
    mean?"</para>

    <para><blockquote>
        <para><emphasis>[This license] allows you to:</emphasis></para>

        <itemizedlist>
          <listitem>
            <para>freely download and use Apache software, in whole or in
            part, for personal, company internal, or commercial
            purposes;</para>
          </listitem>

          <listitem>
            <para>use Apache software in packages or distributions that you
            create.</para>
          </listitem>
        </itemizedlist>

        <para><emphasis>It forbids you to:</emphasis></para>

        <itemizedlist>
          <listitem>
            <para>redistribute any piece of Apache-originated software without
            proper attribution;</para>
          </listitem>

          <listitem>
            <para>use any marks owned by The Apache Software Foundation in any
            way that might state or imply that the Foundation endorses your
            distribution;</para>
          </listitem>

          <listitem>
            <para>use any marks owned by The Apache Software Foundation in any
            way that might state or imply that you created the Apache software
            in question.</para>
          </listitem>
        </itemizedlist>

        <para><emphasis>It requires you to:</emphasis></para>

        <itemizedlist>
          <listitem>
            <para>include a copy of the license in any redistribution you may
            make that includes Apache software;</para>
          </listitem>

          <listitem>
            <para>provide clear attribution to The Apache Software Foundation
            for any distributions that include Apache software.</para>
          </listitem>
        </itemizedlist>

        <para><emphasis>It does not require you to:</emphasis></para>

        <itemizedlist>
          <listitem>
            <para>include the source of the Apache software itself, or of any
            modifications you may have made to it, in any redistribution you
            may assemble that includes it;</para>
          </listitem>

          <listitem>
            <para>submit changes that you make to the software back to the
            Apache Software Foundation (though such feedback is
            encouraged).</para>
          </listitem>
        </itemizedlist>
      </blockquote></para>

    <para>This ends the installation information. The next part of the book
    contains Maven examples.</para>
  </section>
</chapter>