<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE chapter PUBLIC "-//OASIS//DTD DocBook XML V4.5//EN"
"http://www.oasis-open.org/docbook/xml/4.5/docbookx.dtd">
<chapter id="configuring">
  <title>Configuration Maven</title>

  <section>
    <title>Configuration des Plugins Maven</title>

    <para>Pour personnaliser le comportement d'un plugin Maven, vous devez configurer celui-ci dans le POM du projet.
    Les sections suivantes présentent les différents moyens à votre disposition pour personnaliser la configuration d'un plugin Maven.</para>

    <section>
      <title>Paramètres du Plugin Configuration</title>

      <para>Les plugins Maven sont configurés par l'intermédiaire de propriétés définies par goals.
      Par exemple, si vous jetez un coup d'oeil au goal <varname>compile</varname> du plugin Maven Compiler, 
      vous verrez une liste de paramètres de configuration, comme <varname>source</varname>,
      <varname>target</varname>, <varname>compilerArgument</varname>,
      <varname>fork</varname>, <varname>optimize</varname>, ...  
      Maintenant, si vous regardez le goal <varname>testCompile</varname>, vous trouverez une liste différente de paramètres. 
      Pour trouver la liste des paramètres de configuration d'un goal d'un plugin, utilisez le plugin Maven Help.
      Celui-ci permet d'afficher la description d'un plugin ou d'un goal en particulier.</para>      

      <para>Pour afficher la description d'un plugin en particulier, utilisez le goal <varname>help:describe</varname> de la manière suivante
      à partir de la ligne de commande : </para> 

      <screen>$ <command>mvn help:describe -Dcmd=compiler:compile</command>
[INFO] [help:describe {execution: default-cli}]
[INFO] 'compiler:compile' is a plugin goal (aka mojo).
Mojo: 'compiler:compile'
compiler:compile
  Description: Compiles application sources
  Deprecated. No reason given</screen>

      <para>Pour plus d'informations sur les paramètres de configuration disponibles, utilisez cette même commande en y ajoutant l'argument
      <varname>-Ddetail</varname> :</para> 

      <screen>$ <command>mvn help:describe -Dcmd=compiler:compile -Ddetail</command>
[INFO] [help:describe {execution: default-cli}]
[INFO] 'compiler:compile' is a plugin goal (aka mojo).
Mojo: 'compiler:compile'
compiler:compile
  Description: Compiles application sources
  Deprecated. No reason given
  Implementation: org.apache.maven.plugin.CompilerMojo
  Language: java
  Bound to phase: compile

  Available parameters:

    compilerArgument
      Sets the unformatted argument string to be passed to the compiler if fork
      is set to true.
      
      This is because the list of valid arguments passed to a Java compiler
      varies based on the compiler version.
      Deprecated. No reason given

    compilerArguments
      Sets the arguments to be passed to the compiler (prepending a dash) if
      fork is set to true.
      
      This is because the list of valid arguments passed to a Java compiler
      varies based on the compiler version.
      Deprecated. No reason given

    compilerId (Default: javac)
      The compiler id of the compiler to use. See this guide for more
      information.
      Deprecated. No reason given

    compilerVersion
      Version of the compiler to use, ex. '1.3', '1.5', if fork is set to true.
      Deprecated. No reason given

    debug (Default: true)
      Set to true to include debugging information in the compiled class files.
      Deprecated. No reason given

    encoding
      The -encoding argument for the Java compiler.
      Deprecated. No reason given

    excludes
      A list of exclusion filters for the compiler.
      Deprecated. No reason given

    executable
      Sets the executable of the compiler to use when fork is true.
      Deprecated. No reason given

    failOnError (Default: true)
      Indicates whether the build will continue even if there are compilation
      errors; defaults to true.
      Deprecated. No reason given

    fork (Default: false)
      Allows running the compiler in a separate process. If 'false' it uses the
      built in compiler, while if 'true' it will use an executable.
      Deprecated. No reason given

    includes
      A list of inclusion filters for the compiler.
      Deprecated. No reason given

    maxmem
      Sets the maximum size, in megabytes, of the memory allocation pool, ex.
      '128', '128m' if fork is set to true.
      Deprecated. No reason given

    meminitial
      Initial size, in megabytes, of the memory allocation pool, ex. '64',
      '64m' if fork is set to true.
      Deprecated. No reason given

    optimize (Default: false)
      Set to true to optimize the compiled code using the compiler's
      optimization methods.
      Deprecated. No reason given

    outputFileName
      Sets the name of the output file when compiling a set of sources to a
      single file.
      Deprecated. No reason given

    showDeprecation (Default: false)
      Sets whether to show source locations where deprecated APIs are used.
      Deprecated. No reason given

    showWarnings (Default: false)
      Set to true to show compilation warnings.
      Deprecated. No reason given

    source
      The -source argument for the Java compiler.
      Deprecated. No reason given

    staleMillis (Default: 0)
      Sets the granularity in milliseconds of the last modification date for
      testing whether a source needs recompilation.
      Deprecated. No reason given

    target
      The -target argument for the Java compiler.
      Deprecated. No reason given

    verbose (Default: false)
      Set to true to show messages about what the compiler is doing.
      Deprecated. No reason given
</screen>

      <para>Si vous désirez récupérer la liste des goals d'un plugin, vous pouvez exécuter le goal <varname>help:describe</varname> et lui passer un paramètre. 
      Ce paramètre accepte soit un préfixe de plugin soit un <varname>groupId</varname> et un <varname>artifactId</varname> comme le montrent les exemples suivants :</para>

      <screen>$ <command>mvn help:describe -Dplugin=compiler</command>
[INFO] [help:describe {execution: default-cli}]
[INFO] org.apache.maven.plugins:maven-compiler-plugin:2.0.2

Name: Maven Compiler Plugin
Description: Maven Plugins
Group Id: org.apache.maven.plugins
Artifact Id: maven-compiler-plugin
Version: 2.0.2
Goal Prefix: compiler

This plugin has 2 goals:

compiler:compile
  Description: Compiles application sources
  Deprecated. No reason given

compiler:testCompile
  Description: Compiles application test sources
  Deprecated. No reason given
</screen>

      <para>Vous pouvez utiliser le <varname>groupId</varname> et l'<varname>artifactId</varname> du plugin 
      pour obtenir la même liste de goals.</para> 

      <screen>$ <command>mvn help:describe -Dplugin=org.apache.maven.plugins:maven-compiler-plugin</command>
</screen>

      <para>En passant l'argument <varname>-Ddetail</varname> au goal <varname>help:describe</varname>,
      vous demandez à Maven d'afficher tous les goals ainsi que tous leurs paramètres d'un plugin.</para>   

    </section>

    <section>
      <title>Ajouter des Dépendances à un Plugin</title>

      <para>Si vous désirez configurer un plugin pour qu'il utilise des versions spécifiques de ces dépendances,
      vous pouvez effectuer cela via la balise <varname>dependencies</varname>.
      Quand le plugin s'exécute, il se lance avec un classpath contenant ces dépendances. 
      L'<xref linkend="ex-plugin-dependencies" /> est un exemple de configuration plugin qui surcharge les
      version de ses dépendances et en ajoute une nouvelle pour faciliter l'exécution du goal.</para>

      <example id="ex-plugin-dependencies">
        <title>Ajout d'une dépendance à un Plugin</title>

        <programlisting>&lt;plugin&gt;
  &lt;groupId&gt;com.agilejava.docbkx&lt;/groupId&gt;
  &lt;artifactId&gt;docbkx-maven-plugin&lt;/artifactId&gt;
  &lt;version&gt;2.0.9&lt;/version&gt;
  &lt;dependencies&gt;
    &lt;dependency&gt;
      &lt;groupId&gt;docbook&lt;/groupId&gt;
      &lt;artifactId&gt;docbook-xml&lt;/artifactId&gt;
      &lt;version&gt;4.5&lt;/version&gt;
    &lt;/dependency&gt;
    &lt;dependency&gt;
      &lt;groupId&gt;org.apache.fop&lt;/groupId&gt;
      &lt;artifactId&gt;fop-pdf-images&lt;/artifactId&gt;
      &lt;version&gt;1.3&lt;/version&gt;
    &lt;/dependency&gt;
    &lt;dependency&gt;
      &lt;groupId&gt;org.apache.fop&lt;/groupId&gt;
      &lt;artifactId&gt;fop-pdf-images-res&lt;/artifactId&gt;
      &lt;version&gt;1.3&lt;/version&gt;
      &lt;classifier&gt;res&lt;/classifier&gt;
    &lt;/dependency&gt;
    &lt;dependency&gt;
      &lt;groupId&gt;pdfbox&lt;/groupId&gt;
      &lt;artifactId&gt;pdfbox&lt;/artifactId&gt;
      &lt;version&gt;0.7.4-dev&lt;/version&gt;
      &lt;classifier&gt;dev&lt;/classifier&gt;
    &lt;/dependency&gt;
  &lt;/dependencies&gt;
&lt;/plugin&gt;</programlisting>
      </example>
    </section>

    <section>
      <title>Configurer les Paramètres Globaux d'un Plugin</title>

      <para>Pour affecter une valeur à un paramètre de configuration sur un projet,
      utilisez le fichier XML de l'<xref linkend="ex-config-global-plugin-param" />. 
      À moins que cette configuration ne soit surchargée par une configuration de paramètre de plugin plus spécifique,
      Maven utilisera les valeurs définies dans la balise <sgmltag>plugin</sgmltag> pour tous les goals exécutés par ce plugin.</para>

      <example id="ex-config-global-plugin-param" label="">
        <title>Configurer un plugin Maven</title>

        <programlisting>&lt;plugin&gt;
  &lt;groupId&gt;org.apache.maven.plugins&lt;/groupId&gt;
  &lt;artifactId&gt;maven-compiler-plugin&lt;/artifactId&gt;
  &lt;configuration&gt;
    &lt;source&gt;1.5&lt;/source&gt;
    &lt;target&gt;1.5&lt;/target&gt;
  &lt;/configuration&gt;
&lt;/plugin&gt;</programlisting>
      </example>
    </section>

    <section>
      <title>Modifier les Paramètres Spécifiques à une Exécution</title>

      <para>Vous pouvez configurer les paramètres d'un plugin spécifiquement pour l'exécution d'un goal Maven. 
      L'<xref linkend="ex-config-plugin-exec-params" />  montre comment passer un paramètre de configuration au goal exécuté
      par le plugin <varname>AntRun</varname> durant la phase de validation.
      Cette exécution héritera ainsi des paramètres de la balise <varname>configuration</varname> du plugin dont les valeurs
      seront mergées avec celles définies dans la l'exécution personnalisée.</para>

      <example id="ex-config-plugin-exec-params">
        <title>Surcharge des Paramètres de Configuration dans une Exécution</title>

        <programlisting>&lt;plugin&gt;
  &lt;artifactId&gt;maven-antrun-plugin&lt;/artifactId&gt;
  &lt;executions&gt;
    &lt;execution&gt;
      &lt;phase&gt;validate&lt;/phase&gt;
      &lt;goals&gt;
        &lt;goal&gt;run&lt;/goal&gt;
      &lt;/goals&gt;
      &lt;configuration&gt;
        &lt;tasks&gt;
          &lt;echo&gt;${PATH}=${env.PATH}&lt;/echo&gt;
          &lt;echo&gt;User's Home Directory: ${user.home}&lt;/echo&gt;
          &lt;echo&gt;Project's Base Director: ${basedir}&lt;/echo&gt;
        &lt;/tasks&gt;
      &lt;/configuration&gt;
    &lt;/execution&gt;
  &lt;/executions&gt;
&lt;/plugin&gt;
</programlisting>
      </example>
    </section>

    <section>
      <title>Configuration des Paramètres par Défaut pour une Exécution en Ligne de Commande</title>

      <para>Depuis Maven 2.2.0, vous pouvez fournir des paramètres de configuration pour les goals qui sont exécutés à partir de la ligne de commande.
      Pour cela, utilisez un id spécial pour l'exécution, "default-cli". 
      L'<xref linkend="ex-configure-plugin-default-cli" /> montre comment rattacher un goal à la phase package du cycle de vie qui produit le binaire. 
      Cet exemple configure également l'exécution <varname>default-cli</varname> du plugin Assembly pour qu'il utilise le descripteur <varname>jar-with-dependencies</varname>. 
      Le descripteur <filename>bin.xml</filename> sera utilisé durant le cycle de vie,
      et <varname>jar-with-dependencies</varname> sera utilisé lors de l'exécution de la commande <command>mvn assembly:assembly</command> à partir de la console.</para>

      <example id="ex-configure-plugin-default-cli" label="" lang="">
        <title>Configuration des Paramètres d'un Plugin pour une Execution en Ligne de Commande</title>

        <programlisting>&lt;plugin&gt;
  &lt;artifactId&gt;maven-assembly-plugin&lt;/artifactId&gt;
  &lt;configuration&gt;
    &lt;appendAssemblyId&gt;false&lt;/appendAssemblyId&gt;
  &lt;/configuration&gt;
  &lt;executions&gt;
    &lt;execution&gt;
      &lt;id&gt;assemble-binary&lt;/id&gt;
      &lt;phase&gt;package&lt;/phase&gt;
      &lt;goals&gt;
        &lt;goal&gt;single&lt;/goal&gt;
      &lt;/goals&gt;
      &lt;configuration&gt;
        &lt;descriptors&gt;
          &lt;descriptor&gt;src/main/assembly/bin.xml&lt;/descriptor&gt;
        &lt;/descriptors&gt;
      &lt;/configuration&gt;
    &lt;/execution&gt;
    &lt;execution&gt;
      &lt;id&gt;default-cli&lt;/id&gt;
      &lt;configuration&gt;
        &lt;descriptorRefs&gt;
          &lt;descriptorRef&gt;jar-with-dependencies&lt;/descriptorRef&gt;
        &lt;/descriptorRefs&gt;
      &lt;/configuration&gt;
    &lt;/execution&gt;
  &lt;/executions&gt;
&lt;/plugin&gt;
</programlisting>
      </example>
    </section>

    <section>
      <title>Configuation des Paramètres pour les Goals rattachés au Cycle de vie par Défaut</title>

      <para>Depuis Maven 2.2.0, si vous désirez personnaliser le comportement d'un goal qui est déjà rattaché au cycle de vie par défaut,
      vous pouvez utiliser un id spécial pour l'exécution, "default-&lt;goal&gt;".  
      Ainsi, vous pouvez par exemple personnaliser le comportement du goal <varname>jar</varname> du plugin Jar qui est rattaché 
      à la phase <varname>package</varname> du cycle de vie par défaut.
      Vous pouvez personnaliser les paramètres de configuration d'une exécution comme le présente l'<xref linkend="ex-configure-default-param" />.</para>

      <example id="ex-configure-default-param" label="">
        <title>Configuration d'un Paramètres pour l'Execution d'un Goal par Défaut</title>

        <programlisting>&lt;plugin&gt;
  &lt;artifactId&gt;maven-jar-plugin&lt;/artifactId&gt;
  &lt;executions&gt;
    &lt;execution&gt;
      &lt;id&gt;default-jar&lt;/id&gt;
      &lt;configuration&gt;
        &lt;excludes&gt;
          &lt;exclude&gt;**/somepackage/*&lt;/exclude&gt;
        &lt;/excludes&gt;
      &lt;/configuration&gt;
    &lt;/execution&gt;
    &lt;execution&gt;
      &lt;id&gt;special-jar&lt;/id&gt;
      &lt;phase&gt;package&lt;/phase&gt;
      &lt;goals&gt;
        &lt;goal&gt;jar&lt;/goal&gt;
      &lt;/goals&gt;
      &lt;configuration&gt;
        &lt;includes&gt;
          &lt;include&gt;**/sompackage/*&lt;/include&gt;
        &lt;/includes&gt;
        &lt;classifier&gt;somepackage&lt;/classifier&gt;
      &lt;/configuration&gt;
    &lt;/execution&gt;
  &lt;/executions&gt;
&lt;/plugin&gt;</programlisting>
      </example>

      <para>Dans cet exemple, le goal par défaut <varname>jar</varname> est personnalisé pour exclure le contenu d'un certain package. 
      Un autre goal <varname>jar</varname> est rattaché à la phase <varname>package</varname> pour créer un fichier JAR
      qui contient seulement que le contenu d'un package spécifique.</para> 

      <para>Configurer les paramètres des goals par défaut peut aussi être intéressant si vous avez besoin de configurer deux goals 
      rattachés au cycle de vie par défaut avec des valeurs de configuration différentes pour certains paramètres.   
      L'<xref linkend="ex-configure-two-default-param" /> montre comment configurer le goal <varname>resources:resources</varname>
      pour qu'il ne tienne pas compte des répertoires vides tout en configurant le goal <varname>resources:testResources</varname>
      pour qu'il en tienne compte.</para>

      <example id="ex-configure-two-default-param">
        <title>Configurer Deux Paramètres d'un Goal d'un Plugin</title>

        <programlisting>&lt;plugin&gt;
  &lt;artifactId&gt;maven-resources-plugin&lt;/artifactId&gt;
  &lt;executions&gt;
    &lt;execution&gt;
      &lt;id&gt;default-resources&lt;/id&gt;
      &lt;configuration&gt;
        &lt;includeEmptyDirs&gt;false&lt;/includeEmptyDirs&gt;
      &lt;/configuration&gt;
    &lt;/execution&gt;
    &lt;execution&gt;
      &lt;id&gt;default-testResources&lt;/id&gt;
      &lt;configuration&gt;
        &lt;includeEmptyDirs&gt;true&lt;/includeEmptyDirs&gt;
      &lt;/configuration&gt;
    &lt;/execution&gt;
  &lt;/executions&gt;
&lt;/plugin&gt;</programlisting>
      </example>
    </section>
  </section>
</chapter>
