<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE chapter PUBLIC "-//OASIS//DTD DocBook XML V4.5//EN"
"http://www.oasis-open.org/docbook/xml/4.5/docbookx.dtd">
<chapter id="archetypes" lang="fr">
  <title>Utilisation des archétypes Maven</title>

  <section id="archetype-sect-intro">
    <title>Introduction aux Archetypes Maven</title>

    <para>Un archétype est un template de projet Maven. 
    Il est utilisé par le plugin Maven Archetype pour créer de nouveaux projets.
    Les archétypes permettent à des projets open sources comme Apache Wicket ou Apache Cocoon de présenter à leurs utilisateurs 
    les fondations d'une nouvelle application.
    Les archétypes peuvent également être utilisés dans une société pour encourager une standardisation d'un ensemble de projets. 
    Si vous travaillez dans une société avec de larges équipes de développement, que tous vous projets doivent suivre une même structure, vous pouvez publier un archétype. 
    Ainsi, n'importe quel membre de l'équipe de développement sera capable de démarrer rapidement un projet qui respectant la structure préconisée. 
    Vous pouvez créer un nouveau projet à partir d'un archétype en utilisant le plugin Maven Archetype à partir de la ligne de commande ou
    en utilisant le wizard de création d'un nouveau projet proposé par le plugin <varname>m2eclipse</varname> tel que le présente la partie <xref linkend="eclipse" />.</para> 
  </section>

  <section id="archetype-sect-using">
    <title>Utilisation des archétypes</title>

    <para>Vous pouvez utiliser un archétype en utilisant le goal <varname>generate</varname> du plugin Maven Archetype à partir de la ligne de commande ou du plugin Eclipse <varname>m2eclipse</varname>.</para>

    <section id="archetype-sect-using-cmd-line">
      <title>Utilisation d'un archétype à partir de la ligne de commande</title>

      <para>La ligne de commande suivante peut être utilisée pour générer un projet à partir de l'archétype <varname>quickstart</varname>.</para>

      <screen>mvn archetype:generate \
  -DgroupId=org.sonatype.mavenbook \
  -DartifactId=quickstart \
  -Dversion=1.0-SNAPSHOT \
  -DpackageName=org.sonatype.mavenbook \
  -DarchetypeGroupId=org.apache.maven.archetypes \
  -DarchetypeArtifactId=maven-archetype-quickstart \
  -DarchetypeVersion=1.0 \
  -DinteractiveMode=false</screen>

      <para>Le goal <varname>generate</varname> accepte les paramètres suivants :</para>

      <variablelist>
        <varlistentry>
          <term><varname>groupId</varname></term>

          <listitem>
            <para>Il s'agit du <varname>groupId</varname> du projet que vous voulez créer.</para>
          </listitem>
        </varlistentry>

        <varlistentry>
          <term><varname>artifactId</varname></term>

          <listitem>
            <para>Il s'agit de l'<varname>artifactId</varname> du projet que vous voulez créer.</para>
          </listitem>
        </varlistentry>

        <varlistentry>
          <term><varname>version</varname></term>

          <listitem>
            <para>Il d'agit de la <varname>version</varname> du projet que vous voulez créer (valeur par défaut : 1.0-SNAPSHOT).</para>
          </listitem>
        </varlistentry>

        <varlistentry>
          <term><varname>packageName</varname></term>

          <listitem>
            <para>Le package par défaut de votre projet 
            (par défaut, il s'agit du <varname>groupId</varname>).</para>
          </listitem>
        </varlistentry>

        <varlistentry>
          <term><varname>archetypeGroupId</varname></term>

          <listitem>
            <para>Le <varname>groupId</varname> de l'archétype que vous désirez utiliser.</para>
          </listitem>
        </varlistentry>

        <varlistentry>
          <term><varname>archetypeArtifactId</varname></term>

          <listitem>
            <para>L'<varname>artifactId</varname> de l'archétype que vous désirez utiliser.</para>
          </listitem>
        </varlistentry>

        <varlistentry>
          <term><varname>archetypeVersion</varname></term>

          <listitem>
            <para>La <varname>version</varname> de l'archetype que vous désirez utiliser.</para>
          </listitem>
        </varlistentry>

        <varlistentry>
          <term><varname>interactiveMode</varname></term>

          <listitem>
            <para>Lorsque le goal <varname>generate</varname> goal est exécuté dans ce mode,
            les paramètres listés précédemment seront demandés un à un à l'utilisation.
            Dans le cas contraire, le goal <varname>generate</varname> utilise les valeurs passées sur la ligne de commande.</para>
          </listitem>
        </varlistentry>
      </variablelist>

      <para>Une fois que vous avez exécuté le goal <varname>generate</varname> avec la ligne de commande précédente,
      un répertoire <varname>quickstart</varname> contenant un nouveau projet Maven sera créé.
      Cette ligne de commande est relativement difficile à retenir.
      Dans la section suivante, nous générerons ce même projet en utilisant le mode interactif.</para> 
      
    </section>

    <section id="archtype-sect-generate">
      <title>Utilisation du goal Generate en mode interactif</title>

      <para>Le moyen le plus simple d'utiliser le plugin Maven Archetype pour générer un nouveau projet Maven à partie d'un archétype est d'utiliser le goal 
      <varname>archetype:generate</varname> en mode interactif.
      Ainsi, le goal <varname>generate</varname> vous demandera de choisir un archétype parmi une liste d'archétypes disponible. 
      Par défaut, le mode interactif est activé, la seule chose que vous avez à faire pour générer un nouveau projet est d'exécuter cette simple commande : <command>mvn
      archetype:generate</command>.</para>

      <screen>$ <command>mvn archetype:generate</command>
[INFO] ------------------------------------------------------------------------
[INFO] Building Maven Default Project
[INFO]    task-segment: [archetype:generate] (aggregator-style)
[INFO] [archetype:generate]
[INFO] Generating project in Interactive mode
[INFO] No archetype defined. Using maven-archetype-quickstart
Choose archetype:
1: internal -&gt; appfuse-basic-jsf 
2: internal -&gt; appfuse-basic-spring 
3: internal -&gt; appfuse-basic-struts
4: internal -&gt; appfuse-basic-tapestry
5: internal -&gt; appfuse-core
6: internal -&gt; appfuse-modular-jsf
7: internal -&gt; appfuse-modular-spring
8: internal -&gt; appfuse-modular-struts
9: internal -&gt; appfuse-modular-tapestry
10: internal -&gt; maven-archetype-j2ee-simple
11: internal -&gt; maven-archetype-marmalade-mojo
12: internal -&gt; maven-archetype-mojo
13: internal -&gt; maven-archetype-portlet
14: internal -&gt; maven-archetype-profiles
15: internal -&gt; maven-archetype-quickstart
16: internal -&gt; maven-archetype-site-simple
17: internal -&gt; maven-archetype-site
18: internal -&gt; maven-archetype-webapp
19: internal -&gt; jini-service-archetype
20: internal -&gt; softeu-archetype-seam
21: internal -&gt; softeu-archetype-seam-simple
22: internal -&gt; softeu-archetype-jsf
23: internal -&gt; jpa-maven-archetype
24: internal -&gt; spring-osgi-bundle-archetype
25: internal -&gt; confluence-plugin-archetype
26: internal -&gt; jira-plugin-archetype
27: internal -&gt; maven-archetype-har
28: internal -&gt; maven-archetype-sar
29: internal -&gt; wicket-archetype-quickstart
30: internal -&gt; scala-archetype-simple
31: internal -&gt; lift-archetype-blank
32: internal -&gt; lift-archetype-basic
33: internal -&gt; cocoon-22-archetype-block-plain
34: internal -&gt; cocoon-22-archetype-block
35: internal -&gt; cocoon-22-archetype-webapp
36: internal -&gt; myfaces-archetype-helloworld
37: internal -&gt; myfaces-archetype-helloworld-facelets
38: internal -&gt; myfaces-archetype-trinidad
39: internal -&gt; myfaces-archetype-jsfcomponents
40: internal -&gt; gmaven-archetype-basic
41: internal -&gt; gmaven-archetype-mojo
Choose a number: <command>15 </command></screen>

      <para>La première chose que le goal <varname>archetype:generate</varname> effectue en mode interactif et d'afficher la liste des archétypes disponibles à l'utilisateur.
      Le plugin Maven Archetype est founit avec un catalogue d'archétypes pour la plupart des types de projets standards (archétypes 10 à 18).
      Le catalogue d'archétypes du plugin peut également être complété par des archétypes tiers, 
      comme des archétypes permettant de générer des projets AppFuse, des plugins Confluence et Jira, des applications Wicket, des applications Scala, des projets Groovy, ...     
      Vous pouvez consulter une liste non exhaustive des archétypes proposés par des tiers dans la partie 
      <xref linkend="archetype-sect-third-party" />.</para>

      <para>Une fois que vous avez choisi un archétype, le plugin Maven Archetype télécharge celui-ci et vous demande de fournir des valeurs suivantes pour générer votre nouveau projet :</para>

      <itemizedlist>
        <listitem>
          <para><varname>groupId</varname></para>
        </listitem>

        <listitem>
          <para><varname>artifactId</varname></para>
        </listitem>

        <listitem>
          <para><varname>version</varname></para>
        </listitem>

        <listitem>
          <para><varname>package</varname></para>
        </listitem>
      </itemizedlist>

      <screen>[INFO] artifact org.apache.maven.archetypes:maven-archetype-quickstart: checking for updates from central
Downloading: http://repo1.maven.org/maven2/org/apache/maven/archetypes/maven-archetype-quickstart/1.0/maven-archetype-quickstart-1.0.jar
4K downloaded
Define value for groupId: : <command>org.sonatype.mavenbook</command>   
Define value for artifactId: : <command>quickstart</command>
Define value for version:  1.0-SNAPSHOT: : <command>1.0-SNAPSHOT</command> 
Define value for package:  org.sonatype.mavenbook: : <command>org.sonatype.mavenbook</command> 
Confirm properties configuration:
groupId: org.sonatype.mavenbook
artifactId: quickstart
version: 1.0-SNAPSHOT
package: org.sonatype.mavenbook
 Y: : <command>Y</command>
</screen>

      <para>Une fois ceci fait, le plugin Maven Archetype génère le projet dans le répertoire que vous avez fourni.</para>

      <screen>[INFO] ----------------------------------------------------------------------------
[INFO] Using following parameters for creating OldArchetype: maven-archetype-quickstart:RELEASE
[INFO] ----------------------------------------------------------------------------
[INFO] Parameter: groupId, Value: org.sonatype.mavenbook
[INFO] Parameter: packageName, Value: org.sonatype.mavenbook
[INFO] Parameter: basedir, Value: /Users/tobrien/tmp
[INFO] Parameter: package, Value: org.sonatype.mavenbook
[INFO] Parameter: version, Value: 1.0-SNAPSHOT
[INFO] Parameter: artifactId, Value: quickstart
[INFO] ********************* End of debug info from resources from generated POM ***********************
[INFO] OldArchetype created in dir: /Users/tobrien/tmp/quickstart
[INFO] ------------------------------------------------------------------------
[INFO] BUILD SUCCESSFUL
[INFO] ------------------------------------------------------------------------
[INFO] Total time: 1 minute 57 seconds
[INFO] Finished at: Sun Oct 12 15:39:14 CDT 2008
[INFO] Final Memory: 8M/15M
[INFO] ------------------------------------------------------------------------
</screen>
    </section>

    <section id="archetype-sect-using-m2eclipse">
      <title>Utilisation d'un archetype à partir du plugin Eclipse m2eclipse</title>

      <para>Le plugin <varname>m2eclipse</varname> vous permet de créer des projets Maven à partir d'archétypes en fournissant des wizzard intuitifs pour rechercher, 
      selectionner et configurer un archétype Maven.
      Pour plus d'informations sur la génération de projet Maven à partir d'un archétype et du plugin Eclipse <varname>m2eclipse</varname>, référez-vous 
      au chapitre <ulink
      url="http://www.sonatype.com/books/m2eclipse-book/reference/eclipse-sect-creating-project.html#eclipse-sect-m2e-create-archetype">"Creating
      a Maven Project from a Maven Archetype"</ulink> du livre <ulink
      url="http://www.sonatype.com/books/m2eclipse-book/">"Developing with Eclipse and Maven"</ulink>.</para>
    </section>
  </section>

  <section id="archetype-sect-available">
    <title>Archétypes disponibles</title>

    <para>Comme de plus en plus de projets adoptent Maven, de plus en plus d'artefacts sont publiés et 
    fournissent aux utilisateurs un moyen simple de créer des projets à partir de templates existant. 
    Cette section présente quelques-uns des archétypes de ces archétypes.</para>   

    <section id="archetype-sect-common-maven">
      <title>Archétypes Maven communs</title>

      <para>La plupart des archétypes les plus simples sont contenus dans le <varname>groupId</varname> <varname>org.apache.maven.archetypes</varname>.
      Ces archétypes ne possèdent que quelques options et proposent la création de projets relativement basics. 
      Vous pouvez les utiliser pour générer les quelques éléments de structure qui distingue un projet Maven d'un projet non-Maven.
      Par exemple, l'archétype <varname>webapp</varname> présenté ici, se contente de générer un fichier   
      <filename>web.xml</filename> dans le répertoire <filename>\${basedir}/src/main/webapp/WEB-INF</filename>.
      Dans le paragraphe <xref linkend="archetype-sect-third-party" /> vous pouvez effectuer un survol rapide de quelques-uns des archétypes tiers les plus remarquables
      comme ceux d'AppFuse ou de Cocoon.</para>

      <para>Les archétypes suivants peuvent être trouvés dans le <varname>groupId</varname> <varname>org.apache.maven.archetypes</varname> :</para>

      <section id="archetype-sect-quickstart">
        <title>maven-archetype-quickstart</title>

        <para>L'archétype <varname>quickstart</varname> est un simple projet du type <acronym>JAR</acronym> 
        et d'une simple dépendance sur JUnit.
        Après avoir généré un projet avec cet archétype, une seule classe sera générée, <classname>App</classname>,
        dans le package par défaut, avec une méthode <methodname>main()</methodname> qui affiche "Hello World!" sur la sortie standard.  
        Vous aurez également un test unitaire JUnit dans une classe nommée <varname>AppTest</varname> avec une méthode <methodname>testApp()</methodname> dont le code est trivial.</para>              
    
      </section>

      <section id="archetype-sect-webapp">
        <title>maven-archetype-webapp</title>

        <para>Cet archétype créé un simple projet de type 
        <acronym>WAR</acronym> avec une dépendance sur JUnit.
        Le dossier <filename>\${basedir}/src/main/webapp</filename> contient un fragment simple d'application web : 
        une page <filename>index.jsp</filename> et un fichier <filename>web.xml</filename> aussi simple que possible.  
        Même si cet archétype inclus une dépendance sur JUnit, aucun test n'est créé.
        Si vous recherchez un exemple fonctionnel d'application web, cet archétype vous décevra probablement.
        Consulter la partie <xref linkend="archetype-sect-third-party" /> pour trouver des exemples d'archétypes plus poussés.</para>
      </section>

      <section id="archetype-sect-mojo">
        <title>maven-archetype-mojo</title>

        <para>Cet archétype créé un simple projet du type <varname>maven-plugin</varname> contenant une seule classe nommée
        <classname>MyMojo</classname> dans le package par défaut du projet.
        La classe <classname>MyMojo</classname> contient un goal <varname>touch</varname> goal rattaché à la phase <varname>process-resources</varname>.
        Un fichier nommé <filename>touch.txt</filename> est généré dans le répertoire <filename>target/</filename> du nouveau projet.
        Ce nouveau projet a une dépendance sur <varname>maven-plugin-api</varname> et <varname>JUnit</varname>.</para>
      </section>
    </section>

    <section id="archetype-sect-third-party">
      <title>Archétypes tiers notables</title>

      <para>Cette section vous propose un bref aperçu de quelques archétypes fournis par des tiers non associés au projet Maven.
      Si vous recherchez une liste plus complète des archétypes disponibles, jetez un oeil à la liste des archétypes disponibles dans <varname>m2eclipse</varname>.
      <varname>m2eclipse</varname> vous permet de créer un nouveau projet Maven à partir d'une liste grandissante de plus de 80 archétypes pour la plupart des technologies.
      Le chapitre <ulink url="http://www.sonatype.com/books/m2eclipse-book/reference/eclipse-sect-creating-project.html#eclipse-sect-m2e-create-archetype">"Creating
      a Maven Project from a Maven Archetype"</ulink> du livre <ulink
      url="http://www.sonatype.com/books/m2eclipse-book/">"Developing with
      Eclipse and Maven"</ulink> contient la liste des archétypes directement disponibles à partir du plugin <varname>m2eclipse</varname>.
      Les archétypes listés dans cette section sont disponibles dans la liste des archétypes par défaut générée par le mode interactif du goal  
      <varname>generate</varname>.</para>

      <section id="archetype-sect-appfuse">
        <title>AppFuse</title>

        <para>AppFuse est un framework développé par Matt Raible.
        Vous pouvez comparer celui-ci à quelque chose comme Rosetta Stone orienté sur des technologies Java comme Spring Framework, Hibernate ou iBatis.
        En utilisant AppFuse, vous pouvez rapidement créer une application multi-tier qui peut être pluguée sur plusieurs frameworks de présentation web, comme Java Server Faces, Struts ou Tapestry.          
        En créant AppFuse 2.0, Matt Raible à mis à jour son framework pour qu'il utilise Maven 2 pour utiliser les fonctionnalités de gestion des dépendances et de création d'archétypes.
        AppFuse 2 fourni les archétypes suivants, tous sont groupés dans le <varname>groupId</varname> <varname>org.appfuse.archetypes</varname> :</para>

        <variablelist>
          <varlistentry>
            <term><varname>appfuse-basic-jsf</varname> et
            <varname>appfuse-modular-jsf</varname></term>

            <listitem>
              <para>Application complète utilisant JSF (Java Server Faces) comme couche de présentation.</para>
            </listitem>
          </varlistentry>

          <varlistentry>
            <term><varname>appfuse-basic-spring</varname> et
            <varname>appfuse-modular-spring</varname></term>

            <listitem>
              <para>Application complète utilisant Spring MVC comme couche de présentation.</para>
            </listitem>
          </varlistentry>

          <varlistentry>
            <term><varname>appfuse-basic-struts</varname> et
            <varname>appfuse-modular-struts</varname></term>

            <listitem>
              <para>Application complète utilisant Struts 2 comme couche de présentation.</para>
            </listitem>
          </varlistentry>

          <varlistentry>
            <term><varname>appfuse-basic-tapestry</varname> et
            <varname>appfuse-modular-tapestry</varname></term>

            <listitem>
              <para>Application complète utilisant Tapestry comme couche de présentation.</para>
            </listitem>
          </varlistentry>

          <varlistentry>
            <term><varname>appfuse-core</varname></term>

            <listitem>
              <para>Modèle objet et persistance dans couche présentation.</para>
            </listitem>
          </varlistentry>
        </variablelist>

        <para>Les archétypes dont le nom suit le pattern <varname>appfuse-basic-*</varname> correspondent à des applications complètes dans un simple projet Maven. 
        Les archétypes dont le nom suit le pattern <varname>appfuse-modular-*</varname> correspondent à des applications complètes avec un projet Maven multimodule 
        qui sépare les objets du modèle, la couche de persistance et la couche présentation.
        Voici un exemple permettant de générer une application web modulaire utilisant Spring MVC :</para>

        <screen>$ mvn archetype:generate \
      -DarchetypeArtifactId=appfuse-modular-spring \
      -DarchetypeGroupId=org.appfuse.archetypes \
      -DgroupId=org.sonatype.mavenbook \
      -DartifactId=mod-spring \
      -Dversion=1.0-SNAPSHOT \
      -DinteractiveMode=false[INFO] Scanning for projects...
...
[INFO] [archetype:generate]
[INFO] Generating project in Batch mode
[INFO] Archetype [org.appfuse.archetypes:appfuse-modular-spring:RELEASE] found in catalog internal
[INFO] ----------------------------------------------------------------------------
[INFO] Using following parameters for creating OldArchetype: appfuse-modular-spring:RELEASE
[INFO] ----------------------------------------------------------------------------
[INFO] Parameter: groupId, Value: org.sonatype.mavenbook
[INFO] Parameter: packageName, Value: org.sonatype.mavenbook
[INFO] Parameter: basedir, Value: /Users/tobrien/tmp
[INFO] Parameter: package, Value: org.sonatype.mavenbook
[INFO] Parameter: version, Value: 1.0-SNAPSHOT
[INFO] Parameter: artifactId, Value: mod-spring
...
[INFO] OldArchetype created in dir: /Users/tobrien/tmp/mod-spring
[INFO] ------------------------------------------------------------------------
[INFO] BUILD SUCCESSFUL
$ cd mod-spring
$ mvn
... (an overwhelming amount of activity ~5 minutes) 
$ cd web
$ mvn jetty:run-war
... (Maven Jetty plugin starts a Servlet Container on port 8080)</screen>

        <para>Utiliser un archétype AppFuse pour générer une application web avec une authentification, un système de gestion d'utilisateurs ne devrait pas vous prendre plus de 5 minutes.
        C'est un exemple de la véritable force de l'utilisation des archétypes Maven pour générer des nouvelles applications.         
        Nous avons simplifié le processus d'installation d'AppFuse, mais nous avons laissé un peu côté le téléchargement et l'installation de la base de données MySQL.
        Mais il n'y a rien de très compliqué au final dans tout cela, pour plus d'informations vous pouvez vous lire la <ulink
        url="http://appfuse.org/display/APF/AppFuse+QuickStart">documentation du Quickstart d'AppFuse</ulink>.</para>
      </section>

      <section id="archetype-sect-atlassian">
        <title>Plugins Confluence et JIRA</title>

        <para>Atlassian a créé quelques archétypes pour aider les personnes intéressées dans le développement de plugins Confluence ou JIRA.
        Confluence et JIRA sont respectivement un wiki et un gestionnaire d'anomalies.
        Ces deux produits ont acquis un grand nombre d'utilisateurs en distribuant des licences gratuites pour les projets open source. 
        Les deux artefacts <varname>jira-plugin-archetype</varname> et <varname>confluence-maven-archetype</varname> ont le même <varname>groupeId</varname> <varname>com.atlassian.maven.archetypes</varname>.
        Lorsque vous générez un plugin Confluence, l'archétype va créer un fichier <varname>pom.xml</varname>
        qui contient les références au dépôt Atlassian et des dépendances sur l'artefact Confluence.         
        Au final, le projet plugin Confluence disposera d'un exemple de macro et d'un descripteur <varname>atlassian-plugin.xml</varname>.
        En utilisant l'archétype JIRA, vous créez un projet avec une classe <classname>MyPlugin</classname> vierge et un descripteur <varname>atlassian-plugin.xml</varname> 
        dans le répertoire <filename>\${basedir}/src/main/resources</filename>.</para>

        <para>Pour plus d'information sur le développement de plugins Confluence en utilisant Maven 2, référez-vous à la page <ulink
        url="http://confluence.atlassian.com/display/DISC/Developing+Confluence+Plugins+with+Maven+2">"Developing
        Confluence Plugins with Maven 2"</ulink> disponibles sur le wiki du projet.
        De même, pour plus d'informations sur le développement de plugins JIRA en utilisant Maven 2,
        référez-vous à la page <ulink url="http://confluence.atlassian.com/display/DEVNET/How+to+Build+an+Atlassian+Plugin">"How
        to Build and Atlassian Plugin"</ulink> disponible sur le <varname>Atlassian Developer
        Network</varname>.</para>
      </section>

      <section id="archetype-sect-wicket">
        <title>Wicket</title>

        <para>Apache Wicket est un framework web orienté composant.
        Il se focalise sur la gestion de l'état de composants serveur écris en Java et en simple <acronym>HTML</acronym>.  
        Là où un framework comme Spring MVC ou Ruby on Rails se focalise sur la fusion d'objets d'une requête avec une série de template de page,
        Wicket se focalise plus sur la capture des interactions et sur la structure de la page à partir d'une série de classes <acronym>POJO</acronym> Java. 
        Vous pouvez générer un projet Wicket en utiliser le plugin Maven Archetype :</para> 

        <screen>$ <command>mvn archetype:generate</command>
... (select the "wicket-archetype-quickstart" artifact from the interactive menu) ...
... (supply a groupId, artifactId, version, package) ...
... (assuming the artifactId is "ex-wicket") ...
$ <command>cd ex-wicket</command>
$ <command>mvn install</command>
... (a lot of Maven activity) ...
$ <command>mvn jetty:run</command>
... (Jetty will start listening on port 8080) ...</screen>

        <para>Tout comme l'archétype AppFuse, cet archétype créé une application web directement exécutable par le plugin Maven Jetty.
        Une fois lancé, rendez-vous à l'adresse <ulink url="http://localhost:8080/ex-wicket">http://localhost:8080/ex-wicket</ulink>,
        pour consulter votre nouvelle application web générée.</para>

        <note>
          <para>Pensez à la puissance des archétypes Maven face à une simple approche 'copier-coller' qui a caractérisé les dernières années de développement web.
          Il y a six ans, sans le plugin Maven Archetype,
          vous auriez du parcourir un livre sur AppFuse ou un livre sur Wicket et apprendre comment bien utiliser le framework avant de pouvoir en exécuter un morceau de code dans un conteneur de servlets.            
          Ou alors, vous auriez juste copié collé un projet existant et commencé à le personnaliser selon vos besoins.
          Avec le plugin Maven Archetype, les développeurs de framework peuvent vous fournir une application personnalisée à vos besoins en quelques minutes. 
          Il s'agit d'un changement profond qui n'a pas encore atteint toutes les entreprises.
          On peut donc s'attendre à voir se multiplier le nombre d'artefacts dans les prochaines années.</para>
        </note>
      </section>
    </section>
  </section>

  <section id="archetype-sect-publishing">
    <title>Publication d'archétypes</title>

    <para>Une fois que vous avez généré quelques artefacts, vous voudrez probablement les partager avec le reste du monde.
    Pour cela, vous devez créer un catalogue d'archétypes.
    Un catalogue d'archétypes est un fichier XML que le plugin Maven Archetype peut consulter pour rechercher des archétypes dans un repository. 
    L'exemple <xref linkend="archetypes-cocoon-catalog" /> affiche le contenu du catalogue d'archétypes du projet Apache Cocoon qui peut être trouvé à l'adresse <ulink
    url="http://cocoon.apache.org/archetype-catalog.xml">http://cocoon.apache.org/archetype-catalog.xml</ulink>.</para>

    <example id="archetypes-cocoon-catalog">
      <title>Catalogue d'archétypes du projet Apache Cocoon</title>

      <para><programlisting>&lt;archetype-catalog&gt;
  &lt;archetypes&gt;
    &lt;archetype&gt;
      &lt;groupId&gt;org.apache.cocoon&lt;/groupId&gt;
      &lt;artifactId&gt;cocoon-22-archetype-block-plain&lt;/artifactId&gt;
      &lt;version&gt;1.0.0&lt;/version&gt;
      &lt;description&gt;Creates an empty Cocoon block; useful if you want to add another block to a Cocoon application&lt;/description&gt;

    &lt;/archetype&gt;
    &lt;archetype&gt;
      &lt;groupId&gt;org.apache.cocoon&lt;/groupId&gt;
      &lt;artifactId&gt;cocoon-22-archetype-block&lt;/artifactId&gt;
      &lt;version&gt;1.0.0&lt;/version&gt;
      &lt;description&gt;Creates a Cocoon block containing some small samples&lt;/description&gt;
    &lt;/archetype&gt;

    &lt;archetype&gt;
      &lt;groupId&gt;org.apache.cocoon&lt;/groupId&gt;
      &lt;artifactId&gt;cocoon-22-archetype-webapp&lt;/artifactId&gt;
      &lt;version&gt;1.0.0&lt;/version&gt;
      &lt;description&gt;Creates a web application configured to host Cocoon blocks. Just add the block dependencies&lt;/description&gt;
    &lt;/archetype&gt;
  &lt;/archetypes&gt;

&lt;/archetype-catalog&gt;</programlisting>Pour générer un tel catalogue, vous devez parcourir un dépôt Maven.
      Le plugin Maven Archetype possède un goal nommé <varname>crawl</varname> qui effectue cela.
      En exécutant le goal <varname>archetype:crawl</varname> à partir de la ligne de commande sans argument,
      le plugin Maven Archetype parcourra votre dépôt local à la recherche d'archétypes et créé un fichier
      <varname>archetype-catalog.xml</varname> dans le répertoire <varname>~/.m2/repository</varname>.</para>

      <screen>[tobrien@MACBOOK repository]$ mvn archetype:crawl
[INFO] Scanning for projects...
[INFO] Searching repository for plugin with prefix: 'archetype'.
[INFO] ------------------------------------------------------------------------
[INFO] Building Maven Default Project
[INFO]    task-segment: [archetype:crawl] (aggregator-style)
[INFO] ------------------------------------------------------------------------
[INFO] [archetype:crawl]
repository /Users/tobrien/.m2/repository
catalogFile null
[INFO] Scanning /Users/tobrien/.m2/repository/ant/ant/1.5/ant-1.5.jar
[INFO] Scanning /Users/tobrien/.m2/repository/ant/ant/1.5.1/ant-1.5.1.jar
[INFO] Scanning /Users/tobrien/.m2/repository/ant/ant/1.6/ant-1.6.jar
[INFO] Scanning /Users/tobrien/.m2/repository/ant/ant/1.6.5/ant-1.6.5.jar
...
[INFO] Scanning /Users/tobrien/.m2/repository/xmlrpc/xmlrpc/1.2-b1/xmlrpc-1.2-b1.jar
[INFO] Scanning /Users/tobrien/.m2/repository/xom/xom/1.0/xom-1.0.jar
[INFO] Scanning /Users/tobrien/.m2/repository/xom/xom/1.0b3/xom-1.0b3.jar
[INFO] Scanning /Users/tobrien/.m2/repository/xpp3/xpp3_min/1.1.3.4.O/xpp3_min-1.1.3.4.O.jar
[INFO] ------------------------------------------------------------------------
[INFO] BUILD SUCCESSFUL
[INFO] ------------------------------------------------------------------------
[INFO] Total time: 31 seconds
[INFO] Finished at: Sun Oct 12 16:06:07 CDT 2008
[INFO] Final Memory: 6M/12M
[INFO] ------------------------------------------------------------------------
</screen>

      <para>Si vous êtes intéressés par la création d'un catalogue d'archétypes, 
      c'est généralement parce que vous êtes un projet open source ou une société qui dispose d'un ensemble d'archétypes à partager.
      Ces archétypes sont probablement déjà disponibles dans un repository, vous avez besoin d'explorer ce dépôt et de générer un catalogue.
      En d'autres termes, vous aurez probablement envie de scanner un répertoire sur un dépôt Maven existant 
      et générer un plugin Archetype à la racine du repository.
      Pour cela, vous aurez besoin de passer le catalogue et le dépôt en paramètre du goal <varname>archetype:crawl</varname>.</para>

      <para>La ligne de commande permet de créer un fichier catalogue à l'emplacement <varname>/var/www/html/archetype-catalog.xml</varname>,
      le dépôt se trouve dans le répertoire <varname>/var/www/html/maven2</varname>.</para> 

      <screen>$ mvn archetype:crawl -Dcatalog=/var/www/html/archetype-catalog.xml \
                      [INFO] Scanning for projects...
[INFO] Searching repository for plugin with prefix: 'archetype'.
[INFO] ------------------------------------------------------------------------
[INFO] Building Maven Default Project
[INFO]    task-segment: [archetype:crawl] (aggregator-style)
[INFO] ------------------------------------------------------------------------
[INFO] [archetype:crawl]
repository /Users/tobrien/tmp/maven2
catalogFile /Users/tobrien/tmp/blah.xml
[INFO] Scanning /Users/tobrien/tmp/maven2/com/discursive/cas/extend/cas-extend-client-java/2.1.1/cas-extend-client-java-2.1.1.jar
[INFO] Scanning /Users/tobrien/tmp/maven2/com/discursive/cas/extend/cas-extend-client-java/2.2/cas-extend-client-java-2.2.jar
-Drepository=/var/www/html/maven2
...</screen>
    </example>
  </section>
</chapter>