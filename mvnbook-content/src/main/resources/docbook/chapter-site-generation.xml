<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE chapter PUBLIC "-//OASIS//DTD DocBook XML V4.5//EN"
"http://www.oasis-open.org/docbook/xml/4.5/docbookx.dtd">
<chapter id="site-generation">
  <title>Site Generation</title>

  <section id="site-generation-sect-intro">
    <title>Introduction</title>

    <para>Successful software applications are rarely produced by a team of
    one. When we're talking about any software worth writing, we're usually
    dealing teams of collaborating developers ranging anywhere in size from a
    handful of programmers working in a small team to hundreds or thousands of
    programmers working in large distributed environment. Most open source
    projects (such as Maven) succeed or fail based on the presence or absence
    of well written documentation for a widely-distributed, ad-hoc collection
    of users and developers. In all environments it is important for projects
    to have an easy way to publish and maintain online documentation. Software
    development is primarily an exercise in collaboration and communication,
    and publishing a Maven site is one way to make sure that your project is
    communicating with your end-users.</para>

    <para>A web site for an open source project is often the foundation for
    both the end-user and developer communities alike. End-users look to a
    project's web site for tutorials, user guides, <acronym>API</acronym>
    documentation, and mailing list archives, and developers look to a
    project's web site for design documents, code reports, issue tracking, and
    release plans. Large open-sources projects may be integrated with wikis,
    issue trackers, and continuous integration systems which help to augment a
    project's online documentation with material that reflects the current
    status of ongoing development. If a new open source project has an
    inadequate web site which fails to convey basic information to prospective
    users, if often is a sign that the project in question will fail to be
    adopted. In other words, for an open source project, the site and the
    documentation are as important to the formation of a community as the code
    itself.</para>

    <para>Maven can be used to create a project web site to capture
    information which is relevant to both the end-user and the developer
    audience. Out of the box, Maven can generate reports on everything from
    unit test failures to package coupling to reports on code quality. Maven
    provides you with the ability to write simple web pages and render those
    pages against a consistent project template. Maven can publish site
    content in multiple formats including <acronym>XHTML</acronym> and
    <acronym>PDF</acronym>. Maven can be used to generate API document and can
    also be used to embedded Javadoc and source code in your project's binary
    release archive. Once you've used Maven to generate all of your project's
    end-user and developer documentation, you can then use Maven to publish
    your web site to a remote server.</para>
  </section>

  <section id="site-generation-sect-building">
    <title>Building a Project Site with Maven</title>

    <para>To illustrate the process of building a project website, create a
    sample Maven project with the archetype plugin:</para>

    <screen>$ mvn archetype:create -DgroupId=org.sonatype.mavenbook -DartifactId=sample-project
</screen>

    <para>This creates the simplest possible Maven project with a one Java
    class in <filename>src/main/java</filename> and a simple
    <acronym>POM</acronym>. You can then build a Maven site by simply running
    mvn site. To build the site and preview the result in a browser, you can
    run <command>mvn site:run</command>, this will build the site and start an
    embedded instance of Jetty.</para>

    <screen>$ <command>cd sample-project</command>
$ <command>mvn site:run</command>
[INFO] Scanning for projects...
[INFO] Searching repository for plugin with prefix: 'site'.
[INFO] ------------------------------------------------------------------------
[INFO] Building sample-project
[INFO]    task-segment: [site:run] (aggregator-style)
[INFO] ------------------------------------------------------------------------
[INFO] Setting property: classpath.resource.loader.class =&gt; 
       'org.codehaus.plexus.velocity.ContextClassLoaderResourceLoader'.
[INFO] Setting property: velocimacro.messages.on =&gt; 'false'.
[INFO] Setting property: resource.loader =&gt; 'classpath'.
[INFO] Setting property: resource.manager.logwhenfound =&gt; 'false'.
[INFO] [site:run]
2008-04-26 11:52:26.981::INFO:  Logging to STDERR via org.mortbay.log.StdErrLog
[INFO] Starting Jetty on http://localhost:8080/
2008-04-26 11:52:26.046::INFO:  jetty-6.1.5
2008-04-26 11:52:26.156::INFO:  NO JSP Support for /, did not find 
         org.apache.jasper.servlet.JspServlet
2008-04-26 11:52:26.244::INFO:  Started SelectChannelConnector@0.0.0.0:8080
</screen>

    <para>Once Jetty starts and is listening to port 8080, you can see the
    project's site when you go to <ulink
    url="http://localhost:8080/">http://localhost:8080/</ulink> in a web
    browser. You can see the results in <xref
    linkend="fig-simple-site" />.</para>

    <figure id="fig-simple-site">
      <title>Simple Generated Maven Site</title>

      <screenshot>
        <mediaobject>
          <imageobject role="web">
            <imagedata fileref="figs/web/site_index.png" format="PNG" />
          </imageobject>

          <imageobject role="print">
            <imagedata align="center" fileref="figs/print/site_index.pdf"
                       format="PDF" scalefit="0" width="100%" />
          </imageobject>
        </mediaobject>
      </screenshot>
    </figure>

    <para>If you click around on this simple site, you'll see that it isn't
    very helpful as a real project site. There's just nothing there (and it
    doesn't look very good). Since the <varname>sample-project</varname>
    hasn't configured any developers, mailing lists, issue tracking providers,
    or source code repositories, all of these pages on the project site will
    have no information. Even the index page of the site states, "There is
    currently no description associated with this project". To customize the
    site, you'll have to start add content to the project and to the project's
    <acronym>POM</acronym>.</para>

    <para>If you are going to use the Maven Site plugin to build your
    project's site, you'll want to customize it. You will want to populate
    some of the important fields in the <acronym>POM</acronym> that tell Maven
    about the people participating in the project, and you'll want to
    customize the left-hand navigation menu and the links visible in the
    header of the page. To customize the contents of the site and affect the
    contents of the left-hand navigation menu, you will need to edit the site
    descriptor.</para>
  </section>

  <section id="site-generation-sect-custom-descript">
    <title>Customizing the Site Descriptor</title>

    <para>When you add content to the site, you are going to want to modify
    the left-hand navigation menu that is generated with your site. The
    following site descriptor customizes the logo in the upper left-hand
    corner of the site. In addition to customizing the header of the site,
    this descriptor adds a menu section to the left-hand navigation menu under
    the heading "Sample Project". This menu contains a single link to an
    overview page.</para>

    <para><example>
        <title>An Initial Site Descriptor</title>

        <programlisting language="xml">&lt;project name="Sample Project"&gt;
  &lt;bannerLeft&gt;
    &lt;name&gt;Sonatype&lt;/name&gt;
    &lt;src&gt;images/logo.png&lt;/src&gt;
    &lt;href&gt;http://www.sonatype.com&lt;/href&gt;
  &lt;/bannerLeft&gt;
  &lt;body&gt;
    &lt;menu name="Sample Project"&gt;
      &lt;item name="Overview" href="index.html"/&gt;      
    &lt;/menu&gt;
    &lt;menu ref="reports"/&gt;
  &lt;/body&gt;
&lt;/project&gt;
</programlisting>
      </example></para>

    <para>This site descriptor references one image. This
    <filename>logo.png</filename> image should be placed in
    <filename>\${basedir}/src/site/resources/images</filename>. In addition to
    the change to the site descriptor, you'll want to create a simple
    <filename>index.apt</filename> page in
    <filename>\${basedir}/src/site/apt</filename>. Put the following content
    in <filename>index.apt</filename>, it will be transformed to the
    <filename>index.html</filename> and serve as the first page a user sees
    when they come to your project's Maven-generated web site.</para>

    <programlisting>  Welcome to the Sample Project, we hope you enjoy your time
  on this project site.  We've tried to assemble some 
  great user documentation and developer information, and 
  we're really excited that you've taken the time to visit
  this site.

What is Sample Project

  Well, it's easy enough to explain.   This sample project is 
  a sample of a project with a Maven-generated site from
  Maven: The Definitive	Guide.   A dedicated team of volunteers
  help maintain this sample site, and so on and so forth.
</programlisting>

    <para>To preview the the site, run <command>mvn clean site</command>
    followed by <command>mvn site:run</command>:</para>

    <screen>$ mvn clean site
$ mvn site:run</screen>

    <para>Once you do this, load the page in a browser by going to <ulink
    url="http://localhost:8080">http://localhost:8080</ulink>. You should see
    something similar to the screenshot in <xref
    linkend="fig-custom-simple" />.</para>

    <figure id="fig-custom-simple">
      <title>Customized Sample Project Web Site</title>

      <screenshot>
        <mediaobject>
          <imageobject role="web">
            <imagedata fileref="figs/web/site_custom-descriptor.png"
                       format="PNG" />
          </imageobject>

          <imageobject role="print">
            <imagedata align="center"
                       fileref="figs/print/site_custom-descriptor.pdf"
                       format="PDF" scalefit="0" width="100%" />
          </imageobject>
        </mediaobject>
      </screenshot>
    </figure>

    <section id="site-generation-sect-custom-header">
      <title>Customizing the Header Graphics</title>

      <para>To customize the graphics which appear in the upper left-hand and
      right-hand corners of the page, you can use the
      <sgmltag>bannerLeft</sgmltag> and <sgmltag>bannerRight</sgmltag>
      elements in a site descriptor.</para>

      <para><example>
          <title>Adding a Banner Left and Banner Right to Site
          Descriptor</title>

          <programlisting language="xml">&lt;project name="Sample Project"&gt;

  &lt;bannerLeft&gt;
    &lt;name&gt;Left Banner&lt;/name&gt;
    &lt;src&gt;images/banner-left.png&lt;/src&gt;
    &lt;href&gt;http://www.google.com&lt;/href&gt;
  &lt;/bannerLeft&gt;
  
  &lt;bannerRight&gt;
    &lt;name&gt;Right Banner&lt;/name&gt;
    &lt;src&gt;images/banner-right.png&lt;/src&gt;
    &lt;href&gt;http://www.yahoo.com&lt;/href&gt;
  &lt;/bannerRight&gt;
  ...
&lt;/project&gt;
</programlisting>
        </example></para>

      <para>Both the <sgmltag>bannerLeft</sgmltag> and
      <sgmltag>bannerRight</sgmltag> elements take <sgmltag>name</sgmltag>,
      <sgmltag>src</sgmltag>, and <sgmltag>href</sgmltag> child elements. In
      the site descriptor shown above, the Maven Site plugin will generate a
      site with <filename>banner-left.png</filename> in the left-hand corner
      of the page and banner-right in the right-hand corner of the page. Maven
      is going to look in
      <filename>\${basedir}/src/site/resources/images</filename> for these
      images.</para>
    </section>

    <section id="site-generation-sect-custom-nav">
      <title>Customizing the Navigation Menu</title>

      <para>To customize the contents of the navigation menu, use the
      <sgmltag>menu</sgmltag> element with <sgmltag>item</sgmltag> child
      elements. The <sgmltag>menu</sgmltag> element adds a section to the
      left-hand navigation menu. Each item is rendered as a link in that
      menu.</para>

      <para><example>
          <title>Creating Menu Items in a Site Descriptor</title>

          <programlisting language="xml">&lt;project name="Sample Project"&gt;
  ...
  &lt;body&gt;

    &lt;menu name="Sample Project"&gt;
      &lt;item name="Introduction" href="index.html"/&gt;
      &lt;item name="News" href="news.html"/&gt;
      &lt;item name="Features" href="features.html"/&gt;
      &lt;item name="Installation" href="installation.html"/&gt;
      &lt;item name="Configuration" href="configuration.html"/&gt;
      &lt;item name="FAQ" href="faq.html"/&gt;
    &lt;/menu&gt;
    ...
  &lt;/body&gt;
&lt;/project&gt;
</programlisting>
        </example></para>

      <para>Menu items can also be nested. If you nest items, you will be
      creating a collapsible menu in the left-hand navigation menu. The
      following example adds a link "Developer Resources" which links to
      <filename>/developer/index.html</filename>. When a user is looking at
      the Developer Resources page, the menu items below the Developer
      Resources menu item will be expanded.</para>

      <para><example>
          <title>Adding a Link to the Site Menu</title>

          <programlisting language="xml">&lt;project name="Sample Project"&gt;
  ...
  &lt;body&gt;
    ...
    &lt;menu name="Sample Project"&gt;
      ...
      &lt;item name="Developer Resources" href="/developer/index.html" 
               collapse="true"&gt;
        &lt;item name="System Architecture" href="/developer/architecture.html"/&gt;
        &lt;item name="Embedder's Guide" href="/developer/embedding.html"/&gt;
      &lt;/item&gt;
    &lt;/menu&gt;
    ...
  &lt;/body&gt;
&lt;/project&gt;
</programlisting>
        </example></para>

      <para>When an item has the <sgmltag>collapse</sgmltag> attribute set to
      <varname>true</varname>, Maven will collapse the item until a user is
      viewing that specific page. In the previous example, when the user is
      not looking at the Developer Resources page, Maven will not display the
      System Architecture and Embedder's Guide links; instead, it will display
      an arrow pointing to the Developer Resources link. When the user is
      viewing the Developer Resources page it will show these links with an
      arrow pointing down.</para>
    </section>
  </section>

  <section id="site-generation-sect-dir-struct">
    <title>Site Directory Structure</title>

    <para>Maven places all site document under <filename>src/site</filename>.
    Documents of similar format are placed in subdirectories of
    <filename>src/site</filename>. All <acronym>APT</acronym> documents should
    be in <filename>src/site/apt</filename>, all <acronym>FML</acronym>
    documents should be in <filename>src/site/fml</filename>, and XDoc
    documents should be in <filename>src/site/xdoc</filename>. The site
    descriptor should be in <filename>src/site/site.xml</filename>, and all
    resources should be stored under <filename>src/site/resources</filename>.
    When the Maven Site plugin builds a web site, it will copy everything in
    the resources directory to the root of the site. If you store an image in
    <filename>src/site/resources/images/test.png</filename>, they you would
    refer to the image from your site documentation using the relative path
    <filename>images/test.png</filename>.</para>

    <para>The following examples shows the location of all files in a project
    which contains <acronym>APT</acronym>, <acronym>FML</acronym>,
    <acronym>HTML</acronym>, <acronym>XHTML</acronym>, and some XDoc. Note
    that the <acronym>XHTML</acronym> content is simply stored in the
    resources directory. The architecture.html file will not be processed by
    Doxia, it will simply be copied to the output directory. You can use this
    approach if you want to include unprocessed <acronym>HTML</acronym>
    content and you don't want to take advantage of the templating and
    formatting capabilities of Doxia and the Maven Site plugin.</para>

    <screen>sample-project
+- src/
   +- site/
      +- apt/
      |  +- index.apt
      |  +- about.apt
      |  |
      |  +- developer/
      |     +- embedding.apt
      |
      +- fml/
      |  +- faq.fml
      |
      +- resources/
      |  +- images/
      |  |  +- banner-left.png
      |  |  +- banner-right.png
      |  |
      |  +- architecture.html
      |  +- jira-roadmap-export-2007-03-26.html
      |
      +- xdoc/
      |  +- xml-example.xml
      |
      +- site.xml
</screen>

    <para>Note that the developer documentation is stored in
    <filename>src/site/apt/developer/embedding.apt</filename>. This extra
    directory below the <filename>apt</filename> directory will be reflected
    in the location of the resulting <acronym>HTML</acronym> page on the site.
    When the Site plugin renders the contents of the
    <filename>src/site/apt</filename> directory it will produce
    <acronym>HTML</acronym> output in directories relative to the site root.
    If a file is in the apt directory it will be in the root directory of the
    generated web site. If a file is in the <filename>apt/developer</filename>
    directory it will be generated in the <filename>developer/</filename>
    directory of the web site.</para>
  </section>

  <section id="site-generation-sect-proj-doc">
    <title>Writing Project Documentation</title>

    <para>Maven uses a documentation-processing engine called Doxia which
    reads multiple source formats into a common document model. Doxia can then
    manipulate documents and render the result into several output formats,
    such as <acronym>PDF</acronym> or <acronym>XHTML</acronym>. To write
    document for your project, you will need to write your content in a format
    which can be parsed by Doxia. Doxia currently has support for Almost Plain
    Text (<acronym>APT</acronym>), XDoc (a Maven 1.x documentation format),
    <acronym>XHTML</acronym>, and <acronym>FML</acronym> (useful for
    <acronym>FAQ</acronym> documents) formats.</para>

    <para>This chapter has a cursory introduction to the
    <acronym>APT</acronym> format. For a deeper understand of the
    <acronym>APT</acronym> format, or for an in-depth introduction to XDoc or
    <acronym>FML</acronym>, please see the following resources:</para>

    <itemizedlist>
      <listitem>
        <para><acronym>APT</acronym> Reference: <ulink
        url="http://maven.apache.org/doxia/format.html">http://maven.apache.org/doxia/format.html</ulink></para>
      </listitem>

      <listitem>
        <para>XDoc Reference: <ulink
        url="http://jakarta.apache.org/site/jakarta-site2.html">http://jakarta.apache.org/site/jakarta-site2.html</ulink></para>
      </listitem>

      <listitem>
        <para><acronym>FML</acronym> Reference: <ulink
        url="http://maven.apache.org/doxia/references/fml-format.html">http://maven.apache.org/doxia/references/fml-format.html</ulink></para>
      </listitem>
    </itemizedlist>

    <section id="site-generation-apt-example">
      <title>APT Example</title>

      <para><xref linkend="ex-apt" /> shows a simple <acronym>APT</acronym>
      document with an introductory paragraph and a simple list. Note that the
      list is terminated by the psuedo-element "[]".</para>

      <example id="ex-apt">
        <title>APT Document</title>

        <programlisting>---
Introduction to Sample Project
---
Brian Fox
---
26-Mar-2008
---
 
Welcome to Sample Project
 
  This is a sample project, welcome!   We're excited that you've decided to 
  read the index page of this Sample Project.  We hope you enjoy the simple 
  sample project we've assembled for you.
 
  Here are some useful links to get you started:
 
   * {{{news.html}News}}
 
   * {{{features.html}Features}}
 
   * {{{faq.html}FAQ}}
 
   []
</programlisting>
      </example>

      <para>If the <acronym>APT</acronym> document from <xref
      linkend="ex-apt" /> were placed in
      <filename>src/site/apt/index.apt</filename>, the Maven Site plugin will
      parse the <acronym>APT</acronym> using Doxia and produce
      <acronym>XHTML</acronym> content in
      <filename>index.html</filename>.</para>
    </section>

    <section id="site-generation-sect-fml-example">
      <title>FML Example</title>

      <para>Many projects maintain a Frequently Asked Questions
      (<acronym>FAQ</acronym>) page. <xref linkend="ex-fml" /> shows an
      example of an <acronym>FML</acronym> document.</para>

      <para><example id="ex-fml">
          <title>FAQ Markup Language Document</title>

          <programlisting language="xml">&lt;?xml version="1.0" encoding="UTF-8"?&gt;
&lt;faqs title="Frequently Asked Questions"&gt;
  &lt;part id="General"&gt;
    &lt;faq id="sample-project-sucks"&gt;
      &lt;question&gt;Sample project doesn't work.  Why does sample 
        project suck?&lt;/question&gt;
      &lt;answer&gt;
        &lt;p&gt;
          We resent that question.  Sample wasn't designed to work, it was 
          designed to show you how to use Maven.   If you really think 
          this project sucks, then keep it to yourself.   We're not 
          interested in your pestering questions.
        &lt;/p&gt;
      &lt;/answer&gt;
    &lt;/faq&gt;
    &lt;faq id="sample-project-source"&gt;
      &lt;question&gt;I want to put some code in Sample Project, 
        how do I do this?&lt;/question&gt;
      &lt;answer&gt;
        &lt;p&gt;
          If you want to add code to this project, just start putting 
          Java source in src/main/java.   If you want to put some source 
          code in this FAQ, use the source element:
        &lt;/p&gt;
        &lt;source&gt;
          for( int i = 0; i &lt; 1234; i++ ) {
            // do something brilliant
          }
        &lt;/source&gt;
      &lt;/answer&gt;
    &lt;/faq&gt;
  &lt;/part&gt;
&lt;/faqs&gt;
</programlisting>
        </example></para>
    </section>
  </section>

  <section id="site-generation-sect-deploy-site">
    <title>Deploying Your Project Website</title>

    <para>Once your project's documentation has been written and you've
    creates a site to be proud of, you will want to deploy it to a server. To
    deploy your site you'll use the Maven Site plugin which can take care of
    deploying your project's site to a remote server using a number of methods
    including <acronym>FTP</acronym>, <acronym>SCP</acronym>, and
    <acronym>DAV</acronym>. To deploy the site using <acronym>DAV</acronym>,
    configure the site entry of the <sgmltag>distributionManagement</sgmltag>
    section in the <acronym>POM</acronym>, like this:</para>

    <para><example>
        <title>Configuring Site Deployment</title>

        <programlisting language="xml">&lt;project&gt;
  ...
  &lt;distributionManagement&gt;
    &lt;site&gt;
      &lt;id&gt;sample-project.website&lt;/id&gt;
      &lt;url&gt;dav:https://dav.sample.com/sites/sample-project&lt;/url&gt;
    &lt;/site&gt;
  &lt;/distributionManagement&gt;
  ...
&lt;/project&gt;
</programlisting>
      </example></para>

    <para>The <sgmltag>url</sgmltag> in distribution management has a leading
    indicator <varname>dav</varname> which tells the Maven Site plugin to
    deploy the site to a <acronym>URL</acronym> that is able to understand
    <acronym>WebDAV</acronym>. Once you have added the
    <sgmltag>distributionManagement</sgmltag> section to our
    <varname>sample-project</varname> <acronym>POM</acronym>, we can try
    deploying the site:</para>

    <screen>$ mvn clean site-deploy
</screen>

    <para>If you have a server configured properly that can understand
    <acronym>WebDAV</acronym>, Maven will deploy your project's web site to
    the remote server. If you are deploying this project to a site and server
    visible to the public, you are going to want to configure your web server
    to access for credentials. If your web server asks for a username and
    password (or other credentials, you can configure this values in your
    <filename>~/.m2/settings.xml</filename>).</para>

    <section id="site-generation-sect-server-auth">
      <title>Configuring Server Authentication</title>

      <para>To configure a username/password combination for use during the
      site deployment, we'll include the following in
      <filename>$HOME/.m2/settings.xml</filename>:</para>

      <para><example>
          <title>Storing Server Authentication in User-specific
          Settings</title>

          <programlisting language="xml">&lt;settings&gt;
  ...
  &lt;servers&gt;
    &lt;server&gt;
      &lt;id&gt;sample-project.website&lt;/id&gt;
      &lt;username&gt;jdcasey&lt;/username&gt;
      &lt;password&gt;b@dp@ssw0rd&lt;/password&gt;
    &lt;/server&gt;
    ...
  &lt;/servers&gt;
  ...
&lt;/settings&gt;
</programlisting>
        </example></para>

      <para>The server authentication section can contain a number of
      authentication elements. In the event you're using
      <acronym>SCP</acronym> for deployment, you may wish to use public-key
      authentication. To do this, specify the <sgmltag>publicKey</sgmltag>
      and<sgmltag> passphrase</sgmltag> elements, instead of the password
      element. You may still want to configure the username element, depending
      on your server's configuration.</para>
    </section>

    <section id="site-generation-sect-modes">
      <title>Configuring File and Directory Modes</title>

      <para>If you are working in a large group of developers, you'll want to
      make sure that your web site's files end up with the proper user and
      group permissions after they are published to the remote server. To
      configure specific file and directory modes for use during the site
      deployment, include the following in
      <filename>$HOME/.m2/settings.xml</filename>:</para>

      <para><example>
          <title>Configuring File and Directory Modes on Remote
          Servers</title>

          <programlisting language="xml">&lt;settings&gt;
  ...
  &lt;servers&gt;
    ...
    &lt;server&gt;
      &lt;id&gt;hello-world.website&lt;/id&gt;
      ...
      &lt;directoryPermissions&gt;0775&lt;/directoryPermissions&gt;
      &lt;filePermissions&gt;0664&lt;/filePermissions&gt;
    &lt;/server&gt;
  &lt;/servers&gt;
  ...
&lt;/settings&gt;
</programlisting>
        </example></para>

      <para>The above settings will make any directories readable and writable
      by either the owner or members of the owner's primary group; the
      anonymous users will only have access to read and list the directory.
      Similarly, the owner or members of the owner's primary group will have
      access to read and write any files, with the rest of the world
      restricted to read-only access.</para>
    </section>
  </section>

  <section id="site-generation-sect-site-appearance">
    <title>Customizing Site Appearance</title>

    <para>The default Maven template leaves much to be desired. If you wish to
    customize your project's website beyond simply adding content,
    navigational elements, and custom logos. Maven offers several mechanisms
    for customizing your website that offer successively deeper access to
    content decoration and website structure. For small, per-project tweaks,
    providing a custom <filename>site.css</filename> is often enough. However,
    if you want your customizations to be reusable across multiple projects,
    or if your customizations involve changing the <acronym>XHTML</acronym>
    that Maven generates, you should consider creating your own Maven website
    skin.</para>

    <section id="site-generation-sect-site-css">
      <title>Customizing the Site CSS</title>

      <para>The easiest way to affect the look and feel of your project's web
      site is through the project's <filename>site.css</filename>. Just like
      any images or <acronym>XHTML</acronym> content you provide for the
      website, the <filename>site.css</filename> file goes in the
      <filename>src/site/resources</filename> directory. Maven expects this
      file to be in the <filename>src/site/resources/css</filename>
      subdirectory. With <acronym>CSS</acronym> it is possible to change text
      styling properties, layout properties, and even add background images
      and custom bullet graphics. For example, if we decided that to make the
      menu heading stand out a little more, we might try the following style
      in <filename>src/site/resources/css/site.css</filename>:</para>

      <screen>#navcolumn h5 {
  font-size: smaller;
  border: 1px solid #aaaaaa;
  background-color: #bbb;
  margin-top: 7px;
  margin-bottom: 2px;
  padding-top: 2px;
  padding-left: 2px;
  color: #000;
}
</screen>

      <para>When you regenerate the website, the menu headers should be framed
      by a gray background and separated from the rest of the menu by some
      extra margin space. Using this file, any structure in the
      Maven-generated website can be decorated with custom
      <acronym>CSS</acronym>. When you change <filename>site.css</filename> in
      a specific Maven project, the changes will apply to that specific
      project. If you are interested in making changes that will apply to more
      than one Maven project, you can create a custom skin for the Maven Site
      plugin.</para>

      <tip>
        <para>There is no good reference for the structure of the default
        Maven site template. If you are attempting to customize the style of
        your Maven project, you should use a Firefox extension like Firebug as
        a tool to explore the <acronym>DOM</acronym> for your project's
        pages.</para>
      </tip>
    </section>

    <section id="site-generation-sect-custom-template">
      <title>Create a Custom Site Template</title>

      <para>If the default Maven Site structure just doesn't do it for you,
      you can always customize the Maven site template. Customizing the Maven
      Site template gives you complete control over the ultimate output of the
      Maven plugin, and it is possible to customize your project's site
      template to the point where it hardly resembles the structure of a
      default Maven site template.</para>

      <para>The Site plugin uses a rendering engine called Doxia, which in
      turn uses a Velocity template to render the <acronym>XHTML</acronym> for
      each page. To change the page structure that is rendered by default, we
      can configure the site plugin in our <acronym>POM</acronym> to use a
      custom page template. The site template is fairly complex, and you'll
      need to have a good starting point for your customization. Start by
      copying the default Velocity template from Doxia's Subversion repository
      <ulink
      url="http://svn.apache.org/viewvc/maven/doxia/doxia-sitetools/trunk/doxia-site-renderer/src/main/resources/org/apache/maven/doxia/siterenderer/resources/default-site.vm?revision=595592">default-site.vm</ulink>
      to <filename>src/site/site.vm</filename>. This template is written in a
      templating language called Velocity. Velocity is a simple templating
      language which supports simple macro definition and allows you to access
      an object's methods and properties using simple notation. A full
      introduction is beyond the scope of this book, for more information
      about Velocity and a full introduction please go to the Velocity project
      site at <ulink
      url="http://velocity.apache.org">http://velocity.apache.org</ulink>.</para>

      <para>The <filename>default-site.xml</filename> template is fairly
      involved, but the change required to customize the left-hand menu is
      relatively straightforward. If you are trying to change the appearance
      of a <sgmltag>menuItem</sgmltag>, locate the <sgmltag>menuItem</sgmltag>
      macro. It resides in a section that looks like this:</para>

      <screen>#macro ( menuItem $item )

  ...
  
#end
</screen>

      <para>If you replace the macro definition with the macro definition
      listed below, you will injects Javascript references into each menu item
      which will allow the reader to expand or collapse the menu tree without
      suffering through a full page reload:</para>

      <screen>#macro ( menuItem $item $listCount )
  #set ( $collapse = "none" )
  #set ( $currentItemHref = $PathTool.calculateLink( $item.href, 
                                                     $relativePath ) )
  #set ( $currentItemHref = $currentItemHref.replaceAll( "\\", "/" ) )

  #if ( $item &amp;&amp; $item.items &amp;&amp; $item.items.size() &gt; 0 )
    #if ( $item.collapse == false )
      #set ( $collapse = "collapsed" )
    #else
      ## By default collapsed
      #set ( $collapse = "collapsed" )
    #end

    #set ( $display = false )
    #displayTree( $display $item )

    #if ( $alignedFileName == $currentItemHref || $display )
      #set ( $collapse = "expanded" )
    #end
  #end
  &lt;li class="$collapse"&gt;
    #if ( $item.img )
      #if ( ! ( $item.img.toLowerCase().startsWith("http") || 
                $item.img.toLowerCase().startsWith("https") ) )
        #set ( $src = $PathTool.calculateLink( $item.img, $relativePath ) )
        #set ( $src = $item.img.replaceAll( "\\", "/" ) )
        &lt;img src="$src"/&gt;
      #else
        &lt;img src="$item.img" align="absbottom" style="border-width: 0"/&gt;
      #end
    #end
    #if ( $alignedFileName == $currentItemHref )
      &lt;strong&gt;$item.name&lt;/strong&gt;
    #else
      #if ( $item &amp;&amp; $item.items &amp;&amp; $item.items.size() &gt; 0 )
      &lt;a onclick="expand('list$listCount')" 
            style="cursor:pointer"&gt;$item.name&lt;/a&gt;
      #else
      &lt;a href="$currentItemHref"&gt;$item.name&lt;/a&gt;
      #end
    #end
  #if ( $item &amp;&amp; $item.items &amp;&amp; $item.items.size() &gt; 0 )
    #if ( $collapse == "expanded" )
    &lt;ul id="list$listCount" style="display:block"&gt;
    #else
    &lt;ul id="list$listCount" style="display:none"&gt;
      #end
      #foreach( $subitem in $item.items )
        #set ( $listCounter = $listCounter + 1 )
        #menuItem( $subitem $listCounter )
      #end
    &lt;/ul&gt;
  #end
  &lt;/li&gt;
#end
</screen>

      <para>This change adds a new parameter to the
      <varname>menuItem</varname> macro. For the new functionality to work,
      you will need to change references to this macro, or the resulting
      template may produce unwanted or internally inconsistent
      <acronym>XHTML</acronym>. To finish changing these references, make a
      similar replacement in the <varname>mainMenu</varname> macro. Find this
      macro by looking for something similar to the following template
      snippet:</para>

      <screen>#macro ( mainMenu $menus )
  ...
#end
</screen>

      <para>Replace the mainMenu macro with the following
      implementation:</para>

      <screen>#macro ( mainMenu $menus )
  #set ( $counter = 0 )
  #set ( $listCounter = 0 )
  #foreach( $menu in $menus )
    #if ( $menu.name )
    &lt;h5 onclick="expand('menu$counter')"&gt;$menu.name&lt;/h5&gt;
    #end
    &lt;ul id="menu$counter" style="display:block"&gt;
      #foreach( $item in $menu.items )
        #menuItem( $item $listCounter )
        #set ( $listCounter = $listCounter + 1 )
      #end
    &lt;/ul&gt;
    #set ( $counter = $counter + 1 )
  #end
#end
</screen>

      <para>This new <varname>mainMenu</varname> macro is compatible with the
      new <varname>menuItem</varname> macro above, and also provides support
      for a Javascript-enabled top-level menu. Clicking on a top-level menu
      item with children will expand the menu and allow users to see the
      entire tree without waiting for a page to load.</para>

      <para>The change to the <varname>menuItem</varname> macro introduced an
      <methodname>expand()</methodname> Javascript function. This method needs
      to be added to the main <acronym>XHTML</acronym> template at the bottom
      of this template file. Find the section that looks similar to the
      following:</para>

      <screen>  &lt;head&gt;
    ...
    &lt;meta http-equiv="Content-Type" 
             content="text/html; charset=\${outputEncoding}" /&gt;
    ...
  &lt;/head&gt;
</screen>

      <para>and replace it with this:</para>

      <screen>  &lt;head&gt;
    ...
    &lt;meta http-equiv="Content-Type" 
             content="text/html; charset=\${outputEncoding}" /&gt;
    &lt;script type="text/javascript"&gt;
      function expand( item ) {
        var expandIt = document.getElementById( item );
        if( expandIt.style.display == "block" ) {
          expandIt.style.display = "none";
          expandIt.parentNode.className = "collapsed";
        } else {
          expandIt.style.display = "block";
          expandIt.parentNode.className = "expanded";
        }
      }
    &lt;/script&gt;
    #if ( $decoration.body.head )
      #foreach( $item in $decoration.body.head.getChildren() )
        #if ( $item.name == "script" )
          $item.toUnescapedString()
        #else
          $item.toString()
        #end
      #end
    #end
  &lt;/head&gt;
</screen>

      <para>After modifying the default site template, you'll need to
      configure your project's <acronym>POM</acronym> to reference this new
      site template. To customize the site template, you'll need to use the
      <sgmltag>templateDirectory</sgmltag> and template configuration
      properties of the Maven Site plugin.</para>

      <para><example>
          <title>Customizing the Page Template in a Project's POM</title>

          <programlisting language="xml">&lt;project&gt;
  ...
  &lt;build&gt;
    &lt;plugins&gt;
      &lt;plugin&gt;
        &lt;artifactId&gt;maven-site-plugin&lt;/artifactId&gt;
        &lt;configuration&gt;
          &lt;templateDirectory&gt;src/site&lt;/templateDirectory&gt;
          &lt;template&gt;site.vm&lt;/template&gt;
        &lt;/configuration&gt;
      &lt;/plugin&gt;
    &lt;/plugins&gt;
  &lt;/build&gt;
  ...
&lt;/project&gt;
</programlisting>
        </example></para>

      <para>Now, you should be able to regenerate your project website. When
      you do so you may notice that the resources and <acronym>CSS</acronym>
      for the maven site are missing. When a Maven project customizes the site
      template, the Site plugin expects the project to supply all of the
      default images and <acronym>CSS</acronym>. To seed your project's
      resources, you may want to copy the resources from the default Doxia
      site renderer project to your own project's resources directory by
      executing the following commands:</para>

      <screen>$ <command>svn co \
        http://svn.apache.org/repos/asf/maven/doxia/doxia-sitetools/\
         trunk/doxia-site-renderer</command>
$ <command>rm \
        doxia-site-renderer/src/main/resources/org/apache/maven/\
          doxia/siterenderer/resources/css/maven-theme.css</command>
$ <command>cp -rf \
      doxia-site-renderer/src/main/resources/org/apache/maven/\
        doxia/siterenderer/resources/* \
      sample-project/src/site/resources</command>
</screen>

      <para>Check out the <varname>doxia-site-renderer</varname> project,
      remove the default <filename>maven-theme.css</filename> file and then
      copy all the resources to your project's
      <filename>src/site/resources</filename> directory.</para>

      <para>When you regenerate the site, you'll notice that a few menu items
      look like regular unstyled text. This is caused by a quirky interaction
      between the site's <acronym>CSS</acronym> and our new custom page
      template. It can be fixed by modifying our <filename>site.css</filename>
      to restore the proper link color for these menus. Simply add
      this:</para>

      <screen>li.collapsed, li.expanded, a:link {
  color:#36a;
}
</screen>

      <para>After regenerating the site, the menu's link color should be
      corrected. If you applied the new site template to the same
      sample-project from this chapter, you'll notice that the menu now
      consists of a tree. Clicking on "Developer Resources" no longer takes
      you to the "Developer Resources" page; in stead, it expands the
      sub-menu. Since you've turned the Developer Resources menu-item into a
      dynamically-folding sub-menu, you have lost the ability to reach the
      <filename>developer/index.apt</filename> page. To address this change,
      you should add an Overview link to the sub-menu which references the
      same page:</para>

      <para><example>
          <title>Adding a Menu Item to a Site Descriptor</title>

          <programlisting language="xml">&lt;project name="Hello World"&gt;
  ...
  &lt;menu name="Main Menu"&gt;
    ...
    &lt;item name="Developer Resources" collapse="true"&gt;
      &lt;item name="Overview" href="/developer/index.html"/&gt;
      &lt;item name="System Architecture" href="/developer/architecture.html"/&gt;
      &lt;item name="Embedder's Guide" href="/developer/embedding.html"/&gt;
    &lt;/item&gt;
  &lt;/menu&gt;
  ...
&lt;/project&gt;
</programlisting>
        </example></para>
    </section>

    <section id="site-generation-sect-reusable-skin">
      <title>Reusable Website Skins</title>

      <para>If your organization is creating many Maven project sites, you
      will likely want to reuse site template and <acronym>CSS</acronym>
      customizations throughout an organization. If you want thirty projects
      to share the same <acronym>CSS</acronym> and site template, you can use
      Maven's support for skinning. Maven Site skins allow you to package up
      resources and templates which can be reused by other projects in lieu of
      duplicating your site template for each project which needs to be
      customized.</para>

      <para>While you can define your own skin, you may want to consider using
      one of Maven's alternate skins. You can choose from several skins. These
      each provide their own layout for navigation, content, logos, and
      templates:</para>

      <itemizedlist>
        <listitem>
          <para>Maven Classic Skin -
          <varname>org.apache.maven.skins:maven-classic-skin:1.0</varname></para>
        </listitem>

        <listitem>
          <para>Maven Default Skin -
          <varname>org.apache.maven.skins:maven-default-skin:1.0</varname></para>
        </listitem>

        <listitem>
          <para>Maven Stylus Skin -
          <acronym>org.apache.maven.skins:maven-stylus-skin:1.0.1</acronym></para>
        </listitem>
      </itemizedlist>

      <para>You can find an up-to-date and comprehensive listing in the Maven
      repository: <ulink
      url="http://repo1.maven.org/maven2/org/apache/maven/skins/">http://repo1.maven.org/maven2/org/apache/maven/skins/</ulink>.</para>

      <para>Creating a custom skin is a simple matter of wrapping your
      customized <filename>maven-theme.css</filename> in a Maven project, so
      that it can be referenced by <varname>groupId</varname>,
      <varname>artifactId</varname>, and <varname>version</varname>. It can
      also include resources such as images, and a replacement website
      template (written in Velocity) that can generate a completely different
      <acronym>XHTML</acronym> page structure. In most cases, custom
      <acronym>CSS</acronym> can manage the changes you desire. To
      demonstrate, let's create a designer skin for the sample-project
      project, starting with a custom
      <filename>maven-theme.css</filename>.</para>

      <para>Before we can start writing our custom <acronym>CSS</acronym>, we
      need to create a separate Maven project to allow the
      <varname>sample-project</varname> site descriptor to reference it.
      First, use Maven's archetype plugin to create a basic project. Issue the
      following command from the directory above the
      <varname>sample-project</varname> project's root directory:</para>

      <screen>$ <command>mvn archetype:create -DartifactId=sample-site-skin 
        -DgroupId=org.sonatype.mavenbook</command>
</screen>

      <para>This will create a project (and a directory) called
      <varname>sample-site-skin</varname>. Change directories to the new
      <varname>sample-site-skin</varname> directory, remove all of the source
      code and tests, and create a directory to store your skin's
      resources:</para>

      <screen>$ <command>cd sample-site-skin</command>
$ <command>rm -rf src/main/java src/test</command>
$ <command>mkdir src/main/resources</command>
</screen>
    </section>

    <section id="site-generation-sect-custom-theme-css">
      <title>Creating a Custom Theme CSS</title>

      <para>Next, write a custom <acronym>CSS</acronym> for the custom skin. A
      custom CSS stylesheet in a Maven site skin should be placed in
      <filename>src/main/resources/css/maven-theme.css</filename>. Unlike the
      <filename>site.css</filename> file, which goes in the site-specific
      source directory for a project, the <filename>maven-theme.css</filename>
      will be bundled in a <acronym>JAR</acronym> artifact in your local Maven
      repository. In order for the maven-theme.css file to be included in the
      skin's <acronym>JAR</acronym> file, it must reside in the main
      project-resources directory,
      <filename>src/main/resources</filename>.</para>

      <para>As with the default the default site template, you will want to
      start customizing your new skin's <acronym>CSS</acronym> from a good
      starting point. Copy the <acronym>CSS</acronym> file used by the default
      Maven skin to your project's <filename>maven-theme.css</filename>. To
      get a copy of this theme file, save the contents of <ulink
      url="http://svn.apache.org/viewvc/maven/skins/trunk/maven-default-skin/src/main/resources/css/maven-theme.css?view=co">maven-theme.css</ulink>
      from the <varname>maven-default-skin</varname> project to
      <filename>src/main/resources/css/maven-theme.css</filename> in our new
      skin project.</para>

      <para>Now that we have the base theme file in place, customize it using
      the <acronym>CSS</acronym> from our old site.css file. Replace the
      <varname>#navcolumn h5</varname> <acronym>CSS</acronym> block with the
      following:</para>

      <screen>#navcolumn h5 {
  font-size: smaller;
  border: 1px solid #aaaaaa;
  background-color: #bbb;
  margin-top: 7px;
  margin-bottom: 2px;
  padding-top: 2px;
  padding-left: 2px;
  color: #000;
}
</screen>

      <para>Once you've customized the <filename>maven-theme.css</filename>,
      build and install the <varname>sample-site-skin</varname>
      <acronym>JAR</acronym> artifact to your local Maven repository by
      running:</para>

      <screen>$ mvn clean install
</screen>

      <para>Once the installation is complete, switch back to the
      <filename>sample-project</filename> project directory, if you already
      customized the <filename>site.css</filename> earlier in this chapter,
      move <filename>site.css</filename> to <filename>site.css.bak</filename>
      so it no longer affects the output of the Maven Site plugin:</para>

      <screen>$ mv src/site/resources/css/site.css src/site/resources/css/site.css.bak
</screen>

      <para>To use the <varname>sample-site-skin</varname> in the
      <varname>sample-project</varname> site, you'll need to add a reference
      to the <varname>sample-site-skin</varname> artifact in the
      <varname>sample-project</varname>'s site descriptor. A site references a
      skin in the site descriptor using the skin element:</para>

      <para><example>
          <title>Configuring a Custom Site Skin in Site Descriptor</title>

          <programlisting language="xml">&lt;project name="Sample Project"&gt;
  ...
  &lt;skin&gt;
    &lt;groupId&gt;org.sonatype.mavenbook&lt;/groupId&gt;
    &lt;artifactId&gt;sample-site-skin&lt;/artifactId&gt;
  &lt;/skin&gt;
  ...
&lt;/project&gt;
</programlisting>
        </example></para>

      <para>You can think of a Maven Site skin as a site dependency. Site
      skins are referenced as artifacts with a groupId and an artifactId.
      Using a site skin allows you to consolidate site customizations to a
      single project, and makes reusing custom <acronym>CSS</acronym> and site
      templates as easy as reusing build logic through a custom Maven
      plugin.</para>
    </section>
  </section>

  <section id="site-generation-sect-tips-tricks">
    <title>Tips and Tricks</title>

    <para>This section lists some useful tips and tricks you can use when
    creating a Maven site.</para>

    <section id="site-generation-sect-inject-xhtml">
      <title>Inject XHTML into HEAD</title>

      <para>To inject <acronym>XHTML</acronym> into the
      <acronym>HEAD</acronym> element, add a head element to the body element
      in your project's Site descriptor. The following example adds a feed
      link to every page in the <varname>sample-project</varname> web
      site.</para>

      <para><example>
          <title>Injecting HTML into the HEAD element</title>

          <programlisting language="xml">&lt;project name="Hello World"&gt;
  ...
  &lt;body&gt;
    &lt;head&gt;
      &lt;link href="http://sample.com/sites/sample-project/feeds/blog"
            type="application/atom+xml" 
            id="auto-discovery" 
            rel="alternate" 
            title="Sample Project Blog" /&gt;
    &lt;/head&gt;
    ...
  &lt;/body&gt;
&lt;/project&gt;
</programlisting>
        </example></para>
    </section>

    <section id="site-generation-sect-add-links">
      <title>Add Links under Your Site Logo</title>

      <para>If you are working on a project which is being developed by an
      organization, you may want to add links under your project's logo.
      Assume that your project is a part of the Apache Software Foundation,
      you might want to add a link to the Apache Software Foundation web site
      right below your logo, and you might want to add a link to a parent
      project as well. To add links below your site logo, just add a links
      element to the body element in the Site descriptor. Each item element in
      the links element will be rendered as a link in a bar directly below
      your project's logo. The following example would add a link to the
      Apache Software Foundation followed by a link to the Apache Maven
      project.</para>

      <para><example>
          <title>Adding Links Under Your Site Logo</title>

          <programlisting language="xml">&lt;project name="Hello World"&gt;
  ...
  &lt;body&gt;
    ...
    &lt;links&gt;
      &lt;item name="Apache" href="http://www.apache.org"/&gt;
      &lt;item name="Maven" href="http://maven.apache.org"/&gt;
    &lt;/links&gt;
    ...
  &lt;/body&gt;
&lt;/project&gt;
</programlisting>
        </example></para>
    </section>

    <section id="site-generation-add-breadcumbs">
      <title>Add Breadcrumbs to Your Site</title>

      <para>If your hierarchy exists within a logical hierarchy, you may want
      to place a series of breadcrumbs to give the user a sense of context and
      give them a way to navigate up the tree to projects which might contain
      the current project as a subproject. To configure breadcrumbs, add a
      <sgmltag>breadcrumbs</sgmltag> element to the <sgmltag>body</sgmltag>
      element in the site descriptor. Each <sgmltag>item</sgmltag> element
      will render a link, and the items in the <sgmltag>breadcrumbs</sgmltag>
      element will be rendered in order. The breadcrumb items should be listed
      from highest level to lowest level. In the following site descriptor,
      the Codehaus item would be seen to contain the Mojo item.</para>

      <para><example>
          <title>Configuring the Site's Breadcrumbs</title>

          <programlisting language="xml">&lt;project name="Sample Project"&gt;
  ...
  &lt;body&gt;
    ...
    &lt;breadcrumbs&gt;
      &lt;item name="Codehaus" href="http://www.codehaus.org"/&gt;
      &lt;item name="Mojo" href="http://mojo.codehaus.org"/&gt;
    &lt;/breadcrumbs&gt;
    ...
  &lt;/body&gt;
&lt;/project&gt;
</programlisting>
        </example></para>
    </section>

    <section id="site-generation-sect-add-project-version">
      <title>Add the Project Version</title>

      <para>When you are documenting a project that has multiple versions, it
      is often very helpful to list the project's version number on every
      page. To display your project's version on the website, simply add the
      <sgmltag>version</sgmltag> element to your site descriptor:</para>

      <para><example>
          <title>Positioning the Version Information</title>

          <programlisting language="xml">&lt;project name="Sample Project"&gt;
  ...
  &lt;version position="left"/&gt;
  ...
&lt;/project&gt;
</programlisting>
        </example></para>

      <para>This will position the version (in the case of the sample-project
      project, it will say "Version: 1.0-SNAPSHOT") in the upper left-hand
      corner of the site, right next to the default "Last Published" date.
      Valid positions for the project version are:</para>

      <variablelist>
        <varlistentry>
          <term>left</term>

          <listitem>
            <para>Left side of the bar just below the site logo</para>
          </listitem>
        </varlistentry>

        <varlistentry>
          <term>right</term>

          <listitem>
            <para>Right side of the bar just below the site logo</para>
          </listitem>
        </varlistentry>

        <varlistentry>
          <term>navigation-top</term>

          <listitem>
            <para>Top of the menu</para>
          </listitem>
        </varlistentry>

        <varlistentry>
          <term>navigation-bottom</term>

          <listitem>
            <para>Bottom of the menu</para>
          </listitem>
        </varlistentry>

        <varlistentry>
          <term>none</term>

          <listitem>
            <para>Suppress the version entirely</para>
          </listitem>
        </varlistentry>
      </variablelist>
    </section>

    <section id="site-generation-sect-mod-pubdate">
      <title>Modify the Publication Date Format and Location</title>

      <para>In some cases, you may wish to reformat or reposition the "Last
      Published" date for your project website. Just like the project version
      tip above, you can specify the position of the publication date by using
      one of the following:</para>

      <variablelist>
        <varlistentry>
          <term>left</term>

          <listitem>
            <para>Left side of the bar just below the site logo</para>
          </listitem>
        </varlistentry>

        <varlistentry>
          <term>right</term>

          <listitem>
            <para>Right side of the bar just below the site logo</para>
          </listitem>
        </varlistentry>

        <varlistentry>
          <term>navigation-top</term>

          <listitem>
            <para>Top of the menu</para>
          </listitem>
        </varlistentry>

        <varlistentry>
          <term>navigation-bottom</term>

          <listitem>
            <para>Bottom of the menu</para>
          </listitem>
        </varlistentry>

        <varlistentry>
          <term>none</term>

          <listitem>
            <para>Suppress the publication entirely</para>
          </listitem>
        </varlistentry>
      </variablelist>

      <para><example>
          <title>Positioning the Publish Date</title>

          <programlisting language="xml">&lt;project name="Sample Project"&gt;
  ...
  &lt;publishDate position="navigation-bottom"/&gt;
  ...
&lt;/project&gt;
</programlisting>
        </example></para>

      <para>By default, the publication date will be formatted using the date
      format string <varname>MM/dd/yyyy</varname>. You can change this format
      by using the standard notation found in the JavaDocs for
      <classname>java.text.SimpleDateFormat</classname> (see JavaDoc for
      <ulink
      url="http://java.sun.com/j2se/1.5.0/docs/api/java/text/SimpleDateFormat.html">SimpleDateFormat</ulink>
      for more information). To reformat the date using
      <varname>yyyy-MM-dd</varname>, use the following
      <sgmltag>publishDate</sgmltag> element.</para>

      <para><example>
          <title>Configuring the Publish Date Format</title>

          <programlisting language="xml">&lt;project name="Sample Project"&gt;
  ...
  &lt;publishDate position="navigation-bottom" format="yyyy-MM-dd"/&gt;
  ...
&lt;/project&gt;
</programlisting>
        </example></para>
    </section>

    <section id="site-generation-sect-doxia-macros">
      <title>Using Doxia Macros</title>

      <para>In addition to its advanced document rendering features, Doxia
      also provides a macro engine that allows each input format to trigger
      injection of dynamic content. An excellent example of this is the
      snippet macro, which allows a document to pull a code snippet out of a
      source file that's available via <acronym>HTTP</acronym>. Using this
      macro, a small fragment of <acronym>APT</acronym> can be rendered into
      <acronym>XHTML</acronym>. The following <acronym>APT</acronym> code
      calls out to the snippet macro. Please note that this code should be on
      a single continuous line, the black slash character is inserted to
      denote a line break so that this code will fit on the printed
      page.</para>

      <screen>%{snippet|id=modello-model|url=http://svn.apache.org/repos/asf/maven/\
archetype/trunk/maven-archetype/maven-archetype-model/src/main/\
mdo/archetype.mdo}
</screen>

      <para><example>
          <title>Output of the Snippet Macro in XHTML</title>

          <programlisting language="xml">&lt;div class="source"&gt;&lt;pre&gt;

&lt;model&gt;
  &lt;id&gt;archetype&lt;/id&gt;
  &lt;name&gt;Archetype&lt;/name&gt;
  &lt;description&gt;&lt;![CDATA[Maven's model for the archetype descriptor.
  ]]&gt;&lt;/description&gt;
  &lt;defaults&gt;
    &lt;default&gt;
      &lt;key&gt;package&lt;/key&gt;
      &lt;value&gt;org.apache.maven.archetype.model&lt;/value&gt;
    &lt;/default&gt;
  &lt;/defaults&gt;
  &lt;classes&gt;
    &lt;class rootElement="true" xml.tagName="archetype"&gt;
      &lt;name&gt;ArchetypeModel&lt;/name&gt;
      &lt;description&gt;Describes the assembly layout and packaging.&lt;/description&gt;
      &lt;version&gt;1.0.0&lt;/version&gt;
      &lt;fields&gt;
        &lt;field&gt;
          &lt;name&gt;id&lt;/name&gt;
          &lt;version&gt;1.0.0&lt;/version&gt;
          &lt;required&gt;true&lt;/required&gt;
          &lt;type&gt;String&lt;/type&gt;
        &lt;/field&gt;
        ...
      &lt;/fields&gt;
    &lt;/class&gt;
  &lt;/classes&gt;
&lt;/model&gt;

&lt;/pre&gt;&lt;/div&gt;
</programlisting>
        </example></para>

      <warning>
        <para>Doxia macros MUST NOT be indented in <acronym>APT</acronym>
        source documents. Doing so will result in the <acronym>APT</acronym>
        parser skipping the macro altogether.</para>
      </warning>

      <para>For more information about defining snippets in your code for
      reference by the snippet macro, see the Guide to the Snippet Macro on
      the Maven website, at <ulink
      url="http://maven.apache.org/guides/mini/guide-snippet-macro.html">http://maven.apache.org/guides/mini/guide-snippet-macro.html</ulink>.</para>
    </section>
  </section>
</chapter>
