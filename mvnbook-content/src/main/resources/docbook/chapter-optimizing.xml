<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE chapter PUBLIC "-//OASIS//DTD DocBook XML V4.5//EN"
"http://www.oasis-open.org/docbook/xml/4.5/docbookx.dtd">
<chapter id="optimizing"><title>Optimiser et Remanier les POMs</title>  <section id="optimizing-sect-intro"><title>Introduction</title> <para>Dans le <xref linkend="multimodule-web-spring" />, nous avons vu combien<indexterm class="startofrange" id="optref1a"> <primary>POM (Project Object Model)</primary> <secondary>optimizing and refactoring</secondary> </indexterm><indexterm class="startofrange" id="optref1b"> <primary>optimizing POMs</primary> </indexterm><indexterm> <primary>refactoring POMs</primary> <see>optimizing POMs</see> </indexterm><indexterm> <primary>object model</primary> <see>POM; pom.xml file</see> </indexterm><indexterm> <primary>pom.xml file</primary> <secondary>optimizing</secondary> <see>optimizing POMs</see> </indexterm> d'éléments de Maven doivent intervenir de concert pour produire un un build multi-module complèetement fonctionnel. Bien que l'exemple du chapitre précédent représente une véritable application&mdash;une application qui intéragit avec une base de données, un web service, et qui elle-même présente deux interfaces: une au travers d'une application web, et l'autre via la ligne de commande&mdash;cet exemple de projet reste convenu. Présenter la compléxité d'un véritable projet demanderait un livre bien plus épais que celui que vous êtes en train de lire. Dans la vraie vie les applications évoluent année après année et sont souvent maintenues par des groupes de développeurs nombreux et divers, chacun se concentrant sur sa propre partie. Dans un véritable projet, vous devez souvent évaluer les décisions et la conception faites par d'autres. Dans ce chapitre, nous allons prendre du recul par rapport aux exemples que que vous avez vus dans la <xref linkend="part-example" />, et nous allons nous demander s'il existe des optimisations à réaliser étant donné ce que nous avons appris sur Maven. Maven est un outil très adaptable qui peuti devenir aussi simple ou complexe selon votre besoin. C'est pour cette raison qu'il existe des millions de manières différentes de réaliser la même tâche,faire, et donc il n'existe pas une “bonne” façon de configurer votre projet Maven.</para> <para>N'allez par détourner cette dernière pharse pour y voir une autorisation à demander à Maven de faire des choses qu'il n'a pas été conçu pour réaliser. Même si Maven permet des approches diverses et variées, il existe sûrement une approche "à la Maven", et vous serez plus efficace en utilisant Maven comme il a été conçu pour être utilisé. Tout ce que ce chapitre essaye de faire est de communiquer certaines optimisations que vous pouvez appliquer à un projet Maven existant. Pourquoi n'avons nous pas commencé avec un <acronym>POM</acronym> optimisé en premier lieu? concevoir des <acronym>POM</acronym>s avec une valeur pédagogique est bien différente de ce qu'on attend de la conception de <acronym>POM</acronym>s efficaces. S'il est sûrement plus facile de définir certaines valeurs dans votre <filename>~/.m2/settings.xml</filename> que de déclarer un profil dans un <filename>pom.xml</filename>, l'écriture un livre, comme la lecture dépendent du rythme et de avec lequel on va introduire de nouveaux concepts ainsi que de l'assurance que ces concepts ne seront pas introduits trop tôt. Dans la <xref linkend="part-example" />, nous avons fait l'effort de ne pas surcharger le lecteur avec trop d'infomations, et ce faisant, nous avons dû éviter certains concepts de base comme la balise <sgmltag>dependencyManagement</sgmltag> dont nous parlerons dans ce chapitre.</para> <para>Dans pusieurs cas de la <xref linkend="part-example" /> les auteurs de ce livre ont choisi des raccourcis ou ont évité un point de détail important pour vous gardez sur l'essentiel du chapitre en question. Vous avez appris à créer un projet Maven, vous l'avez compilé et installé sans avoir à parcourir des centaines de pages qui vous décrivaient toutes les options et possibilités que vous aviez.  Nous avons procédé ainsi car nous pensons qu'il est important pour un nouvel utilisateur de Maven d'obtenir rapidement des résultats plutôt que de suivre une très longue, voir interminable histoire. Une fois que vous avez commencé à utiliser Maven, vous devriez savoir comment analyser vos propres projets et <acronym>POM</acronym>s. Dans ce chapitre, nous prenons du recul pour regarder ce qu'il nous reste après l'exemple du <xref linkend="multimodule-web-spring" />. </para> </section> <section id="optimizing-sect-pom-cleanup"><title>Nettoyer le POM</title> <para>L'optimisation du <acronym>POM</acronym> d'un projet multi-module est plus facile à faire <indexterm> <primary>multimodule projects, optimizing POMs for</primary> </indexterm><indexterm> <primary>POM (Project Object Model)</primary> <secondary>optimizing and refactoring</secondary> <tertiary>about cleaning up POMs</tertiary> </indexterm><indexterm> <primary>optimizing POMs</primary> <secondary>about cleaning up POMs</secondary> </indexterm><indexterm> <primary>cleaning up POMs</primary> <seealso>optimizing POMs</seealso> </indexterm> en plusieurs passes, car il y a plusieurs points à traiter. En général, nous recherchons desrépétitions dans un <acronym>POM</acronym> et parmi des <acronym>POM</acronym>s frères. Quand vous ommencez ou lorsque votre projet évole encore fréquemment, il est tout  fait acceptable de dupliquer des dépendances et des configurations de plugins, mais au fur et à mesure que votre projet se stabilise et que le nombre de sous-modules augmente, vous devrez prendre le temps de remanier ces élements de configuration et de dépendances communs. Rendre vos <acronym>POM</acronym>s plus efficaces vous aidera énormement pour gérer la complexité de votre projet durant sa croissance. A chaque fois qu'il y a duplication d'iinformation, il existe une meilleure manière de faire. </para> </section> <section id="optimizing-sect-dependencies"><title>Optimiser les Dépendances</title> <para>Si vous jettez un oeil aux différents <acronym>POM</acronym>s<indexterm class="startofrange" id="optref2a"> <primary>POM (Project Object Model)</primary> <secondary>optimizing and refactoring</secondary> <tertiary>dependency optimization</tertiary> </indexterm><indexterm class="startofrange" id="optref2b"> <primary>optimizing POMs</primary> <secondary>dependency optimization</secondary> </indexterm><indexterm class="startofrange" id="optref2c"> <primary>dependencies</primary> <secondary>optimizing</secondary> </indexterm> créés dans le <xref linkend="multimodule-web-spring" />, vous remarquerez plusieurs types de réplication. Le premier type que vous pouvez voir est la réplication de dépendances comme <varname>spring</varname> et <varname>hibernate-annotations</varname> dans plusieurs modules. La dépendance <varname>hibernate</varname> a en outre l'exclusion de <package>javax.transaction </package>à chacune de ses définitions. Le<indexterm> <primary>duplicated dependency declarations</primary> </indexterm><indexterm> <primary>replicated dependencies</primary> </indexterm> second type de duplication à remarquer est que parfois plusieurs dépendances sont liées entre elles et partagent la même version. C'est souvent le cas lorsqu'un projet livre plusieurs composants couplés entre eux. Par exemple, reagrdez les dépendances <varname>hibernate-</varname><varname>annotations</varname> et <varname>hibernate-commons-annotations</varname>. Toutes les deux ont la même version <varname>3.3.0.ga</varname>, et nous pouvons nous attendre à ce que les versions de ces deux dépendances évoluent de concert. Les deux artéfacts <varname>hibernate-annotations</varname> et <varname>hibernate-commons-annotations</varname> sont des composants du même projet livré par JBoss, et donc quand une nouvelle version de ce projet sorta, ces deux dépendances changent. Le troisième et dernier type de duplication est la<indexterm> <primary>sibling module dependency duplication</primary> </indexterm> duplication de dépendances et de version de modules frères. Maven fourit un mécanisme simple pour vous permettre de factoriser ces<indexterm> <primary>POM (Project Object Model)</primary> <secondary>parent (top-level)</secondary> <tertiary>resolving dependency duplication</tertiary> </indexterm><indexterm> <primary>top-level POM</primary> <secondary>resolving dependency duplication</secondary> </indexterm><indexterm> <primary>parent POM</primary> <secondary>resolving dependency duplication</secondary> </indexterm><indexterm> <primary>pom.xml file</primary> <secondary>parent (top-level)</secondary> <tertiary>resolving dependency duplication</tertiary> </indexterm> duplications dans un <acronym>POM</acronym> parent.</para> <para>De la même manière uqe pour le code source de votre projet, à chaque fois que vous avez une duplication dans vos <acronym>POM</acronym>s, vous laissez la porte ouverte pour de futurs problèmes. La cohérence des versions sur un gros projet sera difficile à assurer si des déclarations de dépendance sont dupliquées. Tant que vous avez deux ou trois modules, cela reste gérable, mais lorsque votre organisation utilise un énorme build multi-module pour gérer des centaines de composants produits par plusieurs services, une seule erreur de dépendance peut entrainer chaos et confusion. Une simple erreur de version dans un projet sur une dépendance permettant la manipulation <phrase role="keep-together">de bytecode</phrase> comme <acronym>ASM</acronym> au troisième niveau de profondeur dans les dépendances peut devenir le grains de sable qui gripperait une application application web, maintenue par une autre équipe de développeurs, qui dépendrait de ce <indexterm> <primary>unit tests</primary> <secondary>dependency duplication and</secondary> </indexterm> module. Les tests unitaires pourraient passer car ils sont exécutés avec une certaine version de la dépendance, mais ils échoueraient lamentablement en en production là où le package (un WAR, dans ce cas) serait réalisé avec une version différente. Si vous avez des dizaines de projets qui utilisent une même dépendance comme Hibernate Annotations, chaque recopie et duplication des dépedances et des exclusions rapproche l'instant où quelqu'un aura un build en échec. Au fur et à mesure que la complexité de vos projets Maven augmente, la liste de vos dépendances s'allonge et vous allez donc devoir stabiliser les déclarations de dépendance et de version dans des <acronym>POM</acronym>s parent.</para> <para>La duplication des versions des modules frères peut produire un problème assez méchant<indexterm> <primary>sibling module dependency duplication</primary> </indexterm> qui ne résulte pas directement de Maven, et que l'on retient qu'après l'avoir renconté plusieurs fois. Si vous utilisez le plugin Maven Release pour effectuer vos livraisons, toutes les versions de dépendance soeurs seront automatiquement mises à jour pour vous, aussi ce n'est pas là que réside le problème. Si<varname>simple-web</varname> version <varname>1.3-SNAPSHOT</varname> dépend de <varname>simple-persist</varname> version <varname>1.3-SNAPSHOT</varname>, et si vous produisez la version 1.3 de ces deux projets, le plugin Maven Release est suffisamment intelligent pour changer les versions dans les <acronym>POM</acronym>s de votre projet multi-module automatiquement. Produire la livraison avec le plugin Release va utomatiquement incrémenter les versiosnde votre build à <varname>1.4-SNAPSHOT</varname>, et le plugin Release va commiter les modifications du code sur le dépôt de source. Livrer un énorme projet multi-module ne pourrait être plus facile, à moins que...</para> <para>Les problèmes arrivent lorsque les développeurs fusionnent les modifications du<indexterm> <primary>merging POM changes</primary> </indexterm><indexterm> <primary>POM (Project Object Model)</primary> <secondary>merging POMs</secondary> </indexterm> <acronym>POM</acronym> et perturbent une livraison en cours. Un développeur fusionne souvent et parfois il se trompe lors de la gestion du conflit sur la dépendance dun module frère, revenant par inadvertance à la version de la livraison pécédente. Comme les versions consécutives d'une dépendance sont souvent compatibles, cela n'apparait pas lorsque le développeur lance le build, ni avec un système d'intégration continue. Imaginez un build très comlexe où le tronc est rempi de composants à la version <varname>1.4-SNAPSHOT</varname>, et maintenant imaginez que le Développeur A a mis à jour le Composant A  tout au fond de la hiérarchie du projet pour qu'il dépende de la version <varname>1.3-SNAPSHOT</varname> du Composant B. Même si la plupart des dévloppeurs utilisent la version <varname>1.4-SNAPSHOT</varname>, le build fonctionne correctement si les versions <varname>1.3-SNAPSHOT</varname> et <varname>1.4-SNAPSHOT</varname> du Composant B sont compatibles. Maven continuer à construire le projet en utilisant la version <varname>1.3-SNAPSHOT</varname> du Composant B depuis le dépôt local des développeurs. Tout semble bien se passer&mdash;le projet est construit, l'intégration continue est au vert, etc. Someone might have a mystifying bug related to Component B, but she chalks it up to malevolent gremlins and moves on. Meanwhile, a pump in the reactor room is steadily building up pressure, until something blows....</para> <para>Someone, let's call them Mr. Inadvertent, had a merge conflict in component A, and mistakenly pegged component A's dependency on component B to <varname>1.3-SNAPSHOT</varname> while the rest of the project marches on. A bunch of developers have been trying to fix a bug in component B all this time and they've been mystified as to why they can't seem to fix the bug in production. Eventually someone looks at component A and realizes that the dependency is pointing to the wrong version. Hopefully, the bug wasn't large enough to cost money or lives, but Mr. Inadvertent feels stupid and people tend to trust him a little less than they did before the whole sibling dependency screw-up. (Hopefully, Mr. Inadvertent realizes that this was user error and not Maven's fault, but more than likely he starts an awful blog and complains about Maven endlessly to make himself feel better.)</para> <para>Fortunately, dependency duplication and sibling dependency mismatch are easily preventable if you make some small changes. The first thing we’re going to do is find all the dependencies used in more than one project and move them up to the parent <acronym>POM</acronym>’s <sgmltag>dependencyManagement</sgmltag> section. We’ll leave out the sibling dependencies for now. The <varname>simple-parent</varname> pom now contains the following: </para><programlisting language="xml">&lt;project&gt;
  ...
  &lt;dependencyManagement&gt;
    &lt;dependencies&gt;
      &lt;dependency&gt;
        &lt;groupId&gt;org.springframework&lt;/groupId&gt;
        &lt;artifactId&gt;spring&lt;/artifactId&gt;
        &lt;version&gt;2.0.7&lt;/version&gt;
      &lt;/dependency&gt;
      &lt;dependency&gt;
        &lt;groupId&gt;org.apache.velocity&lt;/groupId&gt;
        &lt;artifactId&gt;velocity&lt;/artifactId&gt;
        &lt;version&gt;1.5&lt;/version&gt;
      &lt;/dependency&gt;  
      &lt;dependency&gt;
        &lt;groupId&gt;org.hibernate&lt;/groupId&gt;
        &lt;artifactId&gt;hibernate-annotations&lt;/artifactId&gt;
        &lt;version&gt;3.3.0.ga&lt;/version&gt;
      &lt;/dependency&gt;
      &lt;dependency&gt;
        &lt;groupId&gt;org.hibernate&lt;/groupId&gt;
        &lt;artifactId&gt;hibernate-commons-annotations&lt;/artifactId&gt;
        &lt;version&gt;3.3.0.ga&lt;/version&gt;
      &lt;/dependency&gt;
      &lt;dependency&gt;
        &lt;groupId&gt;org.hibernate&lt;/groupId&gt;
        &lt;artifactId&gt;hibernate&lt;/artifactId&gt;
        &lt;version&gt;3.2.5.ga&lt;/version&gt;
        &lt;exclusions&gt;
          &lt;exclusion&gt;
            &lt;groupId&gt;javax.transaction&lt;/groupId&gt;
            &lt;artifactId&gt;jta&lt;/artifactId&gt;
          &lt;/exclusion&gt;
        &lt;/exclusions&gt;
      &lt;/dependency&gt;
    &lt;/dependencies&gt;
  &lt;/dependencyManagement&gt;
  ...
&lt;/project&gt;</programlisting> <para>Once these are moved up, we need to remove the versions for these dependencies from each of the <acronym>POM</acronym>s; otherwise, they will override the <sgmltag>dependencyManagement</sgmltag> defined in the parent project. Let’s look at only <varname>simple-model</varname> for brevity’s sake: </para><programlisting language="xml">&lt;project&gt;
  ...
  &lt;dependencies&gt;
    &lt;dependency&gt;
      &lt;groupId&gt;org.hibernate&lt;/groupId&gt;
      &lt;artifactId&gt;hibernate-annotations&lt;/artifactId&gt;
    &lt;/dependency&gt;
    &lt;dependency&gt;
      &lt;groupId&gt;org.hibernate&lt;/groupId&gt;
      &lt;artifactId&gt;hibernate&lt;/artifactId&gt;
    &lt;/dependency&gt;
  &lt;/dependencies&gt;
  ...
&lt;/project&gt;</programlisting> <para>The next thing we should do is fix the replication of the <varname>hibernate-annotations</varname> and <varname>hibernate-commons-annotations</varname> version since these should match. We’ll do this by creating a property called <varname>hibernate.annotations.version</varname>. The resulting <varname>simple-parent</varname> section looks like this: </para><programlisting language="xml">&lt;project&gt;
  ...
  &lt;properties&gt;
    &lt;hibernate.annotations.version&gt;3.3.0.ga&lt;/hibernate.annotations.version&gt;
  &lt;/properties&gt;

  &lt;dependencyManagement&gt;
    ...
    &lt;dependency&gt;
      &lt;groupId&gt;org.hibernate&lt;/groupId&gt;
      &lt;artifactId&gt;hibernate-annotations&lt;/artifactId&gt;
      &lt;version&gt;\${hibernate.annotations.version}&lt;/version&gt;
    &lt;/dependency&gt;
    &lt;dependency&gt;
      &lt;groupId&gt;org.hibernate&lt;/groupId&gt;
      &lt;artifactId&gt;hibernate-commons-annotations&lt;/artifactId&gt;
      &lt;version&gt;\${hibernate.annotations.version}&lt;/version&gt;
    &lt;/dependency&gt;
    ...
  &lt;/dependencyManagement&gt;
  ...
&lt;/project</programlisting> <para>The last issue we have to resolve is with the sibling dependencies.<indexterm> <primary>sibling module dependency duplication</primary> </indexterm> One technique we could use is to move these up to the <sgmltag>dependencyManagement</sgmltag> section, just like all the others,<indexterm> <primary>version attribute (pom.xml)</primary> <secondary>built-in, to avoid dependency duplication</secondary> </indexterm><indexterm> <primary>groupId attribute (pom.xml)</primary> <secondary>built-in, to avoid dependency duplication</secondary> </indexterm><indexterm> <primary>dependencies</primary> <secondary>plugin</secondary> <see>plugins</see> </indexterm> and define the versions of sibling projects in the top-level parent project. This is certainly a valid approach, but we can also solve the version problem just by using two built-in properties—<varname>\${project.groupId}</varname> and <varname>\${project.version}</varname>. Since they are sibling dependencies, there is not much value to be gained by enumerating them in the parent, so we’ll rely on the built-in <varname>\${project.version}</varname> property. Because they all share the same group, we can further future-proof these declarations by referring to the current <acronym>POM</acronym>’s group using the built-in <varname>\${project.groupId}</varname> property. The <varname>simple-command</varname> <phrase role="keep-together">dependency</phrase> section now looks like this: </para><programlisting language="xml">&lt;project&gt;
  ...
  &lt;dependencies&gt;
    ...
    &lt;dependency&gt;
      &lt;groupId&gt;\${project.groupId}&lt;/groupId&gt;
      &lt;artifactId&gt;simple-weather&lt;/artifactId&gt;
      &lt;version&gt;\${project.version}&lt;/version&gt;
    &lt;/dependency&gt;
    &lt;dependency&gt;
      &lt;groupId&gt;\${project.groupId}&lt;/groupId&gt;
      &lt;artifactId&gt;simple-persist&lt;/artifactId&gt;
      &lt;version&gt;\${project.version}&lt;/version&gt;
    &lt;/dependency&gt;
    ...
  &lt;/dependencies&gt;
  ...
&lt;/project&gt;</programlisting> <para>Here’s a summary of the two optimizations we completed that reduce duplication of dependencies: </para> <variablelist> <varlistentry><term role="plain">Pull-up common dependencies to <sgmltag>dependencyManagement</sgmltag></term> <listitem> <para>If more than one project depends on a specific dependency, you can list the dependency in <sgmltag>dependencyManagement</sgmltag>. The parent <acronym>POM</acronym> can contain a version and a set of exclusions; all the child <acronym>POM</acronym> needs to do to reference this dependency is use the <varname>groupId </varname>and <varname>artifactId</varname>. Child projects can omit the version and exclusions if the dependency is listed in <sgmltag>dependencyManagement</sgmltag>. </para> </listitem> </varlistentry> <varlistentry><term role="plain">Use built-in project <literal>version</literal> and <literal>groupId</literal> for sibling projects</term> <listitem> <para>Use $<varname>{project.version}</varname> and <varname>\${project.groupId}</varname> when referring to a sibling project. Sibling projects almost always share the same <literal>groupId</literal>, and they almost always share the same release version. Using <varname>\${project.version}</varname> will help you avoid the <indexterm class="endofrange" startref="optref2a"></indexterm><indexterm class="endofrange" startref="optref2b"></indexterm><indexterm class="endofrange" startref="optref2c"></indexterm>sibling version mismatch problem discussed previously. </para> </listitem> </varlistentry> </variablelist> </section> <section id="optimizing-sect-plugins"><title>Optimizing Plugins</title> <para>If we take a look at the various plugin configurations, we can see<indexterm class="startofrange" id="optref3a"> <primary>POM (Project Object Model)</primary> <secondary>optimizing and refactoring</secondary> <tertiary>plugin optimization</tertiary> </indexterm><indexterm class="startofrange" id="optref3b"> <primary>optimizing POMs</primary> <secondary>plugin optimization</secondary> </indexterm><indexterm class="startofrange" id="optref3c"> <primary>plugins</primary> <secondary>optimizing</secondary> </indexterm> the <acronym>HSQLDB</acronym> dependencies duplicated in several places. Unfortunately, <sgmltag>dependencyManagement</sgmltag> doesn’t apply to plugin dependencies, but we can still use a property to consolidate the versions. Most complex Maven multimodule projects tend to define all versions in the top-level <acronym>POM</acronym>. This top-level <acronym>POM</acronym> then becomes a focal point for changes that affect the entire project. Think of version numbers as string literals in a Java class; if you are constantly repeating a literal, you’ll likely want to make it a variable so that when it needs to be changed, you have to change it in only one place. Rolling up the version of <acronym>HSQLDB</acronym> into a property in the top-level <acronym>POM</acronym> yields the following <literal>properties</literal> element: </para><programlisting language="xml">&lt;project&gt;
  ...
  &lt;properties&gt;
    &lt;hibernate.annotations.version&gt;3.3.0.ga&lt;/hibernate.annotations.version&gt;
    &lt;hsqldb.version&gt;1.8.0.7&lt;/hsqldb.version&gt;
  &lt;/properties&gt;
  ...
&lt;/project&gt;</programlisting> <para>The next thing we notice is that the <varname>hibernate3-maven-plugin</varname> configuration is duplicated in the <varname>simple-webapp</varname> and <varname>simple-command</varname> modules. We can manage the plugin configuration in the top-level <acronym>POM</acronym> just as we managed the dependencies in the top-level <acronym>POM</acronym> with the <sgmltag>dependencyManagement</sgmltag> section. To do this, we use the<indexterm> <primary sortas="pluginManagement element (pom.xml)">&lt;pluginManagement&gt; element (pom.xml)</primary> </indexterm> <sgmltag role="keep-together">pluginManagement</sgmltag> element in the top-level<indexterm class="endofrange" startref="optref3a"></indexterm><indexterm class="endofrange" startref="optref3b"></indexterm><indexterm class="endofrange" startref="optref3c"></indexterm> <acronym>POM</acronym>’s build element: </para><programlisting language="xml">&lt;project&gt;
  ...
  &lt;build&gt;
    &lt;pluginManagement&gt;
      &lt;plugins&gt;
        &lt;plugin&gt;
          &lt;groupId&gt;org.apache.maven.plugins&lt;/groupId&gt;
          &lt;artifactId&gt;maven-compiler-plugin&lt;/artifactId&gt;
          &lt;configuration&gt;
            &lt;source&gt;1.5&lt;/source&gt;
            &lt;target&gt;1.5&lt;/target&gt;
          &lt;/configuration&gt;
        &lt;/plugin&gt;
        &lt;plugin&gt;
          &lt;groupId&gt;org.codehaus.mojo&lt;/groupId&gt;
          &lt;artifactId&gt;hibernate3-maven-plugin&lt;/artifactId&gt;
          &lt;version&gt;2.1&lt;/version&gt;
          &lt;configuration&gt;
            &lt;components&gt;
              &lt;component&gt;
                &lt;name&gt;hbm2ddl&lt;/name&gt;
                &lt;implementation&gt;annotationconfiguration&lt;/implementation&gt;
              &lt;/component&gt;
            &lt;/components&gt;
          &lt;/configuration&gt;
          &lt;dependencies&gt;
            &lt;dependency&gt;
              &lt;groupId&gt;hsqldb&lt;/groupId&gt;
              &lt;artifactId&gt;hsqldb&lt;/artifactId&gt;
              &lt;version&gt;\${hsqldb.version}&lt;/version&gt;
            &lt;/dependency&gt;
          &lt;/dependencies&gt;
        &lt;/plugin&gt;
      &lt;/plugins&gt;
    &lt;/pluginManagement&gt;
  &lt;/build&gt;
  ...
&lt;/project&gt;
</programlisting>  </section> <section id="optimizing-sect-dependency-plugin"><title>Optimizing with the Maven Dependency Plugin</title> <para>On larger projects, additional dependencies often tend to creep into<indexterm class="startofrange" id="optref4a"> <primary>POM (Project Object Model)</primary> <secondary>optimizing and refactoring</secondary> <tertiary sortas=" Maven Dependency plugin">with Maven Dependency plugin</tertiary> </indexterm><indexterm class="startofrange" id="optref4b"> <primary>optimizing POMs</primary> <secondary sortas="Maven Dependency plugin">Maven Dependency plugin</secondary> </indexterm><indexterm class="startofrange" id="optref4c"> <primary>Maven Dependency plugin</primary> <secondary>optimizing POMs with</secondary> </indexterm><indexterm class="startofrange" id="optref4d"> <primary>dependencies</primary> <secondary>optimizing</secondary> <tertiary>Maven Dependency plugin for</tertiary> </indexterm> a POM as the number of dependencies grow. As dependencies change, you are often left with dependencies that are not being used, and just as often, you may forget to declare explicit dependencies for libraries you require. Because Maven 2.x includes transitive dependencies in the compile scope, your project may compile properly but fail to run in production. Consider a case where a project uses classes from a widely used project such as Jakarta Commons BeanUtils. Instead of declaring an explicit dependency on <phrase role="keep-together">BeanUtils</phrase>, your project simply relies on a project like Hibernate that references BeanUtils as a transitive dependency. Your project may compile successfully and run just fine, but if you upgrade to a new version of Hibernate that doesn’t depend on BeanUtils, you’ll start to get compile and runtime errors, and it won’t be immediately obvious why your project stopped compiling. Also, because you haven’t explicitly listed a dependency version, Maven cannot resolve any version conflicts that may arise.</para> <para>A good rule of thumb in Maven is to always declare explicit dependencies for classes referenced in your code. If you are going to be importing Commons BeanUtils classes, you should also be declaring a direct dependency on Commons BeanUtils. Fortunately, via bytecode analysis, the Maven Dependency plugin is able to assist you in uncovering direct references to dependencies. Using the updated POMs we previously optimized, let’s look to see if any errors pop up: </para><screen>$ <command>mvn dependency:analyze</command>
[INFO] Scanning for projects...
[INFO] Reactor build order:
[INFO]   Chapter 8 Simple Parent Project
[INFO]   Chapter 8 Simple Object Model
[INFO]   Chapter 8 Simple Weather API
[INFO]   Chapter 8 Simple Persistence API
[INFO]   Chapter 8 Simple Command Line Tool
[INFO]   Chapter 8 Simple Web Application
[INFO]   Chapter 8 Parent Project
[INFO] Searching repository for plugin with prefix: 'dependency'.

...

[INFO] ------------------------------------------------------------------------
[INFO] Building Chapter 8 Simple Object Model
[INFO]    task-segment: [dependency:analyze]
[INFO] ------------------------------------------------------------------------
[INFO] Preparing dependency:analyze
[INFO] [resources:resources]
[INFO] Using default encoding to copy filtered resources.
[INFO] [compiler:compile]
[INFO] Nothing to compile - all classes are up to date
[INFO] [resources:testResources]
[INFO] Using default encoding to copy filtered resources.
[INFO] [compiler:testCompile]
[INFO] Nothing to compile - all classes are up to date
[INFO] [dependency:analyze]
[WARNING] Used undeclared dependencies found:
[WARNING]    javax.persistence:persistence-api:jar:1.0:compile
[WARNING] Unused declared dependencies found:
[WARNING]    org.hibernate:hibernate-annotations:jar:3.3.0.ga:compile
[WARNING]    org.hibernate:hibernate:jar:3.2.5.ga:compile
[WARNING]    junit:junit:jar:3.8.1:test

...

[INFO] ------------------------------------------------------------------------
[INFO] Building Chapter 8 Simple Web Application
[INFO]    task-segment: [dependency:analyze]
[INFO] ------------------------------------------------------------------------
[INFO] Preparing dependency:analyze
[INFO] [resources:resources]
[INFO] Using default encoding to copy filtered resources.
[INFO] [compiler:compile]
[INFO] Nothing to compile - all classes are up to date
[INFO] [resources:testResources]
[INFO] Using default encoding to copy filtered resources.
[INFO] [compiler:testCompile]
[INFO] No sources to compile
[INFO] [dependency:analyze]
[WARNING] Used undeclared dependencies found:
[WARNING]    org.sonatype.mavenbook.ch08:simple-model:jar:1.0:compile
[WARNING] Unused declared dependencies found:
[WARNING]    org.apache.velocity:velocity:jar:1.5:compile
[WARNING]    javax.servlet:jstl:jar:1.1.2:compile
[WARNING]    taglibs:standard:jar:1.1.2:compile
[WARNING]    junit:junit:jar:3.8.1:test</screen> <para>In the truncated output just shown, you can see the output of the<indexterm> <primary>Dependency plugin</primary> <secondary>analyze goal</secondary> </indexterm><indexterm> <primary>Maven Dependency plugin</primary> <secondary>analyze goal</secondary> </indexterm> <varname>dependency:</varname><varname>analyze</varname> goal. This goal analyzes the project to see whether there are any indirect dependencies, or dependencies that are being referenced but are not directly declared. In the <varname>simple-model</varname> project, the Dependency plugin indicates a “used undeclared dependency” on <varname>javax.persistence:</varname><varname>persistence-api</varname>. To investigate further, go to the <varname>simple-model</varname> directory and run the <varname>dependency:</varname><varname>tree</varname> goal, which will list all of the project’s direct and transitive dependencies: </para><screen>$ <command>mvn dependency:tree</command>
[INFO] Scanning for projects...
[INFO] Searching repository for plugin with prefix: 'dependency'.
[INFO] ------------------------------------------------------------------------
[INFO] Building Chapter 8 Simple Object Model
[INFO]    task-segment: [dependency:tree]
[INFO] ------------------------------------------------------------------------
[INFO] [dependency:tree]
[INFO] org.sonatype.mavenbook.ch08:simple-model:jar:1.0
[INFO] +- org.hibernate:hibernate-annotations:jar:3.3.0.ga:compile
[INFO] |  \- javax.persistence:persistence-api:jar:1.0:compile
[INFO] +- org.hibernate:hibernate:jar:3.2.5.ga:compile
[INFO] |  +- net.sf.ehcache:ehcache:jar:1.2.3:compile
[INFO] |  +- commons-logging:commons-logging:jar:1.0.4:compile
[INFO] |  +- asm:asm-attrs:jar:1.5.3:compile
[INFO] |  +- dom4j:dom4j:jar:1.6.1:compile
[INFO] |  +- antlr:antlr:jar:2.7.6:compile
[INFO] |  +- cglib:cglib:jar:2.1_3:compile
[INFO] |  +- asm:asm:jar:1.5.3:compile
[INFO] |  \- commons-collections:commons-collections:jar:2.1.1:compile
[INFO] \- junit:junit:jar:3.8.1:test
[INFO] ------------------------------------------------------------------------
[INFO] BUILD SUCCESSFUL
[INFO] ------------------------------------------------------------------------
</screen> <para>From this output, we can see that the <varname>persistence-api</varname> dependency is coming from <varname>hibernate</varname>. A cursory scan of the source in this module will reveal many <varname>javax.</varname><varname>persistence</varname> import statements confirming that we are, indeed, directly referencing this dependency. The simple fix is to add a direct reference to the dependency. In this example, we put the dependency version in <varname>simple-parent</varname>’s <sgmltag>dependencyManagement</sgmltag> section because the dependency is linked to Hibernate, and the Hibernate version is declared here. Eventually you are going to want to upgrade your project’s version of Hibernate. Listing the <varname>persistence-api</varname> dependency version near the Hibernate dependency version will make it more obvious later when your team modifies the parent <acronym>POM</acronym> to upgrade the Hibernate version.</para> <para>If you look at the <varname>dependency:</varname><varname>analyze</varname> output from the <varname>simple-web</varname> module, you will see that we also need to add a direct reference to the <varname>simple-model</varname> dependency. The code in <varname>simple-webapp</varname> directly references the model objects in <varname>simple-model</varname>, and the <varname>simple-model</varname> is exposed to <varname>simple-webapp</varname> as a transitive dependency via <varname>simple-persist</varname>. Since this is a sibling dependency that shares both the <varname>version</varname> and <varname>groupId</varname>, the dependency can be defined in <varname>simple-webapp</varname>’s <filename moreinfo="none">pom.xml</filename> using the <varname>\${project.groupId}</varname> and <varname
    role="keep-together">\${project.version}</varname>.</para> <para>How did the Maven Dependency plugin uncover these issues? How does <varname role="keep-together">dependency:</varname><varname role="keep-together">analyze</varname> know which classes and dependencies are directly referenced by your project’s bytecode? The Dependency plugin uses the ObjectWeb ASM (<ulink
    url="http://asm.objectweb.org/">http://asm.objectweb.org/</ulink>) <indexterm> <primary>ObjectWeb ASM toolkit</primary> </indexterm><indexterm> <primary>bytecode analysis (Dependency plugin)</primary> </indexterm>toolkit to analyze the raw bytecode. The Dependency plugin uses ASM to walk through all the classes in the current project, and it builds a list of every other class referenced. It then walks through all the dependencies, direct and transitive, and marks off the classes discovered in the direct dependencies. Any classes not located in the direct dependencies are discovered in the transitive dependencies, and the list<indexterm> <primary>used, undeclared dependencies (Dependency plugin)</primary> </indexterm> of “used, undeclared dependencies” is produced.</para> <para>In contrast, the list of unused, declared dependencies is a little<indexterm> <primary>unused, undeclared dependencies (Dependency plugin)</primary> </indexterm> trickier to validate, and less useful than the “used, undeclared dependencies.” For one, some dependencies are used only at runtime or for tests, and they won’t be found in the bytecode. These are pretty obvious when you see them in the output; for example, JUnit appears in this list, but this is expected because it is used only for unit tests. You’ll also notice that the Velocity and Servlet API dependencies are listed in this list for the <literal>simple-web</literal> module. This is also expected because, although the project doesn’t have any direct references to the classes of these artifacts, they are still essential during runtime.</para> <para>Be careful when removing any unused, declared dependencies unless you have very good test coverage, or you might introduce a runtime error. A more sinister issue pops up with bytecode optimization. For example, it is legal for a compiler to substitute the value of a constant and optimize away the reference. Removing this dependency will cause the compile to fail, yet the tool shows it as unused. Future versions of the Maven Dependency plugin will provide better techniques for detecting and/or ignoring these types of issues.</para> <para>You should use the <varname>dependency:</varname><varname>analyze</varname> tool periodically to detect these common errors in your projects. It can be configured to fail the build if certain conditions are found, and it is <indexterm class="endofrange" startref="optref4a"></indexterm><indexterm class="endofrange" startref="optref4b"></indexterm><indexterm class="endofrange" startref="optref4c"></indexterm><indexterm class="endofrange" startref="optref4d"></indexterm>also available as a report. </para> </section> <section id="optimizing-sect-final-poms"><title>Final POMs</title> <para>As an overview, the final <acronym>POM</acronym> files are<indexterm> <primary>simple-parent POM (for reference)</primary> </indexterm><indexterm> <primary>pom.xml file</primary> <secondary>final POMs (for reference)</secondary> <tertiary>simple-parent POM</tertiary> </indexterm><indexterm> <primary>simple parent project (example)</primary> <secondary>final POM for (for reference)</secondary> </indexterm> listed as a reference for this chapter. <xref linkend="ex-final-pom-for-simple-parent" /> shows the top-level <acronym>POM</acronym> for <varname>simple-parent</varname>. </para> <example id="ex-final-pom-for-simple-parent"><title>Final POM for simple-parent</title> <programlisting language="xml">&lt;project xmlns="http://maven.apache.org/POM/4.0.0" 
         xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
         xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 
                             http://maven.apache.org/maven-v4_0_0.xsd"&gt;
  &lt;modelVersion&gt;4.0.0&lt;/modelVersion&gt;

  &lt;groupId&gt;org.sonatype.mavenbook.ch08&lt;/groupId&gt;
  &lt;artifactId&gt;simple-parent&lt;/artifactId&gt;
  &lt;packaging&gt;pom&lt;/packaging&gt;
  &lt;version&gt;1.0&lt;/version&gt;
  &lt;name&gt;Chapter 8 Simple Parent Project&lt;/name&gt;
 
  &lt;modules&gt;
    &lt;module&gt;simple-command&lt;/module&gt;
    &lt;module&gt;simple-model&lt;/module&gt;
    &lt;module&gt;simple-weather&lt;/module&gt;
    &lt;module&gt;simple-persist&lt;/module&gt;
    &lt;module&gt;simple-webapp&lt;/module&gt;
  &lt;/modules&gt;

  &lt;build&gt;
    &lt;pluginManagement&gt;
      &lt;plugins&gt;
        &lt;plugin&gt;
          &lt;groupId&gt;org.apache.maven.plugins&lt;/groupId&gt;
          &lt;artifactId&gt;maven-compiler-plugin&lt;/artifactId&gt;
          &lt;configuration&gt;
            &lt;source&gt;1.5&lt;/source&gt;
            &lt;target&gt;1.5&lt;/target&gt;
          &lt;/configuration&gt;
        &lt;/plugin&gt;
        &lt;plugin&gt;
          &lt;groupId&gt;org.codehaus.mojo&lt;/groupId&gt;
          &lt;artifactId&gt;hibernate3-maven-plugin&lt;/artifactId&gt;
          &lt;version&gt;2.1&lt;/version&gt;
          &lt;configuration&gt;
            &lt;components&gt;
              &lt;component&gt;
                &lt;name&gt;hbm2ddl&lt;/name&gt;
                &lt;implementation&gt;annotationconfiguration&lt;/implementation&gt;
              &lt;/component&gt;
            &lt;/components&gt;
          &lt;/configuration&gt;
          &lt;dependencies&gt;
            &lt;dependency&gt;
              &lt;groupId&gt;hsqldb&lt;/groupId&gt;
              &lt;artifactId&gt;hsqldb&lt;/artifactId&gt;
              &lt;version&gt;\${hsqldb.version}&lt;/version&gt;
            &lt;/dependency&gt;
          &lt;/dependencies&gt;
        &lt;/plugin&gt;
      &lt;/plugins&gt;
   &lt;/pluginManagement&gt; 
  &lt;/build&gt;

  &lt;properties&gt;
    &lt;hibernate.annotations.version&gt;3.3.0.ga&lt;/hibernate.annotations.version&gt;
    &lt;hsqldb.version&gt;1.8.0.7&lt;/hsqldb.version&gt;
  &lt;/properties&gt;
  &lt;dependencyManagement&gt;
    &lt;dependencies&gt;
      &lt;dependency&gt;
        &lt;groupId&gt;org.springframework&lt;/groupId&gt;
        &lt;artifactId&gt;spring&lt;/artifactId&gt;
        &lt;version&gt;2.0.7&lt;/version&gt;
      &lt;/dependency&gt;
      &lt;dependency&gt;
        &lt;groupId&gt;org.apache.velocity&lt;/groupId&gt;
        &lt;artifactId&gt;velocity&lt;/artifactId&gt;
        &lt;version&gt;1.5&lt;/version&gt;
      &lt;/dependency&gt;  
      &lt;dependency&gt;
        &lt;groupId&gt;javax.persistence&lt;/groupId&gt;
        &lt;artifactId&gt;persistence-api&lt;/artifactId&gt;
        &lt;version&gt;1.0&lt;/version&gt;
      &lt;/dependency&gt;
      &lt;dependency&gt;
        &lt;groupId&gt;org.hibernate&lt;/groupId&gt;
        &lt;artifactId&gt;hibernate-annotations&lt;/artifactId&gt;
        &lt;version&gt;\${hibernate.annotations.version}&lt;/version&gt;
      &lt;/dependency&gt;
      &lt;dependency&gt;
        &lt;groupId&gt;org.hibernate&lt;/groupId&gt;
        &lt;artifactId&gt;hibernate-commons-annotations&lt;/artifactId&gt;
        &lt;version&gt;\${hibernate.annotations.version}&lt;/version&gt;
      &lt;/dependency&gt;
      &lt;dependency&gt;
        &lt;groupId&gt;org.hibernate&lt;/groupId&gt;
        &lt;artifactId&gt;hibernate&lt;/artifactId&gt;
        &lt;version&gt;3.2.5.ga&lt;/version&gt;
        &lt;exclusions&gt;
          &lt;exclusion&gt;
            &lt;groupId&gt;javax.transaction&lt;/groupId&gt;
            &lt;artifactId&gt;jta&lt;/artifactId&gt;
          &lt;/exclusion&gt;
        &lt;/exclusions&gt;
      &lt;/dependency&gt;
    &lt;/dependencies&gt;
  &lt;/dependencyManagement&gt;
  
  &lt;dependencies&gt;
    &lt;dependency&gt;
      &lt;groupId&gt;junit&lt;/groupId&gt;
      &lt;artifactId&gt;junit&lt;/artifactId&gt;
      &lt;version&gt;3.8.1&lt;/version&gt;
      &lt;scope&gt;test&lt;/scope&gt;
    &lt;/dependency&gt;
  &lt;/dependencies&gt;
&lt;/project&gt;      </programlisting> </example> <para>The <acronym>POM</acronym> shown in <xref linkend="ex-final-pom-for-simple-command" /> captures the<indexterm> <primary>simple-command POM (for reference)</primary> </indexterm><indexterm> <primary>pom.xml file</primary> <secondary>final POMs (for reference)</secondary> <tertiary>simple-command POM</tertiary> </indexterm> <acronym>POM</acronym> for <varname>simple-command</varname>, the command-line version of the tool. </para> <example id="ex-final-pom-for-simple-command"><title>Final POM for simple-command</title> <programlisting language="xml">&lt;project xmlns="http://maven.apache.org/POM/4.0.0" 
         xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
         xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 
                             http://maven.apache.org/maven-v4_0_0.xsd"&gt;
  &lt;modelVersion&gt;4.0.0&lt;/modelVersion&gt;
  &lt;parent&gt;
    &lt;groupId&gt;org.sonatype.mavenbook.ch08&lt;/groupId&gt;
    &lt;artifactId&gt;simple-parent&lt;/artifactId&gt;
    &lt;version&gt;1.0&lt;/version&gt;
  &lt;/parent&gt;

  &lt;artifactId&gt;simple-command&lt;/artifactId&gt;
  &lt;packaging&gt;jar&lt;/packaging&gt;
  &lt;name&gt;Chapter 8 Simple Command Line Tool&lt;/name&gt;

  &lt;build&gt;
    &lt;pluginManagement&gt;
      &lt;plugins&gt;
        &lt;plugin&gt;
          &lt;groupId&gt;org.apache.maven.plugins&lt;/groupId&gt;
          &lt;artifactId&gt;maven-jar-plugin&lt;/artifactId&gt;
          &lt;configuration&gt;
            &lt;archive&gt;
              &lt;manifest&gt;
                &lt;mainClass&gt;org.sonatype.mavenbook.weather.Main&lt;/mainClass&gt;
                &lt;addClasspath&gt;true&lt;/addClasspath&gt;
              &lt;/manifest&gt;
            &lt;/archive&gt;
          &lt;/configuration&gt;
        &lt;/plugin&gt;
        &lt;plugin&gt;
          &lt;groupId&gt;org.apache.maven.plugins&lt;/groupId&gt;
          &lt;artifactId&gt;maven-surefire-plugin&lt;/artifactId&gt;
          &lt;configuration&gt;
            &lt;testFailureIgnore&gt;true&lt;/testFailureIgnore&gt;
          &lt;/configuration&gt;
        &lt;/plugin&gt;
        &lt;plugin&gt;
         &lt;artifactId&gt;maven-assembly-plugin&lt;/artifactId&gt;
          &lt;configuration&gt;
            &lt;descriptorRefs&gt;
              &lt;descriptorRef&gt;jar-with-dependencies&lt;/descriptorRef&gt;
            &lt;/descriptorRefs&gt;
          &lt;/configuration&gt;
        &lt;/plugin&gt;
      &lt;/plugins&gt;
    &lt;/pluginManagement&gt;
  &lt;/build&gt;

  &lt;dependencies&gt;
    &lt;dependency&gt;
      &lt;groupId&gt;\${project.groupId}&lt;/groupId&gt;
      &lt;artifactId&gt;simple-weather&lt;/artifactId&gt;
      &lt;version&gt;\${project.version}&lt;/version&gt;
    &lt;/dependency&gt;
    &lt;dependency&gt;
      &lt;groupId&gt;\${project.groupId}&lt;/groupId&gt;
      &lt;artifactId&gt;simple-persist&lt;/artifactId&gt;
      &lt;version&gt;\${project.version}&lt;/version&gt;
    &lt;/dependency&gt;
    &lt;dependency&gt;
      &lt;groupId&gt;org.springframework&lt;/groupId&gt;
      &lt;artifactId&gt;spring&lt;/artifactId&gt;
    &lt;/dependency&gt;
    &lt;dependency&gt;
      &lt;groupId&gt;org.apache.velocity&lt;/groupId&gt;
      &lt;artifactId&gt;velocity&lt;/artifactId&gt;
    &lt;/dependency&gt;    
  &lt;/dependencies&gt;
&lt;/project&gt;
</programlisting> </example> <para>The <acronym>POM</acronym> shown in <xref linkend="ex-final-pom-for-simple-model" /> is the<indexterm> <primary>simple-model POM (for reference)</primary> </indexterm><indexterm> <primary>pom.xml file</primary> <secondary>final POMs (for reference)</secondary> <tertiary>simple-model POM</tertiary> </indexterm> <varname>simple-model</varname> project’s <acronym>POM</acronym>. The <varname>simple-model</varname> project contains all of the model objects used throughout the application. </para> <example id="ex-final-pom-for-simple-model"><title>Final POM for simple-model</title> <programlisting language="xml">&lt;project xmlns="http://maven.apache.org/POM/4.0.0" 
         xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
         xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 
                             http://maven.apache.org/maven-v4_0_0.xsd"&gt;
  &lt;modelVersion&gt;4.0.0&lt;/modelVersion&gt;
  &lt;parent&gt;
    &lt;groupId&gt;org.sonatype.mavenbook.ch08&lt;/groupId&gt;
    &lt;artifactId&gt;simple-parent&lt;/artifactId&gt;
    &lt;version&gt;1.0&lt;/version&gt;
  &lt;/parent&gt;
  &lt;artifactId&gt;simple-model&lt;/artifactId&gt;
  &lt;packaging&gt;jar&lt;/packaging&gt;

  &lt;name&gt;Chapter 8 Simple Object Model&lt;/name&gt;

  &lt;dependencies&gt;
    &lt;dependency&gt;
      &lt;groupId&gt;org.hibernate&lt;/groupId&gt;
      &lt;artifactId&gt;hibernate-annotations&lt;/artifactId&gt;
    &lt;/dependency&gt;
    &lt;dependency&gt;
      &lt;groupId&gt;org.hibernate&lt;/groupId&gt;
      &lt;artifactId&gt;hibernate&lt;/artifactId&gt;
    &lt;/dependency&gt;
    &lt;dependency&gt;
      &lt;groupId&gt;javax.persistence&lt;/groupId&gt;
      &lt;artifactId&gt;persistence-api&lt;/artifactId&gt;
    &lt;/dependency&gt;
  &lt;/dependencies&gt;
&lt;/project&gt;
</programlisting> </example> <para>The <acronym>POM</acronym> shown in <xref linkend="ex-final-pom-for-simple-persist" /> is the<indexterm> <primary>simple-persist POM (for reference)</primary> </indexterm><indexterm> <primary>pom.xml file</primary> <secondary>final POMs (for reference)</secondary> <tertiary>simple-persist POM</tertiary> </indexterm> <varname>simple-persist</varname> project’s <acronym>POM</acronym>. The <varname>simple-persist</varname> project contains all of the persistence logic that is implemented using <phrase role="keep-together">Hibernate</phrase>. </para> <example id="ex-final-pom-for-simple-persist"><title>Final POM for simple-persist</title> <programlisting language="xml">&lt;project xmlns="http://maven.apache.org/POM/4.0.0" 
         xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
         xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 
                             http://maven.apache.org/maven-v4_0_0.xsd"&gt;
  &lt;modelVersion&gt;4.0.0&lt;/modelVersion&gt;
  &lt;parent&gt;
    &lt;groupId&gt;org.sonatype.mavenbook.ch08&lt;/groupId&gt;
    &lt;artifactId&gt;simple-parent&lt;/artifactId&gt;
    &lt;version&gt;1.0&lt;/version&gt;
  &lt;/parent&gt;
  &lt;artifactId&gt;simple-persist&lt;/artifactId&gt;
  &lt;packaging&gt;jar&lt;/packaging&gt;

  &lt;name&gt;Chapter 8 Simple Persistence API&lt;/name&gt;

  &lt;dependencies&gt;
    &lt;dependency&gt;
      &lt;groupId&gt;\${project.groupId}&lt;/groupId&gt;
      &lt;artifactId&gt;simple-model&lt;/artifactId&gt;
      &lt;version&gt;\${project.version}&lt;/version&gt;
    &lt;/dependency&gt;
    &lt;dependency&gt;
      &lt;groupId&gt;org.hibernate&lt;/groupId&gt;
      &lt;artifactId&gt;hibernate&lt;/artifactId&gt;
    &lt;/dependency&gt;
    &lt;dependency&gt;
      &lt;groupId&gt;org.hibernate&lt;/groupId&gt;
      &lt;artifactId&gt;hibernate-annotations&lt;/artifactId&gt;
    &lt;/dependency&gt;
    &lt;dependency&gt;
      &lt;groupId&gt;org.hibernate&lt;/groupId&gt;
      &lt;artifactId&gt;hibernate-commons-annotations&lt;/artifactId&gt;
    &lt;/dependency&gt;
    &lt;dependency&gt;
      &lt;groupId&gt;javax.servlet&lt;/groupId&gt;
      &lt;artifactId&gt;servlet-api&lt;/artifactId&gt;
      &lt;version&gt;2.4&lt;/version&gt;
      &lt;scope&gt;provided&lt;/scope&gt;
    &lt;/dependency&gt;
    &lt;dependency&gt;
      &lt;groupId&gt;org.springframework&lt;/groupId&gt;
      &lt;artifactId&gt;spring&lt;/artifactId&gt;
    &lt;/dependency&gt;
  &lt;/dependencies&gt;
&lt;/project&gt;
</programlisting> </example> <para>The <acronym>POM</acronym> shown in <xref linkend="ex-final-pom-for-simple-weather" /> is the<indexterm> <primary>simple-weather POM (for reference)</primary> </indexterm><indexterm> <primary>pom.xml file</primary> <secondary>final POMs (for reference)</secondary> <tertiary>simple-weather POM</tertiary> </indexterm><indexterm> <primary>weather project (example)</primary> <secondary>final simple-weather POM</secondary> </indexterm> <varname>simple-weather</varname> project’s <acronym>POM</acronym>. The <varname>simple-weather</varname> project is the project that contains all of the logic to parse the Yahoo! Weather <acronym>RSS</acronym> feed. This project depends on the <varname>simple-model</varname> project. </para> <example id="ex-final-pom-for-simple-weather"><title>Final POM for simple-weather</title> <programlisting language="xml">&lt;project xmlns="http://maven.apache.org/POM/4.0.0" 
         xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
         xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 
                             http://maven.apache.org/maven-v4_0_0.xsd"&gt;
  &lt;modelVersion&gt;4.0.0&lt;/modelVersion&gt;
  &lt;parent&gt;
    &lt;groupId&gt;org.sonatype.mavenbook.ch08&lt;/groupId&gt;
    &lt;artifactId&gt;simple-parent&lt;/artifactId&gt;
    &lt;version&gt;1.0&lt;/version&gt;
  &lt;/parent&gt;
  &lt;artifactId&gt;simple-weather&lt;/artifactId&gt;
  &lt;packaging&gt;jar&lt;/packaging&gt;

  &lt;name&gt;Chapter 8 Simple Weather API&lt;/name&gt;

  &lt;dependencies&gt;
    &lt;dependency&gt;
      &lt;groupId&gt;\${project.groupId}&lt;/groupId&gt;
      &lt;artifactId&gt;simple-model&lt;/artifactId&gt;
      &lt;version&gt;\${project.version}&lt;/version&gt;
    &lt;/dependency&gt;
    &lt;dependency&gt;
      &lt;groupId&gt;log4j&lt;/groupId&gt;
      &lt;artifactId&gt;log4j&lt;/artifactId&gt;
      &lt;version&gt;1.2.14&lt;/version&gt;
    &lt;/dependency&gt;
    &lt;dependency&gt;
      &lt;groupId&gt;dom4j&lt;/groupId&gt;
      &lt;artifactId&gt;dom4j&lt;/artifactId&gt;
      &lt;version&gt;1.6.1&lt;/version&gt;
    &lt;/dependency&gt;
    &lt;dependency&gt;
      &lt;groupId&gt;jaxen&lt;/groupId&gt;
      &lt;artifactId&gt;jaxen&lt;/artifactId&gt;
      &lt;version&gt;1.1.1&lt;/version&gt;
    &lt;/dependency&gt;
    &lt;dependency&gt;
      &lt;groupId&gt;org.apache.commons&lt;/groupId&gt;
      &lt;artifactId&gt;commons-io&lt;/artifactId&gt;
      &lt;version&gt;1.3.2&lt;/version&gt;
      &lt;scope&gt;test&lt;/scope&gt;
    &lt;/dependency&gt;
  &lt;/dependencies&gt;
&lt;/project&gt;
</programlisting> </example> <para>Finally, the <acronym>POM</acronym> shown in <xref linkend="ex-final-pom-for-simple-webapp" /> is the<indexterm> <primary>simple-webapp POM (for reference)</primary> </indexterm><indexterm> <primary>pom.xml file</primary> <secondary>final POMs (for reference)</secondary> <tertiary>simple-webapp POM</tertiary> </indexterm><indexterm> <primary>Web applications</primary> <secondary>final simple-weather POM</secondary> </indexterm> <varname>simple-webapp</varname> project’s <acronym>POM</acronym>. The <varname>simple-webapp</varname> project contains a web application that stores retrieved weather forecasts in an <acronym>HSQLDB</acronym> database and that also interacts with the libraries generated by the <varname>simple-weather</varname> project. </para> <example id="ex-final-pom-for-simple-webapp"><title>Final POM for simple-webapp</title> <programlisting language="xml">&lt;project xmlns="http://maven.apache.org/POM/4.0.0" 
  xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
  xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 
                      http://maven.apache.org/maven-v4_0_0.xsd"&gt;
  &lt;modelVersion&gt;4.0.0&lt;/modelVersion&gt;
  &lt;parent&gt;
    &lt;groupId&gt;org.sonatype.mavenbook.ch08&lt;/groupId&gt;
    &lt;artifactId&gt;simple-parent&lt;/artifactId&gt;
    &lt;version&gt;1.0&lt;/version&gt;
  &lt;/parent&gt;

  &lt;artifactId&gt;simple-webapp&lt;/artifactId&gt;
  &lt;packaging&gt;war&lt;/packaging&gt;
  &lt;name&gt;Chapter 8 Simple Web Application&lt;/name&gt;
  &lt;dependencies&gt;
    &lt;dependency&gt;
      &lt;groupId&gt;javax.servlet&lt;/groupId&gt;
      &lt;artifactId&gt;servlet-api&lt;/artifactId&gt;
      &lt;version&gt;2.4&lt;/version&gt;
      &lt;scope&gt;provided&lt;/scope&gt;
    &lt;/dependency&gt;
    &lt;dependency&gt;
      &lt;groupId&gt;\${project.groupId}&lt;/groupId&gt;
      &lt;artifactId&gt;simple-model&lt;/artifactId&gt;
      &lt;version&gt;\${project.version}&lt;/version&gt;
    &lt;/dependency&gt;
    &lt;dependency&gt;
      &lt;groupId&gt;\${project.groupId}&lt;/groupId&gt;
      &lt;artifactId&gt;simple-weather&lt;/artifactId&gt;
      &lt;version&gt;\${project.version}&lt;/version&gt;
    &lt;/dependency&gt;
    &lt;dependency&gt;
      &lt;groupId&gt;\${project.groupId}&lt;/groupId&gt;
      &lt;artifactId&gt;simple-persist&lt;/artifactId&gt;
      &lt;version&gt;\${project.version}&lt;/version&gt;
    &lt;/dependency&gt;
    &lt;dependency&gt;
      &lt;groupId&gt;org.springframework&lt;/groupId&gt;
      &lt;artifactId&gt;spring&lt;/artifactId&gt;
    &lt;/dependency&gt;
    &lt;dependency&gt;
      &lt;groupId&gt;javax.servlet&lt;/groupId&gt;
      &lt;artifactId&gt;jstl&lt;/artifactId&gt;
      &lt;version&gt;1.1.2&lt;/version&gt;
    &lt;/dependency&gt;
    &lt;dependency&gt;
      &lt;groupId&gt;taglibs&lt;/groupId&gt;
      &lt;artifactId&gt;standard&lt;/artifactId&gt;
      &lt;version&gt;1.1.2&lt;/version&gt;
    &lt;/dependency&gt;
    &lt;dependency&gt;
      &lt;groupId&gt;org.apache.velocity&lt;/groupId&gt;
      &lt;artifactId&gt;velocity&lt;/artifactId&gt;
    &lt;/dependency&gt;
  &lt;/dependencies&gt;
  &lt;build&gt;
    &lt;finalName&gt;simple-webapp&lt;/finalName&gt;
    &lt;plugins&gt;
      &lt;plugin&gt;
        &lt;groupId&gt;org.mortbay.jetty&lt;/groupId&gt;
        &lt;artifactId&gt;maven-jetty-plugin&lt;/artifactId&gt;
        &lt;version&gt;6.1.9&lt;/version&gt;
        &lt;dependencies&gt;
          &lt;dependency&gt;
            &lt;groupId&gt;hsqldb&lt;/groupId&gt;
            &lt;artifactId&gt;hsqldb&lt;/artifactId&gt;
            &lt;version&gt;\${hsqldb.version}&lt;/version&gt;
          &lt;/dependency&gt;
        &lt;/dependencies&gt;
      &lt;/plugin&gt;
    &lt;/plugins&gt;
  &lt;/build&gt;
&lt;/project&gt;
</programlisting>  </example> </section> <section id="optimizing-sect-conclusion"><title>Conclusion</title> <para>This chapter has shown you several techniques for improving the control of your dependencies and plugins to ease future maintenance of your builds. We recommend periodically reviewing your builds in this way to ensure that duplication and thus <phrase role="keep-together">potential</phrase> trouble spots are minimized. As a project matures, new dependencies are inevitably introduced, and you may find that a dependency previously used in 1 place is now used in 10 and should be moved up. The used and unused dependencies list changes over <indexterm class="endofrange" startref="optref1a"></indexterm><indexterm class="endofrange" startref="optref1b"></indexterm>time and can easily be cleaned up with the Maven Dependency plugin.</para> </section>
</chapter>
