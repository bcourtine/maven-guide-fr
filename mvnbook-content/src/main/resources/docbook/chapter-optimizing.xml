<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE chapter PUBLIC "-//OASIS//DTD DocBook XML V4.5//EN"
"http://www.oasis-open.org/docbook/xml/4.5/docbookx.dtd">
<chapter id="optimizing" lang="fr">
  <title>Optimiser et remanier les POMs</title>

  <section id="optimizing-sect-intro">
    <title>Introduction</title>

    <para>Dans le <xref linkend="multimodule-web-spring" />, nous avons vu combien<indexterm class="startofrange"
        id="optref1a">
        <primary>POM (Project Object Model)</primary>

        <secondary>optimizing and refactoring</secondary>
      </indexterm><indexterm class="startofrange" id="optref1b">
        <primary>optimizing POMs</primary>
      </indexterm><indexterm>
        <primary>refactoring POMs</primary>

        <see>optimizing POMs</see>
      </indexterm><indexterm>
        <primary>object model</primary>

        <see>POM ; pom.xml file</see>
      </indexterm><indexterm>
        <primary>pom.xml file</primary>

        <secondary>optimizing</secondary>

        <see>optimizing POMs</see>
      </indexterm> d'éléments de Maven doivent intervenir de concert pour produire un build multimodule complètement
    fonctionnel. Bien que l'exemple du chapitre précédent représente une véritable application — une application qui
    interagit avec une base de données, un web service, et qui elle-même présente deux interfaces : une au travers d'une
    application web, et l'autre via la ligne de commande — cet exemple de projet reste convenu. Présenter la complexité
    d'un véritable projet demanderait un livre bien plus épais que celui que vous avez entre les mains. Dans la réalité
    les applications évoluent année après année et sont souvent maintenues par des équipes de développeurs
    nombreuses et variées, chacune se concentrant sur sa propre partie. Dans un véritable projet, vous devez souvent
    évaluer les décisions et la conception faites par d'autres. Dans ce chapitre, nous allons prendre du recul par
    rapport aux exemples que vous avez vus dans la <xref linkend="part-example" />, et nous allons nous demander
    quelles sont les optimisations à réaliser avec ce que nous avons appris sur Maven. Maven est un outil très adaptable
    qui peut devenir simple ou complexe selon votre besoin. C'est pour cette raison qu'il existe des centaines de
    manières différentes de configurer votre projet Maven pour réaliser une même tâche mais aucune qui ne saurait
    prétendre être la “bonne”.</para>

    <para>N'allez par voir dans cette dernière phrase une autorisation à détourner à Maven pour lui faire réaliser des
    choses pour lesquelles il n'a pas été conçu. Même si Maven permet des approches diverses et variées, il existe
    sûrement une approche "à la Maven" qui utilise Maven comme il a été conçu pour être utilisé et vous rend ainsi plus
    efficace. Dans ce chapitre, nous allons vous montrer certaines optimisations que vous pouvez appliquer à un projet
    Maven existant. Pourquoi n'avons nous pas commencé avec un <acronym>POM</acronym> optimisé en premier lieu ? Concevoir des
    <acronym>POM</acronym>s avec une valeur pédagogique est bien différent de la conception de <acronym>POM</acronym>s
    efficaces. S'il est sûrement plus facile de définir certaines valeurs dans votre
    <filename>~/.m2/settings.xml</filename> que de déclarer un profil dans un <filename>pom.xml</filename>, l'écriture
    d'un livre, comme sa lecture, dépend de la fréquence à laquelle on va introduire de nouveaux concepts ainsi que du
    moment où ils seront introduits, ni trop tôt ni trop tard. Dans la <xref linkend="part-example" />, nous avons fait
    attention à ne pas vous noyer sous trop d'informations. Et ce faisant, nous avons dû éviter certains concepts de
    base comme la balise <sgmltag>dependencyManagement</sgmltag> dont nous parlerons dans ce chapitre.</para>

    <para>À plusieurs moments dans la <xref linkend="part-example" /> les auteurs de ce livre ont choisi des raccourcis
    ou ont évité un point de détail important pour rester concentrés sur l'essentiel du chapitre. Vous avez appris à
    créer un projet Maven, vous l'avez compilé et installé sans avoir à parcourir des centaines de pages qui vous
    décrivaient toutes les options et possibilités. Nous avons procédé ainsi car nous pensons qu'il est important pour
    un nouvel utilisateur de Maven d'obtenir rapidement des résultats plutôt que de suivre une très longue, voire
    interminable histoire. Une fois que vous avez commencé à utiliser Maven, vous devriez savoir comment analyser vos
    propres projets et <acronym>POM</acronym>s. Dans ce chapitre, nous prenons du recul pour étudier ce qu'il nous reste
    après l'exemple du <xref linkend="multimodule-web-spring" />.</para>
  </section>

  <section id="optimizing-sect-pom-cleanup">
    <title>Nettoyer le POM</title>

    <para>L'optimisation du <acronym>POM</acronym> d'un projet multimodules est plus facile à faire <indexterm>
        <primary>multimodule projects, optimizing POMs for</primary>
      </indexterm><indexterm>
        <primary>POM (Project Object Model)</primary>

        <secondary>optimizing and refactoring</secondary>

        <tertiary>about cleaning up POMs</tertiary>
      </indexterm><indexterm>
        <primary>optimizing POMs</primary>

        <secondary>about cleaning up POMs</secondary>
      </indexterm><indexterm>
        <primary>cleaning up POMs</primary>

        <seealso>optimizing POMs</seealso>
      </indexterm>en plusieurs passes, car il y a plusieurs points à traiter. En général, nous recherchons des
    répétitions dans un <acronym>POM</acronym> et ses <acronym>POM</acronym>s frères. Quand vous commencez un projet ou
    que celui-ci évolue fréquemment, il est tout à fait acceptable de dupliquer des dépendances et des configurations de
    plugins. Mais au fur et à mesure que votre projet se stabilise et que le nombre de sous-modules augmente, vous
    devrez prendre le temps de remanier ces éléments communs de configuration et de dépendances. Rendre vos
    <acronym>POM</acronym>s plus efficaces vous aidera énormément à gérer la complexité de votre projet durant sa
    croissance. À chaque fois qu'il y a duplication d'information, il existe une meilleure manière de faire.</para>
  </section>

  <section id="optimizing-sect-dependencies">
    <title>Optimiser les dépendances</title>

    <para>Si vous jetez un oeil aux différents <acronym>POM</acronym>s<indexterm class="startofrange"
    id="optref2a">
        <primary>POM (Project Object Model)</primary>
        <secondary>optimizing and refactoring</secondary>
        <tertiary>dependency optimization</tertiary>
      </indexterm><indexterm class="startofrange" id="optref2b">
        <primary>optimizing POMs</primary>
        <secondary>dependency optimization</secondary>
      </indexterm><indexterm class="startofrange" id="optref2c">
        <primary>dependencies</primary>
        <secondary>optimizing</secondary>
      </indexterm> créés dans le <xref linkend="multimodule-web-spring" />, vous remarquerez plusieurs types de
    répétition. Le premier type que vous pouvez voir est la duplication de dépendances comme <varname>spring</varname>
    et <varname>hibernate-annotations</varname> dans plusieurs modules. La dépendance <varname>hibernate</varname> a en
    outre l'exclusion de <package>javax.transaction </package>à chacune de ses définitions. Le<indexterm>
        <primary>duplicated dependency declarations</primary>
      </indexterm><indexterm>
        <primary>replicated dependencies</primary>
      </indexterm> second type de répétition rencontré vient du fait que parfois plusieurs dépendances sont liées entre
    elles et partagent la même version. C'est souvent le cas lorsqu'un projet livre plusieurs composants couplés entre
    eux. Par exemple, regardez les dépendances <varname>hibernate-</varname><varname>annotations</varname> et
    <varname>hibernate-commons-annotations</varname>. Toutes les deux ont la même version <varname>3.3.0.ga</varname>,
    et nous pouvons nous attendre à ce que les versions de ces deux dépendances évoluent de concert. Les deux artefacts
    <varname>hibernate-annotations</varname> et <varname>hibernate-commons-annotations</varname> sont des composants du
    même projet mis à disposition par JBoss, et donc quand une nouvelle version de ce projet sort, ces deux dépendances
    changent. Le troisième et dernier type de répétition est la<indexterm>
        <primary>sibling module dependency duplication</primary>
      </indexterm> duplication de dépendances et de version de modules frères. Maven fournit un mécanisme simple pour
    vous permettre de factoriser ces<indexterm>
        <primary>POM (Project Object Model)</primary>
        <secondary>parent (top-level)</secondary>
        <tertiary>resolving dependency duplication</tertiary>
      </indexterm><indexterm>
        <primary>top-level POM</primary>
        <secondary>resolving dependency duplication</secondary>
      </indexterm><indexterm>
        <primary>parent POM</primary>
        <secondary>resolving dependency duplication</secondary>
      </indexterm><indexterm>
        <primary>pom.xml file</primary>
        <secondary>parent (top-level)</secondary>
        <tertiary>resolving dependency duplication</tertiary>
      </indexterm> duplications dans un <acronym>POM</acronym> parent.</para>

    <para>Comme pour le code source de votre projet, chaque duplication dans vos <acronym>POM</acronym>s, est une porte
    ouverte pour de futurs problèmes . La cohérence des versions sur un gros projet sera difficile à assurer si des
    déclarations de dépendance sont dupliquées. Tant que vous avez deux ou trois modules, cela reste gérable, mais lorsque 
    votre organisation utilise un énorme build multimodule pour gérer des centaines de composants produits par plusieurs
    services, une seule erreur de dépendance peut entraîner chaos et confusion. Une simple erreur de version sur une 
    dépendance permettant la manipulation <phrase role="keep-together">de bytecode</phrase> comme <acronym>ASM</acronym>
    dans les profondeurs des dépendances du projet peut devenir le grains de sable qui
    gripperait une application web, maintenue par une autre équipe de développeurs, et qui dépendrait de ce <indexterm>
        <primary>unit tests</primary>
        <secondary>dependency duplication and</secondary>
      </indexterm> module. Les tests unitaires pourraient passer car ils sont exécutés avec une certaine version de la
    dépendance, mais ils échoueraient lamentablement en production là où le package (un WAR, dans ce cas) serait
    réalisé avec une version différente. Si vous avez des dizaines de projets qui utilisent une même dépendance comme
    Hibernate Annotations, chaque recopie et duplication des dépendances et des exclusions vous rapproche du moment où
    un build échouera. Au fur et à mesure que la complexité de vos projets Maven augmente, la liste de vos dépendances
    s'allonge et vous allez donc devoir stabiliser les déclarations de dépendance et de version dans des
    <acronym>POM</acronym>s parent.</para>

    <para>La duplication des versions des modules frères peut produire un problème assez redoutable<indexterm>
        <primary>sibling module dependency duplication</primary>
      </indexterm> qui ne résulte pas directement de Maven, et dont on ne se souvient qu'après l'avoir rencontré
    plusieurs fois. Si vous utilisez le plugin Maven Release pour effectuer vos livraisons, toutes les versions de
    dépendance soeurs seront automatiquement mises à jour pour vous, aussi ce n'est pas là que réside le problème. Si
    <varname>simple-web</varname> version <varname>1.3-SNAPSHOT</varname> dépend de <varname>simple-persist</varname>
    version <varname>1.3-SNAPSHOT</varname>, et si vous produisez la version 1.3 de ces deux projets, le plugin Maven
    Release est suffisamment intelligent pour changer les versions dans les <acronym>POM</acronym>s de votre projet
    multimodule automatiquement. Produire la livraison avec le plugin Release va automatiquement incrémenter les
    versions de votre build à <varname>1.4-SNAPSHOT</varname>, et le plugin Release va commiter ces modifications sur le
    dépôt de source. Livrer un énorme projet multimodule ne pourrait être plus facile, à moins que...</para>

    <para>Les problèmes arrivent lorsque les développeurs fusionnent les modifications du<indexterm>
        <primary>merging POM changes</primary>
      </indexterm><indexterm>
        <primary>POM (Project Object Model)</primary>

        <secondary>merging POMs</secondary>
      </indexterm> <acronym>POM</acronym> et perturbent une livraison en cours. Un développeur fusionne souvent des
    modifications et parfois il se trompe lors de la gestion du conflit sur la dépendance sur un module frère, revenant
    par inadvertance à la version de la livraison précédente. Comme les versions consécutives d'une dépendance sont
    souvent compatibles, cela n'apparaît pas lorsque le développeur lance le build, ni avec un système d'intégration
    continue. Imaginez un build très complexe où le tronc est rempli de composants à la version
    <varname>1.4-SNAPSHOT</varname>, et maintenant imaginez que le Développeur A a mis à jour le Composant A tout au
    fond de la hiérarchie du projet pour qu'il dépende de la version <varname>1.3-SNAPSHOT</varname> du Composant B.
    Même si la plupart des développeurs utilisent la version <varname>1.4-SNAPSHOT</varname>, le build fonctionne
    correctement si les versions <varname>1.3-SNAPSHOT</varname> et <varname>1.4-SNAPSHOT</varname> du Composant B sont
    compatibles. Maven continuera à construire le projet en utilisant la version <varname>1.3-SNAPSHOT</varname> du
    Composant B depuis le dépôt local des développeurs. Tout semble bien se passer — le projet est construit,
    l'intégration continue est au vert, etc. Quelqu'un peut alors rencontrer un bug étrange en rapport avec le Composant
    B, mais il va se dire que c'est la faute à "pas de chance" et va poursuivre son développement. Pendant ce temps,
    dans la salle des machines la pression monte, jusqu'à ce qu'une des pièces explose ...</para>

    <para>Quelqu'un, appelons le Mr. Distrait, a rencontré un conflit lors de la fusion du Composant A, et a
    malencontreusement indiqué que le Composant A dépend de la version <varname>1.3-SNAPSHOT</varname> du Composant B
    alors que le projet continuait sa marche en avant. Une équipe de développeurs essaye de corriger un bug dans le
    Composant B depuis tout ce temps et ils ne comprennent pas pourquoi ils n'arrivent pas à le corriger en production.
    Finalement, quelqu'un regarde le Composant A et s'aperçoit de cette dépendance sur une mauvaise version.
    Heureusement, ce bug n'était pas suffisamment important pour coûter de l'argent ou des vies, mais Monsieur Distrait
    se sent un peu bête et les autres ont perdu un peu de leur confiance en lui pour ce problème de dépendances entre
    composants. (Heureusement, Monsieur Distrait se rend compte que ce problème est une erreur d'utilisateur et ne vient
    pas de Maven, mais il est plus que probable qu'il commence un vilain blog dans lequel il se plaint de Maven sans
    arrêt pour se sentir mieux.)</para>

    <para>Heureusement, la duplication de dépendance et les erreurs de dépendance entre projets frères peuvent être
    facilement évitées avec quelques modifications. La première chose à faire est de trouver toutes les dépendances
    utilisées sur plus d'un projet et de les déplacer dans la section <sgmltag>dependencyManagement</sgmltag> du
    <acronym>POM</acronym> parent. Nous allons laisser de côté les dépendances entre modules frères pour l'instant. Le
    pom <varname>simple-parent</varname> contient maintenant :</para>

    <programlisting language="xml">&lt;project&gt;
  ...
  &lt;dependencyManagement&gt;
    &lt;dependencies&gt;
      &lt;dependency&gt;
        &lt;groupId&gt;org.springframework&lt;/groupId&gt;
        &lt;artifactId&gt;spring&lt;/artifactId&gt;
        &lt;version&gt;2.0.7&lt;/version&gt;
      &lt;/dependency&gt;
      &lt;dependency&gt;
        &lt;groupId&gt;org.apache.velocity&lt;/groupId&gt;
        &lt;artifactId&gt;velocity&lt;/artifactId&gt;
        &lt;version&gt;1.5&lt;/version&gt;
      &lt;/dependency&gt;  
      &lt;dependency&gt;
        &lt;groupId&gt;org.hibernate&lt;/groupId&gt;
        &lt;artifactId&gt;hibernate-annotations&lt;/artifactId&gt;
        &lt;version&gt;3.3.0.ga&lt;/version&gt;
      &lt;/dependency&gt;
      &lt;dependency&gt;
        &lt;groupId&gt;org.hibernate&lt;/groupId&gt;
        &lt;artifactId&gt;hibernate-commons-annotations&lt;/artifactId&gt;
        &lt;version&gt;3.3.0.ga&lt;/version&gt;
      &lt;/dependency&gt;
      &lt;dependency&gt;
        &lt;groupId&gt;org.hibernate&lt;/groupId&gt;
        &lt;artifactId&gt;hibernate&lt;/artifactId&gt;
        &lt;version&gt;3.2.5.ga&lt;/version&gt;
        &lt;exclusions&gt;
          &lt;exclusion&gt;
            &lt;groupId&gt;javax.transaction&lt;/groupId&gt;
            &lt;artifactId&gt;jta&lt;/artifactId&gt;
          &lt;/exclusion&gt;
        &lt;/exclusions&gt;
      &lt;/dependency&gt;
    &lt;/dependencies&gt;
  &lt;/dependencyManagement&gt;
  ...
&lt;/project&gt;</programlisting>

    <para>Une fois ces dépendances remontées, nous allons devoir supprimer les versions de ces dépendances de tous les
    <acronym>POM</acronym>s ; sinon, elles vont surcharger ce qui est défini dans la balise
    <sgmltag>dependencyManagement</sgmltag> du projet parent. Regardons juste le <varname>simple-model</varname> pour
    plus de clarté :</para>

    <programlisting language="xml">&lt;project&gt;
  ...
  &lt;dependencies&gt;
    &lt;dependency&gt;
      &lt;groupId&gt;org.hibernate&lt;/groupId&gt;
      &lt;artifactId&gt;hibernate-annotations&lt;/artifactId&gt;
    &lt;/dependency&gt;
    &lt;dependency&gt;
      &lt;groupId&gt;org.hibernate&lt;/groupId&gt;
      &lt;artifactId&gt;hibernate&lt;/artifactId&gt;
    &lt;/dependency&gt;
  &lt;/dependencies&gt;
  ...
&lt;/project&gt;</programlisting>

    <para>La seconde chose à faire est de corriger la duplication des versions de
    <varname>hibernate-annotations</varname> et <varname>hibernate-commons-annotations</varname> puisqu'elles devraient
    rester identiques. Nous allons faire cela en créant une propriété appelée
    <varname>hibernate.annotations.version</varname>. La section <varname>simple-parent</varname> résultante ressemble à
    ceci :</para>

    <programlisting language="xml">&lt;project&gt;
  ...
  &lt;properties&gt;
    &lt;hibernate.annotations.version&gt;3.3.0.ga&lt;/hibernate.annotations.version&gt;
  &lt;/properties&gt;

  &lt;dependencyManagement&gt;
    ...
    &lt;dependency&gt;
      &lt;groupId&gt;org.hibernate&lt;/groupId&gt;
      &lt;artifactId&gt;hibernate-annotations&lt;/artifactId&gt;
      &lt;version&gt;\${hibernate.annotations.version}&lt;/version&gt;
    &lt;/dependency&gt;
    &lt;dependency&gt;
      &lt;groupId&gt;org.hibernate&lt;/groupId&gt;
      &lt;artifactId&gt;hibernate-commons-annotations&lt;/artifactId&gt;
      &lt;version&gt;\${hibernate.annotations.version}&lt;/version&gt;
    &lt;/dependency&gt;
    ...
  &lt;/dependencyManagement&gt;
  ...
&lt;/project</programlisting>

    <para>Notre dernier problème à corriger est celui des dépendances entre modules frères.<indexterm>
        <primary>sibling module dependency duplication</primary>
      </indexterm> Une technique que nous pourrions utiliser est de les déplacer dans la section
    <sgmltag>dependencyManagement</sgmltag>, comme toutes les autres,<indexterm>
        <primary>version attribute (pom.xml)</primary>
        <secondary>built-in, to avoid dependency duplication</secondary>
      </indexterm><indexterm>
        <primary>groupId attribute (pom.xml)</primary>
        <secondary>built-in, to avoid dependency duplication</secondary>
      </indexterm><indexterm>
        <primary>dependencies</primary>
        <secondary>plugin</secondary>

        <see>plugins</see>
      </indexterm> et de définir les versions des projets frères dans le projet parent qui les contient. Cette approche
    est certainement valide, mais nous pouvons aussi résoudre ce problème de version en utilisant deux propriétés
    prédéfinies — <varname>\${project.groupId}</varname> et <varname>\${project.version}</varname>. Puisqu'il s'agit de
    dépendances entre frères, il n'y a pas grand-chose à gagner à les lister dans le parent, aussi nous allons faire
    confiance à la propriété prédéfinie <varname>\${project.version}</varname>. Comme ces projets font tous partie du
    même groupe, nous pouvons sécuriser d'avantage ces déclarations en faisant référence au groupe du
    <acronym>POM</acronym> courant via la propriété prédéfinie <varname>\${project.groupId}</varname>. La section
    <phrase role="keep-together">dependency</phrase> de <varname>simple-command</varname> ressemble maintenant à cela
    :</para>

    <programlisting language="xml">&lt;project&gt;
  ...
  &lt;dependencies&gt;
    ...
    &lt;dependency&gt;
      &lt;groupId&gt;\${project.groupId}&lt;/groupId&gt;
      &lt;artifactId&gt;simple-weather&lt;/artifactId&gt;
      &lt;version&gt;\${project.version}&lt;/version&gt;
    &lt;/dependency&gt;
    &lt;dependency&gt;
      &lt;groupId&gt;\${project.groupId}&lt;/groupId&gt;
      &lt;artifactId&gt;simple-persist&lt;/artifactId&gt;
      &lt;version&gt;\${project.version}&lt;/version&gt;
    &lt;/dependency&gt;
    ...
  &lt;/dependencies&gt;
  ...
&lt;/project&gt;</programlisting>

    <para>Voici un résumé des deux optimisations que nous avons réalisées pour réduire ce problème de duplication des
    dépendances :</para>

    <variablelist>
      <varlistentry>
        <term role="plain">Remonter les dépendances communes dans <sgmltag>dependencyManagement</sgmltag></term>

        <listitem>
          <para>Si plus d'un projet dépend d'une dépendance particulière, vous pouvez ajouter celle-ci à
          <sgmltag>dependencyManagement</sgmltag>. Le <acronym>POM</acronym> parent peut contenir une version et un
          ensemble d'exclusions ; tout ce que les <acronym>POM</acronym>s fils ont besoin de faire pour référencer cette
          dépendance est d'utiliser le <varname>groupId</varname> et l'<varname>artifactId</varname>. Les projets fils
          peuvent ne pas déclarer la version et les exclusions si la dépendance fait partie des dépendances de la balise
          <sgmltag>dependencyManagement</sgmltag>.</para>
        </listitem>
      </varlistentry>

      <varlistentry>
        <term role="plain">Utiliser la <literal>version</literal> et le <literal>groupId</literal> pré-définis pour les
        projets frères</term>

        <listitem>
          <para>Utiliser <varname>\${project.version}</varname> et <varname>\${project.groupId}</varname> pour faire
          référence à un projet frère. Les projets frères ont la plupart du temps le même <literal>groupId</literal>, et
          presque toujours la même version. Utiliser <varname>\${project.version}</varname> vous aidera à éviter <indexterm class="endofrange" startref="optref2a"></indexterm><indexterm class="endofrange"
          startref="optref2b"></indexterm><indexterm class="endofrange" startref="optref2c"></indexterm>les incohérences
          de versions entre projets frères comme nous l'avons vu plus tôt.</para>
        </listitem>
      </varlistentry>
    </variablelist>
  </section>

  <section id="optimizing-sect-plugins">
    <title>Optimiser les plugins</title>

    <para>Si nous regardons les configurations des différents plugins, nous pouvons remarquer<indexterm
        class="startofrange" id="optref3a">
        <primary>POM (Project Object Model)</primary>

        <secondary>optimizing and refactoring</secondary>

        <tertiary>plugin optimization</tertiary>
      </indexterm><indexterm class="startofrange" id="optref3b">
        <primary>optimizing POMs</primary>

        <secondary>plugin optimization</secondary>
      </indexterm><indexterm class="startofrange" id="optref3c">
        <primary>plugins</primary>

        <secondary>optimizing</secondary>
      </indexterm> la réplication en plusieurs endroits des dépendances <acronym>HSQLDB</acronym>. Malheureusement,
    <sgmltag>dependencyManagement</sgmltag> ne s'applique pas aux dépendances des plugins, mais nous pouvons tout de
    même utiliser une propriété pour uniformiser les versions. Les projets Maven multimodule complexes ont tendance à
    définir toutes les versions dans le <acronym>POM</acronym> de plus haut niveau. Ce <acronym>POM</acronym> de plus
    haut niveau devient le point central pour les modifications qui impactent tout le projet. Voyez les numéros de
    versions comme des chaînes de caractères dans une classe Java. Si vous répétez constamment une phrase, vous allez
    probablement en faire une variable afin de n'avoir à la modifier qu'à un seul endroit lorsque vous devrez la
    changer. Remonter la version de <acronym>HSQLDB</acronym> dans une propriété du <acronym>POM</acronym> de plus haut
    niveau se fait au travers de la balise XML <literal>properties</literal> :</para>

    <programlisting language="xml">&lt;project&gt;
  ...
  &lt;properties&gt;
    &lt;hibernate.annotations.version&gt;3.3.0.ga&lt;/hibernate.annotations.version&gt;
    &lt;hsqldb.version&gt;1.8.0.7&lt;/hsqldb.version&gt;
  &lt;/properties&gt;
  ...
&lt;/project&gt;</programlisting>

    <para>Nous pouvons noter que la configuration de <varname>hibernate3-maven-plugin</varname> est dupliquée dans les
    modules <varname>simple-webapp</varname> et <varname>simple-command</varname>. Il est possible de gérer la
    configuration des plugins dans le <acronym>POM</acronym> de plus haut niveau de la même manière que pour la gestion
    des dépendances avec la section <sgmltag>dependencyManagement</sgmltag> de ce <acronym>POM</acronym>. Pour ce faire,
    nous allons utiliser<indexterm>
        <primary sortas="pluginManagement element (pom.xml)">&lt;pluginManagement&gt; element (pom.xml)</primary>
      </indexterm> la balise XML <sgmltag role="keep-together">pluginManagement</sgmltag> sous <indexterm
    class="endofrange" startref="optref3a"></indexterm><indexterm class="endofrange"
    startref="optref3b"></indexterm><indexterm class="endofrange" startref="optref3c"></indexterm> la balise XML build
    du <acronym>POM</acronym> de plus haut niveau :</para>

    <programlisting language="xml">&lt;project&gt;
  ...
  &lt;build&gt;
    &lt;pluginManagement&gt;
      &lt;plugins&gt;
        &lt;plugin&gt;
          &lt;groupId&gt;org.apache.maven.plugins&lt;/groupId&gt;
          &lt;artifactId&gt;maven-compiler-plugin&lt;/artifactId&gt;
          &lt;configuration&gt;
            &lt;source&gt;1.5&lt;/source&gt;
            &lt;target&gt;1.5&lt;/target&gt;
          &lt;/configuration&gt;
        &lt;/plugin&gt;
        &lt;plugin&gt;
          &lt;groupId&gt;org.codehaus.mojo&lt;/groupId&gt;
          &lt;artifactId&gt;hibernate3-maven-plugin&lt;/artifactId&gt;
          &lt;version&gt;2.1&lt;/version&gt;
          &lt;configuration&gt;
            &lt;components&gt;
              &lt;component&gt;
                &lt;name&gt;hbm2ddl&lt;/name&gt;
                &lt;implementation&gt;annotationconfiguration&lt;/implementation&gt;
              &lt;/component&gt;
            &lt;/components&gt;
          &lt;/configuration&gt;
          &lt;dependencies&gt;
            &lt;dependency&gt;
              &lt;groupId&gt;hsqldb&lt;/groupId&gt;
              &lt;artifactId&gt;hsqldb&lt;/artifactId&gt;
              &lt;version&gt;\${hsqldb.version}&lt;/version&gt;
            &lt;/dependency&gt;
          &lt;/dependencies&gt;
        &lt;/plugin&gt;
      &lt;/plugins&gt;
    &lt;/pluginManagement&gt;
  &lt;/build&gt;
  ...
&lt;/project&gt;
</programlisting>
  </section>

  <section id="optimizing-sect-dependency-plugin">
    <title>Optimisation avec le plugin Maven Dependency</title>

    <para>Sur des projets plus importants, des dépendances ont souvent tendance à se glisser dans<indexterm
        class="startofrange" id="optref4a">
        <primary>POM (Project Object Model)</primary>

        <secondary>optimizing and refactoring</secondary>

        <tertiary sortas=" Maven Dependency plugin">with Maven Dependency plugin</tertiary>
      </indexterm><indexterm class="startofrange" id="optref4b">
        <primary>optimizing POMs</primary>

        <secondary sortas="Maven Dependency plugin">Maven Dependency plugin</secondary>
      </indexterm><indexterm class="startofrange" id="optref4c">
        <primary>Maven Dependency plugin</primary>

        <secondary>optimizing POMs with</secondary>
      </indexterm><indexterm class="startofrange" id="optref4d">
        <primary>dependencies</primary>

        <secondary>optimizing</secondary>

        <tertiary>Maven Dependency plugin for</tertiary>
      </indexterm> un POM au fur et à mesure que leur nombre augmente. Lorsque les dépendances changent, vous vous
    retrouvez avec des dépendances inutilisées ou avec certaines des bibliothèques nécessaires qui n'ont pas été
    déclarées explicitement. Comme Maven 2.x inclut les dépendances transivites du scope compile, votre projet peut
    compiler correctement mais ne pas fonctionner en production. Prenons par exemple le cas d'un projet qui utilise les
    classes d'une librairie très utilisée comme Jakarta Commons BeanUtils. Au lieu de déclarer une dépendance explicite
    sur <phrase role="keep-together">BeanUtils</phrase>, votre projet dépend d'un projet comme Hibernate qui référence
    BeanUtils comme dépendance transitive. Votre projet peut donc compiler et s'exécuter correctement. Mais si vous
    mettez à jour votre version d'Hibernate et que cette nouvelle version ne dépend plus de BeanUtils, vous allez
    commencer à rencontrer des erreurs de compilation et d'exécution, et il ne sera pas évident de trouver pourquoi
    votre projet a soudainement arrêté de compiler. De plus, comme vous n'avez pas explicitement défini de version pour
    cette dépendance, Maven ne peut résoudre correctement un éventuel conflit de version.</para>

    <para>Une bonne pratique avec Maven est de toujours déclarer explicitement les dépendances pour les classes
    auxquelles vous faites référence dans votre code. Si vous importez des classes de Commons BeanUtils, vous devriez
    aussitôt déclarer une dépendance directe sur Commons BeanUtils. Heureusement, grâce à l'analyse du bytecode, le
    plugin Maven Dependency peut vous aider à découvrir les références directes à des dépendances. Prenons les POMs que
    nous venons d'optimiser et regardons si on peut y trouver des erreurs :</para>

    <screen>$ <command>mvn dependency:analyze</command>
[INFO] Scanning for projects...
[INFO] Reactor build order:
[INFO]   Chapter 8 Simple Parent Project
[INFO]   Chapter 8 Simple Object Model
[INFO]   Chapter 8 Simple Weather API
[INFO]   Chapter 8 Simple Persistence API
[INFO]   Chapter 8 Simple Command Line Tool
[INFO]   Chapter 8 Simple Web Application
[INFO]   Chapter 8 Parent Project
[INFO] Searching repository for plugin with prefix: 'dependency'.

...

[INFO] ------------------------------------------------------------------------
[INFO] Building Chapter 8 Simple Object Model
[INFO]    task-segment: [dependency:analyze]
[INFO] ------------------------------------------------------------------------
[INFO] Preparing dependency:analyze
[INFO] [resources:resources]
[INFO] Using default encoding to copy filtered resources.
[INFO] [compiler:compile]
[INFO] Nothing to compile - all classes are up to date
[INFO] [resources:testResources]
[INFO] Using default encoding to copy filtered resources.
[INFO] [compiler:testCompile]
[INFO] Nothing to compile - all classes are up to date
[INFO] [dependency:analyze]
[WARNING] Used undeclared dependencies found:
[WARNING]    javax.persistence:persistence-api:jar:1.0:compile
[WARNING] Unused declared dependencies found:
[WARNING]    org.hibernate:hibernate-annotations:jar:3.3.0.ga:compile
[WARNING]    org.hibernate:hibernate:jar:3.2.5.ga:compile
[WARNING]    junit:junit:jar:3.8.1:test

...

[INFO] ------------------------------------------------------------------------
[INFO] Building Chapter 8 Simple Web Application
[INFO]    task-segment: [dependency:analyze]
[INFO] ------------------------------------------------------------------------
[INFO] Preparing dependency:analyze
[INFO] [resources:resources]
[INFO] Using default encoding to copy filtered resources.
[INFO] [compiler:compile]
[INFO] Nothing to compile - all classes are up to date
[INFO] [resources:testResources]
[INFO] Using default encoding to copy filtered resources.
[INFO] [compiler:testCompile]
[INFO] No sources to compile
[INFO] [dependency:analyze]
[WARNING] Used undeclared dependencies found:
[WARNING]    org.sonatype.mavenbook.optimize:simple-model:jar:1.0:compile
[WARNING] Unused declared dependencies found:
[WARNING]    org.apache.velocity:velocity:jar:1.5:compile
[WARNING]    javax.servlet:jstl:jar:1.1.2:compile
[WARNING]    taglibs:standard:jar:1.1.2:compile
[WARNING]    junit:junit:jar:3.8.1:test</screen>

    <para>Dans ces traces tronquées vous pouvez voir le résultat du <indexterm>
        <primary>Dependency plugin</primary>

        <secondary>analyze goal</secondary>
      </indexterm><indexterm>
        <primary>Maven Dependency plugin</primary>

        <secondary>analyze goal</secondary>
      </indexterm> goal <varname>dependency:</varname><varname>analyze</varname>. Ce goal analyse le projet pour voir
    s'il existe des dépendances indirectes, ou si on fait référence à des dépendances qui ne sont pas déclarées
    directement. Dans le projet <varname>simple-model</varname>, le plugin Dependency indique une “dépendance utilisée
    mais pas déclarée” sur <varname>javax.persistence:</varname><varname>persistence-api</varname>. Pour obtenir plus
    d'informations, allez dans le répertoire <varname>simple-model</varname> et exécutez le goal
    <varname>dependency:</varname><varname>tree</varname> qui va lister toutes les dépendances du projet, directes et
    transitives.</para>

    <screen>$ <command>mvn dependency:tree</command>
[INFO] Scanning for projects...
[INFO] Searching repository for plugin with prefix: 'dependency'.
[INFO] ------------------------------------------------------------------------
[INFO] Building Chapter 8 Simple Object Model
[INFO]    task-segment: [dependency:tree]
[INFO] ------------------------------------------------------------------------
[INFO] [dependency:tree]
[INFO] org.sonatype.mavenbook.optimize:simple-model:jar:1.0
[INFO] +- org.hibernate:hibernate-annotations:jar:3.3.0.ga:compile
[INFO] |  \- javax.persistence:persistence-api:jar:1.0:compile
[INFO] +- org.hibernate:hibernate:jar:3.2.5.ga:compile
[INFO] |  +- net.sf.ehcache:ehcache:jar:1.2.3:compile
[INFO] |  +- commons-logging:commons-logging:jar:1.0.4:compile
[INFO] |  +- asm:asm-attrs:jar:1.5.3:compile
[INFO] |  +- dom4j:dom4j:jar:1.6.1:compile
[INFO] |  +- antlr:antlr:jar:2.7.6:compile
[INFO] |  +- cglib:cglib:jar:2.1_3:compile
[INFO] |  +- asm:asm:jar:1.5.3:compile
[INFO] |  \- commons-collections:commons-collections:jar:2.1.1:compile
[INFO] \- junit:junit:jar:3.8.1:test
[INFO] ------------------------------------------------------------------------
[INFO] BUILD SUCCESSFUL
[INFO] ------------------------------------------------------------------------
</screen>

    <para>Dans cette trace, nous pouvons voir que la dépendance <varname>persistence-api</varname> est apportée par
    <varname>hibernate</varname>. Une analyse rapide du code source de ce module va trouver de nombreux imports de
    <varname>javax.</varname><varname>persistence</varname> ce qui confirme que nous faisons directement référence à
    cette dépendance. La correction la plus simple est d'ajouter une référence directe à cette dépendance. Dans cet
    exemple, nous indiquons la version de la dépendance dans la section <sgmltag>dependencyManagement</sgmltag> de
    <varname>simple-parent</varname> car cette dépendance est liée à Hibernate et c'est là qu'on déclare la version
    d'Hibernate. Un jour va arriver où vous allez vouloir changer la version d'Hibernate pour votre projet. Mettre la
    version de <varname>persistence-api</varname> à côté de la version d'Hibernate permettra d'éviter d'oublier de la
    mettre à jour lorsque vous éditerez le <acronym>POM</acronym> parent pour modifier la version d'Hibernate.</para>

    <para>Si vous regardez le résultat du <varname>dependency:</varname><varname>analyze</varname> pour le module
    <varname>simple-web</varname>, vous verrez qu'il faut aussi ajouter une référence directe à
    <varname>simple-model</varname>. Le code de <varname>simple-webapp</varname> fait directement référence aux objets
    métier de <varname>simple-model</varname>, et <varname>simple-model</varname> est visible dans
    <varname>simple-webapp</varname> en tant que dépendance transitive via <varname>simple-persist</varname>. Puisqu'il
    s'agit d'une dépendance vers un module frère qui partage la même <varname>version</varname> et le même
    <varname>groupId</varname>, la dépendance peut être déclarée dans le <filename moreinfo="none">pom.xml</filename> de
    <varname>simple-webapp</varname> avec <varname>\${project.groupId}</varname> et <varname
    role="keep-together">\${project.version}</varname>.</para>

    <para>Comment fait le plugin Maven Dependency pour trouver ces problèmes ? Comment <varname
    role="keep-together">dependency:</varname><varname role="keep-together">analyze</varname> sait-il à quelles classes
    et à quelles dépendances le bytecode de votre projet fait référence ? Le plugin Dependency utilise l'outil ASM
    d'ObjectWeb (<ulink url="http://asm.objectweb.org/">http://asm.objectweb.org/</ulink>) <indexterm>
        <primary>ObjectWeb ASM toolkit</primary>
      </indexterm><indexterm>
        <primary>bytecode analysis (Dependency plugin)</primary>
      </indexterm> pour analyser le bytecode brut. Le plugin Dependency utilise ASM pour parcourir toutes les classes du
    projet, et lister toutes les classes référencées qui n'en font pas partie. Ensuite, il parcourt toutes les
    dépendances directes et transitives, et marque les classes trouvées dans les dépendances directes. Toute classe qui
    n'a pas été trouvée dans les dépendances directes, est recherchée dans les dépendances transitives et ainsi il
    génère la liste des<indexterm>
        <primary>used, undeclared dependencies (Dependency plugin)</primary>
      </indexterm> “dépendances utilisées, mais non déclarées”.</para>

    <para>Par contre, la liste des dépendances déclarées mais non utilisées est un peu plus<indexterm>
        <primary>unused, undeclared dependencies (Dependency plugin)</primary>
      </indexterm> délicate à valider et bien moins utile que les “dépendances utilisées mais non déclarées”.
    Premièrement, car certaines dépendances ne sont utilisées qu'à l'exécution ou que pour les tests, et donc ne seront
    pas référencées dans le bytecode. Celles-ci sont assez faciles à voir dans les traces ; par exemple, JUnit apparaît
    dans cette liste comme on pouvait s'y attendre car elle n'est utilisée que pour les tests unitaires. Vous
    remarquerez aussi les dépendances vers Velocity et l'API Servlet pour le module <literal>simple-web</literal>. Là
    encore, on pouvait s'y attendre, car le projet n'a aucune référence directe aux classes de ces artefacts, même s'ils
    restent essentiels durant l'exécution.</para>

    <para>Soyez prudents lorsque vous supprimez une dépendance déclarée mais inutilisée, à moins que vous n'ayez une
    très bonne couverture de tests, vous risquez d'avoir des surprises pendant l'exécution. Un problème beaucoup plus
    dangereux peut apparaître avec l'optimisation du bytecode. Par exemple, le compilateur a le droit de substituer la
    valeur d'une constante et d'optimiser en supprimant la référence. Supprimer cette dépendance va empêcher la
    compilation, alors que l'outil indique qu'elle n'est pas utilisée. Les versions futures du plugin Maven Dependency
    fourniront de meilleures techniques pour détecter ou ignorer ces problèmes.</para>

    <para>Vous devriez utiliser <varname>dependency:</varname><varname>analyze</varname> régulièrement pour détecter ces
    erreurs classiques dans vos projets. On peut configurer le build pour qu'il échoue si ce plugin rencontre certaines
    conditions, et il peut aussi<indexterm class="endofrange" startref="optref4a"></indexterm><indexterm
    class="endofrange" startref="optref4b"></indexterm><indexterm class="endofrange"
    startref="optref4c"></indexterm><indexterm class="endofrange" startref="optref4d"></indexterm> produire un
    rapport.</para>
  </section>

  <section id="optimizing-sect-final-poms">
    <title>Les POMs finaux</title>

    <para>En résumé, tous les fichiers des <acronym>POM</acronym>s finaux <indexterm>
        <primary>simple-parent POM (for reference)</primary>
      </indexterm><indexterm>
        <primary>pom.xml file</primary>

        <secondary>final POMs (for reference)</secondary>

        <tertiary>simple-parent POM</tertiary>
      </indexterm><indexterm>
        <primary>simple parent project (example)</primary>

        <secondary>final POM for (for reference)</secondary>
      </indexterm>sont présentés en tant que référence pour ce chapitre. L'<xref
    linkend="ex-final-pom-for-simple-parent" /> montre le <acronym>POM</acronym> de plus haut niveau, celui de
    <varname>simple-parent</varname>.</para>

    <example id="ex-final-pom-for-simple-parent">
      <title>POM final de simple-parent</title>

      <programlisting language="xml">&lt;project xmlns="http://maven.apache.org/POM/4.0.0" 
         xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
         xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 
                             http://maven.apache.org/maven-v4_0_0.xsd"&gt;
  &lt;modelVersion&gt;4.0.0&lt;/modelVersion&gt;

  &lt;groupId&gt;org.sonatype.mavenbook.optimize&lt;/groupId&gt;
  &lt;artifactId&gt;simple-parent&lt;/artifactId&gt;
  &lt;packaging&gt;pom&lt;/packaging&gt;
  &lt;version&gt;1.0&lt;/version&gt;
  &lt;name&gt;Chapter 8 Simple Parent Project&lt;/name&gt;
 
  &lt;modules&gt;
    &lt;module&gt;simple-command&lt;/module&gt;
    &lt;module&gt;simple-model&lt;/module&gt;
    &lt;module&gt;simple-weather&lt;/module&gt;
    &lt;module&gt;simple-persist&lt;/module&gt;
    &lt;module&gt;simple-webapp&lt;/module&gt;
  &lt;/modules&gt;

  &lt;build&gt;
    &lt;pluginManagement&gt;
      &lt;plugins&gt;
        &lt;plugin&gt;
          &lt;groupId&gt;org.apache.maven.plugins&lt;/groupId&gt;
          &lt;artifactId&gt;maven-compiler-plugin&lt;/artifactId&gt;
          &lt;configuration&gt;
            &lt;source&gt;1.5&lt;/source&gt;
            &lt;target&gt;1.5&lt;/target&gt;
          &lt;/configuration&gt;
        &lt;/plugin&gt;
        &lt;plugin&gt;
          &lt;groupId&gt;org.codehaus.mojo&lt;/groupId&gt;
          &lt;artifactId&gt;hibernate3-maven-plugin&lt;/artifactId&gt;
          &lt;version&gt;2.1&lt;/version&gt;
          &lt;configuration&gt;
            &lt;components&gt;
              &lt;component&gt;
                &lt;name&gt;hbm2ddl&lt;/name&gt;
                &lt;implementation&gt;annotationconfiguration&lt;/implementation&gt;
              &lt;/component&gt;
            &lt;/components&gt;
          &lt;/configuration&gt;
          &lt;dependencies&gt;
            &lt;dependency&gt;
              &lt;groupId&gt;hsqldb&lt;/groupId&gt;
              &lt;artifactId&gt;hsqldb&lt;/artifactId&gt;
              &lt;version&gt;\${hsqldb.version}&lt;/version&gt;
            &lt;/dependency&gt;
          &lt;/dependencies&gt;
        &lt;/plugin&gt;
      &lt;/plugins&gt;
   &lt;/pluginManagement&gt; 
  &lt;/build&gt;

  &lt;properties&gt;
    &lt;hibernate.annotations.version&gt;3.3.0.ga&lt;/hibernate.annotations.version&gt;
    &lt;hsqldb.version&gt;1.8.0.7&lt;/hsqldb.version&gt;
  &lt;/properties&gt;
  &lt;dependencyManagement&gt;
    &lt;dependencies&gt;
      &lt;dependency&gt;
        &lt;groupId&gt;org.springframework&lt;/groupId&gt;
        &lt;artifactId&gt;spring&lt;/artifactId&gt;
        &lt;version&gt;2.0.7&lt;/version&gt;
      &lt;/dependency&gt;
      &lt;dependency&gt;
        &lt;groupId&gt;org.apache.velocity&lt;/groupId&gt;
        &lt;artifactId&gt;velocity&lt;/artifactId&gt;
        &lt;version&gt;1.5&lt;/version&gt;
      &lt;/dependency&gt;  
      &lt;dependency&gt;
        &lt;groupId&gt;javax.persistence&lt;/groupId&gt;
        &lt;artifactId&gt;persistence-api&lt;/artifactId&gt;
        &lt;version&gt;1.0&lt;/version&gt;
      &lt;/dependency&gt;
      &lt;dependency&gt;
        &lt;groupId&gt;org.hibernate&lt;/groupId&gt;
        &lt;artifactId&gt;hibernate-annotations&lt;/artifactId&gt;
        &lt;version&gt;\${hibernate.annotations.version}&lt;/version&gt;
      &lt;/dependency&gt;
      &lt;dependency&gt;
        &lt;groupId&gt;org.hibernate&lt;/groupId&gt;
        &lt;artifactId&gt;hibernate-commons-annotations&lt;/artifactId&gt;
        &lt;version&gt;\${hibernate.annotations.version}&lt;/version&gt;
      &lt;/dependency&gt;
      &lt;dependency&gt;
        &lt;groupId&gt;org.hibernate&lt;/groupId&gt;
        &lt;artifactId&gt;hibernate&lt;/artifactId&gt;
        &lt;version&gt;3.2.5.ga&lt;/version&gt;
        &lt;exclusions&gt;
          &lt;exclusion&gt;
            &lt;groupId&gt;javax.transaction&lt;/groupId&gt;
            &lt;artifactId&gt;jta&lt;/artifactId&gt;
          &lt;/exclusion&gt;
        &lt;/exclusions&gt;
      &lt;/dependency&gt;
    &lt;/dependencies&gt;
  &lt;/dependencyManagement&gt;
  
  &lt;dependencies&gt;
    &lt;dependency&gt;
      &lt;groupId&gt;junit&lt;/groupId&gt;
      &lt;artifactId&gt;junit&lt;/artifactId&gt;
      &lt;version&gt;3.8.1&lt;/version&gt;
      &lt;scope&gt;test&lt;/scope&gt;
    &lt;/dependency&gt;
  &lt;/dependencies&gt;
&lt;/project&gt;      </programlisting>
    </example>

    <para>Le <acronym>POM</acronym> présenté dans l'<xref linkend="ex-final-pom-for-simple-command" /> correspond
    au<indexterm>
        <primary>simple-command POM (for reference)</primary>
      </indexterm><indexterm>
        <primary>pom.xml file</primary>

        <secondary>final POMs (for reference)</secondary>

        <tertiary>simple-command POM</tertiary>
      </indexterm> <acronym>POM</acronym> pour <varname>simple-command</varname>, la version utilisable en ligne de
    commande de l'outil.</para>

    <example id="ex-final-pom-for-simple-command">
      <title>POM final de simple-command</title>

      <programlisting language="xml">&lt;project xmlns="http://maven.apache.org/POM/4.0.0" 
         xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
         xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 
                             http://maven.apache.org/maven-v4_0_0.xsd"&gt;
  &lt;modelVersion&gt;4.0.0&lt;/modelVersion&gt;
  &lt;parent&gt;
    &lt;groupId&gt;org.sonatype.mavenbook.optimize&lt;/groupId&gt;
    &lt;artifactId&gt;simple-parent&lt;/artifactId&gt;
    &lt;version&gt;1.0&lt;/version&gt;
  &lt;/parent&gt;

  &lt;artifactId&gt;simple-command&lt;/artifactId&gt;
  &lt;packaging&gt;jar&lt;/packaging&gt;
  &lt;name&gt;Chapter 8 Simple Command Line Tool&lt;/name&gt;

  &lt;build&gt;
    &lt;pluginManagement&gt;
      &lt;plugins&gt;
        &lt;plugin&gt;
          &lt;groupId&gt;org.apache.maven.plugins&lt;/groupId&gt;
          &lt;artifactId&gt;maven-jar-plugin&lt;/artifactId&gt;
          &lt;configuration&gt;
            &lt;archive&gt;
              &lt;manifest&gt;
                &lt;mainClass&gt;org.sonatype.mavenbook.weather.Main&lt;/mainClass&gt;
                &lt;addClasspath&gt;true&lt;/addClasspath&gt;
              &lt;/manifest&gt;
            &lt;/archive&gt;
          &lt;/configuration&gt;
        &lt;/plugin&gt;
        &lt;plugin&gt;
          &lt;groupId&gt;org.apache.maven.plugins&lt;/groupId&gt;
          &lt;artifactId&gt;maven-surefire-plugin&lt;/artifactId&gt;
          &lt;configuration&gt;
            &lt;testFailureIgnore&gt;true&lt;/testFailureIgnore&gt;
          &lt;/configuration&gt;
        &lt;/plugin&gt;
        &lt;plugin&gt;
         &lt;artifactId&gt;maven-assembly-plugin&lt;/artifactId&gt;
          &lt;configuration&gt;
            &lt;descriptorRefs&gt;
              &lt;descriptorRef&gt;jar-with-dependencies&lt;/descriptorRef&gt;
            &lt;/descriptorRefs&gt;
          &lt;/configuration&gt;
        &lt;/plugin&gt;
      &lt;/plugins&gt;
    &lt;/pluginManagement&gt;
  &lt;/build&gt;

  &lt;dependencies&gt;
    &lt;dependency&gt;
      &lt;groupId&gt;\${project.groupId}&lt;/groupId&gt;
      &lt;artifactId&gt;simple-weather&lt;/artifactId&gt;
      &lt;version&gt;\${project.version}&lt;/version&gt;
    &lt;/dependency&gt;
    &lt;dependency&gt;
      &lt;groupId&gt;\${project.groupId}&lt;/groupId&gt;
      &lt;artifactId&gt;simple-persist&lt;/artifactId&gt;
      &lt;version&gt;\${project.version}&lt;/version&gt;
    &lt;/dependency&gt;
    &lt;dependency&gt;
      &lt;groupId&gt;org.springframework&lt;/groupId&gt;
      &lt;artifactId&gt;spring&lt;/artifactId&gt;
    &lt;/dependency&gt;
    &lt;dependency&gt;
      &lt;groupId&gt;org.apache.velocity&lt;/groupId&gt;
      &lt;artifactId&gt;velocity&lt;/artifactId&gt;
    &lt;/dependency&gt;    
  &lt;/dependencies&gt;
&lt;/project&gt;
</programlisting>
    </example>

    <para>Le <acronym>POM</acronym> présenté dans l'<xref linkend="ex-final-pom-for-simple-model" /> correspond
    au<indexterm>
        <primary>simple-model POM (for reference)</primary>
      </indexterm><indexterm>
        <primary>pom.xml file</primary>

        <secondary>final POMs (for reference)</secondary>

        <tertiary>simple-model POM</tertiary>
      </indexterm> <acronym>POM</acronym> du projet <varname>simple-model</varname>. Le projet
    <varname>simple-model</varname> contient les objets métiers utilisés tout au long de l'application.</para>

    <example id="ex-final-pom-for-simple-model">
      <title>POM final de simple-model</title>

      <programlisting language="xml">&lt;project xmlns="http://maven.apache.org/POM/4.0.0" 
         xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
         xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 
                             http://maven.apache.org/maven-v4_0_0.xsd"&gt;
  &lt;modelVersion&gt;4.0.0&lt;/modelVersion&gt;
  &lt;parent&gt;
    &lt;groupId&gt;org.sonatype.mavenbook.optimize&lt;/groupId&gt;
    &lt;artifactId&gt;simple-parent&lt;/artifactId&gt;
    &lt;version&gt;1.0&lt;/version&gt;
  &lt;/parent&gt;
  &lt;artifactId&gt;simple-model&lt;/artifactId&gt;
  &lt;packaging&gt;jar&lt;/packaging&gt;

  &lt;name&gt;Chapter 8 Simple Object Model&lt;/name&gt;

  &lt;dependencies&gt;
    &lt;dependency&gt;
      &lt;groupId&gt;org.hibernate&lt;/groupId&gt;
      &lt;artifactId&gt;hibernate-annotations&lt;/artifactId&gt;
    &lt;/dependency&gt;
    &lt;dependency&gt;
      &lt;groupId&gt;org.hibernate&lt;/groupId&gt;
      &lt;artifactId&gt;hibernate&lt;/artifactId&gt;
    &lt;/dependency&gt;
    &lt;dependency&gt;
      &lt;groupId&gt;javax.persistence&lt;/groupId&gt;
      &lt;artifactId&gt;persistence-api&lt;/artifactId&gt;
    &lt;/dependency&gt;
  &lt;/dependencies&gt;
&lt;/project&gt;
</programlisting>
    </example>

    <para>Le <acronym>POM</acronym> présenté dans l'<xref linkend="ex-final-pom-for-simple-persist" /> correspond
    au<indexterm>
        <primary>simple-persist POM (for reference)</primary>
      </indexterm><indexterm>
        <primary>pom.xml file</primary>

        <secondary>final POMs (for reference)</secondary>

        <tertiary>simple-persist POM</tertiary>
      </indexterm> <acronym>POM</acronym> du projet <varname>simple-persist</varname>. Le projet
    <varname>simple-persist</varname> contient toute la logique de persistance qui est mise en œuvre avec <phrase
    role="keep-together">Hibernate</phrase>.</para>

    <example id="ex-final-pom-for-simple-persist">
      <title>POM final de simple-persist</title>

      <programlisting language="xml">&lt;project xmlns="http://maven.apache.org/POM/4.0.0" 
         xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
         xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 
                             http://maven.apache.org/maven-v4_0_0.xsd"&gt;
  &lt;modelVersion&gt;4.0.0&lt;/modelVersion&gt;
  &lt;parent&gt;
    &lt;groupId&gt;org.sonatype.mavenbook.optimize&lt;/groupId&gt;
    &lt;artifactId&gt;simple-parent&lt;/artifactId&gt;
    &lt;version&gt;1.0&lt;/version&gt;
  &lt;/parent&gt;
  &lt;artifactId&gt;simple-persist&lt;/artifactId&gt;
  &lt;packaging&gt;jar&lt;/packaging&gt;

  &lt;name&gt;Chapter 8 Simple Persistence API&lt;/name&gt;

  &lt;dependencies&gt;
    &lt;dependency&gt;
      &lt;groupId&gt;\${project.groupId}&lt;/groupId&gt;
      &lt;artifactId&gt;simple-model&lt;/artifactId&gt;
      &lt;version&gt;\${project.version}&lt;/version&gt;
    &lt;/dependency&gt;
    &lt;dependency&gt;
      &lt;groupId&gt;org.hibernate&lt;/groupId&gt;
      &lt;artifactId&gt;hibernate&lt;/artifactId&gt;
    &lt;/dependency&gt;
    &lt;dependency&gt;
      &lt;groupId&gt;org.hibernate&lt;/groupId&gt;
      &lt;artifactId&gt;hibernate-annotations&lt;/artifactId&gt;
    &lt;/dependency&gt;
    &lt;dependency&gt;
      &lt;groupId&gt;org.hibernate&lt;/groupId&gt;
      &lt;artifactId&gt;hibernate-commons-annotations&lt;/artifactId&gt;
    &lt;/dependency&gt;
    &lt;dependency&gt;
      &lt;groupId&gt;javax.servlet&lt;/groupId&gt;
      &lt;artifactId&gt;servlet-api&lt;/artifactId&gt;
      &lt;version&gt;2.4&lt;/version&gt;
      &lt;scope&gt;provided&lt;/scope&gt;
    &lt;/dependency&gt;
    &lt;dependency&gt;
      &lt;groupId&gt;org.springframework&lt;/groupId&gt;
      &lt;artifactId&gt;spring&lt;/artifactId&gt;
    &lt;/dependency&gt;
  &lt;/dependencies&gt;
&lt;/project&gt;
</programlisting>
    </example>

    <para>Le <acronym>POM</acronym> présenté dans l'<xref linkend="ex-final-pom-for-simple-weather" />
    correspond<indexterm>
        <primary>simple-weather POM (for reference)</primary>
      </indexterm><indexterm>
        <primary>pom.xml file</primary>

        <secondary>final POMs (for reference)</secondary>

        <tertiary>simple-weather POM</tertiary>
      </indexterm><indexterm>
        <primary>weather project (example)</primary>

        <secondary>final simple-weather POM</secondary>
      </indexterm> au <acronym>POM</acronym> du projet <varname>simple-weather</varname>. Le projet
    <varname>simple-weather</varname> est le projet qui contient toute la logique pour parser le flux
    <acronym>RSS</acronym> de Yahoo! Météo. Ce projet dépend du projet <varname>simple-model</varname>.</para>

    <example id="ex-final-pom-for-simple-weather">
      <title>POM final de simple-weather</title>

      <programlisting language="xml">&lt;project xmlns="http://maven.apache.org/POM/4.0.0" 
         xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
         xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 
                             http://maven.apache.org/maven-v4_0_0.xsd"&gt;
  &lt;modelVersion&gt;4.0.0&lt;/modelVersion&gt;
  &lt;parent&gt;
    &lt;groupId&gt;org.sonatype.mavenbook.optimize&lt;/groupId&gt;
    &lt;artifactId&gt;simple-parent&lt;/artifactId&gt;
    &lt;version&gt;1.0&lt;/version&gt;
  &lt;/parent&gt;
  &lt;artifactId&gt;simple-weather&lt;/artifactId&gt;
  &lt;packaging&gt;jar&lt;/packaging&gt;

  &lt;name&gt;Chapter 8 Simple Weather API&lt;/name&gt;

  &lt;dependencies&gt;
    &lt;dependency&gt;
      &lt;groupId&gt;\${project.groupId}&lt;/groupId&gt;
      &lt;artifactId&gt;simple-model&lt;/artifactId&gt;
      &lt;version&gt;\${project.version}&lt;/version&gt;
    &lt;/dependency&gt;
    &lt;dependency&gt;
      &lt;groupId&gt;log4j&lt;/groupId&gt;
      &lt;artifactId&gt;log4j&lt;/artifactId&gt;
      &lt;version&gt;1.2.14&lt;/version&gt;
    &lt;/dependency&gt;
    &lt;dependency&gt;
      &lt;groupId&gt;dom4j&lt;/groupId&gt;
      &lt;artifactId&gt;dom4j&lt;/artifactId&gt;
      &lt;version&gt;1.6.1&lt;/version&gt;
    &lt;/dependency&gt;
    &lt;dependency&gt;
      &lt;groupId&gt;jaxen&lt;/groupId&gt;
      &lt;artifactId&gt;jaxen&lt;/artifactId&gt;
      &lt;version&gt;1.1.1&lt;/version&gt;
    &lt;/dependency&gt;
    &lt;dependency&gt;
      &lt;groupId&gt;org.apache.commons&lt;/groupId&gt;
      &lt;artifactId&gt;commons-io&lt;/artifactId&gt;
      &lt;version&gt;1.3.2&lt;/version&gt;
      &lt;scope&gt;test&lt;/scope&gt;
    &lt;/dependency&gt;
  &lt;/dependencies&gt;
&lt;/project&gt;
</programlisting>
    </example>

    <para>Enfin, le <acronym>POM</acronym> présenté dans l'<xref linkend="ex-final-pom-for-simple-webapp" /> correspond
    au<indexterm>
        <primary>simple-webapp POM (for reference)</primary>
      </indexterm><indexterm>
        <primary>pom.xml file</primary>

        <secondary>final POMs (for reference)</secondary>

        <tertiary>simple-webapp POM</tertiary>
      </indexterm><indexterm>
        <primary>Web applications</primary>

        <secondary>final simple-weather POM</secondary>
      </indexterm> <acronym>POM</acronym> du projet <varname>simple-webapp</varname>. Le projet
    <varname>simple-webapp</varname> contient une application web qui enregistre les prévisions météo obtenues dans une
    base de données <acronym>HSQLDB</acronym> et interagit avec les bibliothèques produites par le projet
    <varname>simple-weather</varname>.</para>

    <example id="ex-final-pom-for-simple-webapp">
      <title>POM final de simple-webapp</title>

      <programlisting language="xml">&lt;project xmlns="http://maven.apache.org/POM/4.0.0" 
  xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
  xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 
                      http://maven.apache.org/maven-v4_0_0.xsd"&gt;
  &lt;modelVersion&gt;4.0.0&lt;/modelVersion&gt;
  &lt;parent&gt;
    &lt;groupId&gt;org.sonatype.mavenbook.optimize&lt;/groupId&gt;
    &lt;artifactId&gt;simple-parent&lt;/artifactId&gt;
    &lt;version&gt;1.0&lt;/version&gt;
  &lt;/parent&gt;

  &lt;artifactId&gt;simple-webapp&lt;/artifactId&gt;
  &lt;packaging&gt;war&lt;/packaging&gt;
  &lt;name&gt;Chapter 8 Simple Web Application&lt;/name&gt;
  &lt;dependencies&gt;
    &lt;dependency&gt;
      &lt;groupId&gt;javax.servlet&lt;/groupId&gt;
      &lt;artifactId&gt;servlet-api&lt;/artifactId&gt;
      &lt;version&gt;2.4&lt;/version&gt;
      &lt;scope&gt;provided&lt;/scope&gt;
    &lt;/dependency&gt;
    &lt;dependency&gt;
      &lt;groupId&gt;\${project.groupId}&lt;/groupId&gt;
      &lt;artifactId&gt;simple-model&lt;/artifactId&gt;
      &lt;version&gt;\${project.version}&lt;/version&gt;
    &lt;/dependency&gt;
    &lt;dependency&gt;
      &lt;groupId&gt;\${project.groupId}&lt;/groupId&gt;
      &lt;artifactId&gt;simple-weather&lt;/artifactId&gt;
      &lt;version&gt;\${project.version}&lt;/version&gt;
    &lt;/dependency&gt;
    &lt;dependency&gt;
      &lt;groupId&gt;\${project.groupId}&lt;/groupId&gt;
      &lt;artifactId&gt;simple-persist&lt;/artifactId&gt;
      &lt;version&gt;\${project.version}&lt;/version&gt;
    &lt;/dependency&gt;
    &lt;dependency&gt;
      &lt;groupId&gt;org.springframework&lt;/groupId&gt;
      &lt;artifactId&gt;spring&lt;/artifactId&gt;
    &lt;/dependency&gt;
    &lt;dependency&gt;
      &lt;groupId&gt;javax.servlet&lt;/groupId&gt;
      &lt;artifactId&gt;jstl&lt;/artifactId&gt;
      &lt;version&gt;1.1.2&lt;/version&gt;
    &lt;/dependency&gt;
    &lt;dependency&gt;
      &lt;groupId&gt;taglibs&lt;/groupId&gt;
      &lt;artifactId&gt;standard&lt;/artifactId&gt;
      &lt;version&gt;1.1.2&lt;/version&gt;
    &lt;/dependency&gt;
    &lt;dependency&gt;
      &lt;groupId&gt;org.apache.velocity&lt;/groupId&gt;
      &lt;artifactId&gt;velocity&lt;/artifactId&gt;
    &lt;/dependency&gt;
  &lt;/dependencies&gt;
  &lt;build&gt;
    &lt;finalName&gt;simple-webapp&lt;/finalName&gt;
    &lt;plugins&gt;
      &lt;plugin&gt;
        &lt;groupId&gt;org.mortbay.jetty&lt;/groupId&gt;
        &lt;artifactId&gt;maven-jetty-plugin&lt;/artifactId&gt;
        &lt;version&gt;6.1.9&lt;/version&gt;
        &lt;dependencies&gt;
          &lt;dependency&gt;
            &lt;groupId&gt;hsqldb&lt;/groupId&gt;
            &lt;artifactId&gt;hsqldb&lt;/artifactId&gt;
            &lt;version&gt;\${hsqldb.version}&lt;/version&gt;
          &lt;/dependency&gt;
        &lt;/dependencies&gt;
      &lt;/plugin&gt;
    &lt;/plugins&gt;
  &lt;/build&gt;
&lt;/project&gt;
</programlisting>
    </example>
  </section>

  <section id="optimizing-sect-conclusion">
    <title>Conclusion</title>

    <para>Ce chapitre vous a présenté plusieurs techniques pour améliorer votre maîtrise de vos dépendances et de vos
    plugins afin de faciliter la maintenance de vos builds. Nous vous recommandons de revoir périodiquement vos builds
    afin de vérifier que les duplications et donc les risques <phrase role="keep-together">potentiels</phrase> soient
    minimisés. Au cours de la vie d'un projet, il est inévitable que de nouvelles dépendances soient ajoutées. Vous
    pouvez vous retrouver dans une situation où une dépendance qui autrefois n'était utilisée qu'à un seul endroit l'est
    maintenant en plus de 10, celle-ci devant donc être remontée. Les listes des dépendances utilisées ou inutilisées
    changent dans le temps<indexterm class="endofrange" startref="optref1a"></indexterm><indexterm class="endofrange"
    startref="optref1b"></indexterm> et elles peuvent être nettoyées facilement avec le plugin Maven Dependency.</para>
  </section>
</chapter>
